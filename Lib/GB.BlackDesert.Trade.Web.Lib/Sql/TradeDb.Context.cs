//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackDesert.TradeMarket.Lib.Sql
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SA_BETA_TRADEDB_0002 : DbContext
    {
        public SA_BETA_TRADEDB_0002()
            : base("name=SA_BETA_TRADEDB_0002")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("SA_BETA_TRADEDB_0002", "ufnParseSearchItemKey")]
        public virtual IQueryable<ufnParseSearchItemKey_Result> ufnParseSearchItemKey(string vchString, string vchDelimiter)
        {
            var vchStringParameter = vchString != null ?
                new ObjectParameter("vchString", vchString) :
                new ObjectParameter("vchString", typeof(string));
    
            var vchDelimiterParameter = vchDelimiter != null ?
                new ObjectParameter("vchDelimiter", vchDelimiter) :
                new ObjectParameter("vchDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnParseSearchItemKey_Result>("[SA_BETA_TRADEDB_0002].[ufnParseSearchItemKey](@vchString, @vchDelimiter)", vchStringParameter, vchDelimiterParameter);
        }
    
        public virtual int uspAutoBuyAllItems(Nullable<int> keyType, Nullable<double> moneyDivide, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var moneyDivideParameter = moneyDivide.HasValue ?
                new ObjectParameter("moneyDivide", moneyDivide) :
                new ObjectParameter("moneyDivide", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAutoBuyAllItems", keyTypeParameter, moneyDivideParameter, symNo, rv);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAutoBuyByCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAutoBuyByCategory");
        }
    
        public virtual int uspAutoBuyLongWaitingItems(Nullable<int> keyType, Nullable<int> itemWaitDay, Nullable<int> moneyDivide, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var itemWaitDayParameter = itemWaitDay.HasValue ?
                new ObjectParameter("itemWaitDay", itemWaitDay) :
                new ObjectParameter("itemWaitDay", typeof(int));
    
            var moneyDivideParameter = moneyDivide.HasValue ?
                new ObjectParameter("moneyDivide", moneyDivide) :
                new ObjectParameter("moneyDivide", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAutoBuyLongWaitingItems", keyTypeParameter, itemWaitDayParameter, moneyDivideParameter, symNo, rv);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAutoBuyOnePlayer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAutoBuyOnePlayer");
        }
    
        public virtual int uspDeletePayloadMaintenance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeletePayloadMaintenance");
        }
    
        public virtual int uspShrinkDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspShrinkDatabase");
        }
    
        public virtual int uspAddTrade(Nullable<int> keyType, Nullable<int> mainKey, Nullable<long> subKey, Nullable<long> price, Nullable<long> count, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddTrade", keyTypeParameter, mainKeyParameter, subKeyParameter, priceParameter, countParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspBuyablePersonalTradeList_Result> uspBuyablePersonalTradeList(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBuyablePersonalTradeList_Result>("uspBuyablePersonalTradeList", nationCodeParameter, serverNoParameter, userNoParameter, symNo, rv);
        }
    
        public virtual int uspBuyBiddingFromWorldMarket(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> buyKeyType, Nullable<int> buyMainKey, Nullable<int> buySubKey, Nullable<long> buyPrice, Nullable<long> buyCount, Nullable<int> buyChooseKey, Nullable<int> metarialMainKey, Nullable<long> buyerMetarialCount, Nullable<double> biddingRate, Nullable<long> weightPerOne, Nullable<long> maxWeight, Nullable<long> retryBiddingNo, ObjectParameter walletMoney, ObjectParameter realBuyCount, ObjectParameter totalMoneyCount, ObjectParameter sellNo, ObjectParameter sellUserNo, ObjectParameter sellUserId, ObjectParameter sellLeftCount, ObjectParameter raceCount, ObjectParameter stopType, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter beforeCount2, ObjectParameter afterCount2, ObjectParameter beforeCount3, ObjectParameter afterCount3, ObjectParameter beforeCount4, ObjectParameter afterCount4, ObjectParameter leftCount, ObjectParameter registerMoneyCount, ObjectParameter boughtCount, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var buyKeyTypeParameter = buyKeyType.HasValue ?
                new ObjectParameter("buyKeyType", buyKeyType) :
                new ObjectParameter("buyKeyType", typeof(int));
    
            var buyMainKeyParameter = buyMainKey.HasValue ?
                new ObjectParameter("buyMainKey", buyMainKey) :
                new ObjectParameter("buyMainKey", typeof(int));
    
            var buySubKeyParameter = buySubKey.HasValue ?
                new ObjectParameter("buySubKey", buySubKey) :
                new ObjectParameter("buySubKey", typeof(int));
    
            var buyPriceParameter = buyPrice.HasValue ?
                new ObjectParameter("buyPrice", buyPrice) :
                new ObjectParameter("buyPrice", typeof(long));
    
            var buyCountParameter = buyCount.HasValue ?
                new ObjectParameter("buyCount", buyCount) :
                new ObjectParameter("buyCount", typeof(long));
    
            var buyChooseKeyParameter = buyChooseKey.HasValue ?
                new ObjectParameter("buyChooseKey", buyChooseKey) :
                new ObjectParameter("buyChooseKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var buyerMetarialCountParameter = buyerMetarialCount.HasValue ?
                new ObjectParameter("buyerMetarialCount", buyerMetarialCount) :
                new ObjectParameter("buyerMetarialCount", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("BiddingRate", biddingRate) :
                new ObjectParameter("BiddingRate", typeof(double));
    
            var weightPerOneParameter = weightPerOne.HasValue ?
                new ObjectParameter("weightPerOne", weightPerOne) :
                new ObjectParameter("weightPerOne", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            var retryBiddingNoParameter = retryBiddingNo.HasValue ?
                new ObjectParameter("retryBiddingNo", retryBiddingNo) :
                new ObjectParameter("retryBiddingNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBuyBiddingFromWorldMarket", nationCodeParameter, serverNoParameter, userNoParameter, buyKeyTypeParameter, buyMainKeyParameter, buySubKeyParameter, buyPriceParameter, buyCountParameter, buyChooseKeyParameter, metarialMainKeyParameter, buyerMetarialCountParameter, biddingRateParameter, weightPerOneParameter, maxWeightParameter, retryBiddingNoParameter, walletMoney, realBuyCount, totalMoneyCount, sellNo, sellUserNo, sellUserId, sellLeftCount, raceCount, stopType, beforeCount1, afterCount1, beforeCount2, afterCount2, beforeCount3, afterCount3, beforeCount4, afterCount4, leftCount, registerMoneyCount, boughtCount, symNo, rv);
        }
    
        public virtual int uspBuyBiddingFromWorldMarketBySystem(Nullable<int> divideSellPriceBy, Nullable<int> buyKeyType, Nullable<int> buyMainKey, Nullable<int> buySubKey, Nullable<long> buyCount, Nullable<int> buyChooseKey, Nullable<int> metarialMainKey, Nullable<long> buyerMetarialCount, Nullable<double> biddingRate, ObjectParameter realBuyCount, ObjectParameter totalMoneyCount, ObjectParameter sellNo, ObjectParameter stopType, ObjectParameter symNo, ObjectParameter rv)
        {
            var divideSellPriceByParameter = divideSellPriceBy.HasValue ?
                new ObjectParameter("divideSellPriceBy", divideSellPriceBy) :
                new ObjectParameter("divideSellPriceBy", typeof(int));
    
            var buyKeyTypeParameter = buyKeyType.HasValue ?
                new ObjectParameter("buyKeyType", buyKeyType) :
                new ObjectParameter("buyKeyType", typeof(int));
    
            var buyMainKeyParameter = buyMainKey.HasValue ?
                new ObjectParameter("buyMainKey", buyMainKey) :
                new ObjectParameter("buyMainKey", typeof(int));
    
            var buySubKeyParameter = buySubKey.HasValue ?
                new ObjectParameter("buySubKey", buySubKey) :
                new ObjectParameter("buySubKey", typeof(int));
    
            var buyCountParameter = buyCount.HasValue ?
                new ObjectParameter("buyCount", buyCount) :
                new ObjectParameter("buyCount", typeof(long));
    
            var buyChooseKeyParameter = buyChooseKey.HasValue ?
                new ObjectParameter("buyChooseKey", buyChooseKey) :
                new ObjectParameter("buyChooseKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var buyerMetarialCountParameter = buyerMetarialCount.HasValue ?
                new ObjectParameter("buyerMetarialCount", buyerMetarialCount) :
                new ObjectParameter("buyerMetarialCount", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("BiddingRate", biddingRate) :
                new ObjectParameter("BiddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBuyBiddingFromWorldMarketBySystem", divideSellPriceByParameter, buyKeyTypeParameter, buyMainKeyParameter, buySubKeyParameter, buyCountParameter, buyChooseKeyParameter, metarialMainKeyParameter, buyerMetarialCountParameter, biddingRateParameter, realBuyCount, totalMoneyCount, sellNo, stopType, symNo, rv);
        }
    
        public virtual int uspBuyFromWorldMarket(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> buyKeyType, Nullable<int> buyMainKey, Nullable<int> buySubKey, Nullable<long> buyPrice, Nullable<long> buyCount, Nullable<int> buyChooseKey, Nullable<int> metarialMainKey, Nullable<long> needMetarialCount, Nullable<double> biddingRate, Nullable<bool> isCashCategory, Nullable<long> weightPerOne, Nullable<long> maxWeight, ObjectParameter realBuyCount, ObjectParameter totalMoneyCount, ObjectParameter buyNo, ObjectParameter biddingMoneyCount, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter beforeCount2, ObjectParameter afterCount2, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var buyKeyTypeParameter = buyKeyType.HasValue ?
                new ObjectParameter("buyKeyType", buyKeyType) :
                new ObjectParameter("buyKeyType", typeof(int));
    
            var buyMainKeyParameter = buyMainKey.HasValue ?
                new ObjectParameter("buyMainKey", buyMainKey) :
                new ObjectParameter("buyMainKey", typeof(int));
    
            var buySubKeyParameter = buySubKey.HasValue ?
                new ObjectParameter("buySubKey", buySubKey) :
                new ObjectParameter("buySubKey", typeof(int));
    
            var buyPriceParameter = buyPrice.HasValue ?
                new ObjectParameter("buyPrice", buyPrice) :
                new ObjectParameter("buyPrice", typeof(long));
    
            var buyCountParameter = buyCount.HasValue ?
                new ObjectParameter("buyCount", buyCount) :
                new ObjectParameter("buyCount", typeof(long));
    
            var buyChooseKeyParameter = buyChooseKey.HasValue ?
                new ObjectParameter("buyChooseKey", buyChooseKey) :
                new ObjectParameter("buyChooseKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var needMetarialCountParameter = needMetarialCount.HasValue ?
                new ObjectParameter("needMetarialCount", needMetarialCount) :
                new ObjectParameter("needMetarialCount", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("BiddingRate", biddingRate) :
                new ObjectParameter("BiddingRate", typeof(double));
    
            var isCashCategoryParameter = isCashCategory.HasValue ?
                new ObjectParameter("isCashCategory", isCashCategory) :
                new ObjectParameter("isCashCategory", typeof(bool));
    
            var weightPerOneParameter = weightPerOne.HasValue ?
                new ObjectParameter("weightPerOne", weightPerOne) :
                new ObjectParameter("weightPerOne", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBuyFromWorldMarket", nationCodeParameter, serverNoParameter, userNoParameter, buyKeyTypeParameter, buyMainKeyParameter, buySubKeyParameter, buyPriceParameter, buyCountParameter, buyChooseKeyParameter, metarialMainKeyParameter, needMetarialCountParameter, biddingRateParameter, isCashCategoryParameter, weightPerOneParameter, maxWeightParameter, realBuyCount, totalMoneyCount, buyNo, biddingMoneyCount, beforeCount1, afterCount1, beforeCount2, afterCount2, symNo, rv);
        }
    
        public virtual int uspBuyFromWorldMarketBySystem(Nullable<int> buyKeyType, Nullable<int> buyMainKey, Nullable<int> buySubKey, Nullable<long> buyCount, Nullable<int> buyChooseKey, Nullable<int> metarialMainKey, Nullable<long> needMetarialCount, Nullable<double> biddingRate, ObjectParameter realBuyCount, ObjectParameter totalMoneyCount, ObjectParameter buyNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var buyKeyTypeParameter = buyKeyType.HasValue ?
                new ObjectParameter("buyKeyType", buyKeyType) :
                new ObjectParameter("buyKeyType", typeof(int));
    
            var buyMainKeyParameter = buyMainKey.HasValue ?
                new ObjectParameter("buyMainKey", buyMainKey) :
                new ObjectParameter("buyMainKey", typeof(int));
    
            var buySubKeyParameter = buySubKey.HasValue ?
                new ObjectParameter("buySubKey", buySubKey) :
                new ObjectParameter("buySubKey", typeof(int));
    
            var buyCountParameter = buyCount.HasValue ?
                new ObjectParameter("buyCount", buyCount) :
                new ObjectParameter("buyCount", typeof(long));
    
            var buyChooseKeyParameter = buyChooseKey.HasValue ?
                new ObjectParameter("buyChooseKey", buyChooseKey) :
                new ObjectParameter("buyChooseKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var needMetarialCountParameter = needMetarialCount.HasValue ?
                new ObjectParameter("needMetarialCount", needMetarialCount) :
                new ObjectParameter("needMetarialCount", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("BiddingRate", biddingRate) :
                new ObjectParameter("BiddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBuyFromWorldMarketBySystem", buyKeyTypeParameter, buyMainKeyParameter, buySubKeyParameter, buyCountParameter, buyChooseKeyParameter, metarialMainKeyParameter, needMetarialCountParameter, biddingRateParameter, realBuyCount, totalMoneyCount, buyNo, symNo, rv);
        }
    
        public virtual int uspCalculateBiddingBuy(Nullable<long> buyNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> weightPerOne, Nullable<long> maxWeight, ObjectParameter boughtCount, ObjectParameter chooseSubKey, ObjectParameter isDelete, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var buyNoParameter = buyNo.HasValue ?
                new ObjectParameter("buyNo", buyNo) :
                new ObjectParameter("buyNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var weightPerOneParameter = weightPerOne.HasValue ?
                new ObjectParameter("weightPerOne", weightPerOne) :
                new ObjectParameter("weightPerOne", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCalculateBiddingBuy", buyNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, nationCodeParameter, serverNoParameter, userNoParameter, weightPerOneParameter, maxWeightParameter, boughtCount, chooseSubKey, isDelete, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspCalculateBiddingSell(Nullable<long> sellNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<int> mainCategory, Nullable<bool> isSealed, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> chooseSubKey, ObjectParameter soldCount, ObjectParameter isDelete, ObjectParameter amountMoney, ObjectParameter originalTotalMoneyCount, ObjectParameter packageExpiration, ObjectParameter isAppledRingBuff, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var sellNoParameter = sellNo.HasValue ?
                new ObjectParameter("sellNo", sellNo) :
                new ObjectParameter("sellNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var mainCategoryParameter = mainCategory.HasValue ?
                new ObjectParameter("mainCategory", mainCategory) :
                new ObjectParameter("mainCategory", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var chooseSubKeyParameter = chooseSubKey.HasValue ?
                new ObjectParameter("chooseSubKey", chooseSubKey) :
                new ObjectParameter("chooseSubKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCalculateBiddingSell", sellNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, mainCategoryParameter, isSealedParameter, nationCodeParameter, serverNoParameter, userNoParameter, chooseSubKeyParameter, soldCount, isDelete, amountMoney, originalTotalMoneyCount, packageExpiration, isAppledRingBuff, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspChangeItemWalletParam__XXX(Nullable<int> toNationCode, Nullable<int> toServerNo, Nullable<long> toUserNo, Nullable<int> fromNationCode, Nullable<int> fromServerNo, Nullable<long> fromUserNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> count, ObjectParameter symNo)
        {
            var toNationCodeParameter = toNationCode.HasValue ?
                new ObjectParameter("toNationCode", toNationCode) :
                new ObjectParameter("toNationCode", typeof(int));
    
            var toServerNoParameter = toServerNo.HasValue ?
                new ObjectParameter("toServerNo", toServerNo) :
                new ObjectParameter("toServerNo", typeof(int));
    
            var toUserNoParameter = toUserNo.HasValue ?
                new ObjectParameter("toUserNo", toUserNo) :
                new ObjectParameter("toUserNo", typeof(long));
    
            var fromNationCodeParameter = fromNationCode.HasValue ?
                new ObjectParameter("fromNationCode", fromNationCode) :
                new ObjectParameter("fromNationCode", typeof(int));
    
            var fromServerNoParameter = fromServerNo.HasValue ?
                new ObjectParameter("fromServerNo", fromServerNo) :
                new ObjectParameter("fromServerNo", typeof(int));
    
            var fromUserNoParameter = fromUserNo.HasValue ?
                new ObjectParameter("fromUserNo", fromUserNo) :
                new ObjectParameter("fromUserNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangeItemWalletParam__XXX", toNationCodeParameter, toServerNoParameter, toUserNoParameter, fromNationCodeParameter, fromServerNoParameter, fromUserNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, countParameter, symNo);
        }
    
        public virtual int uspCheckAndUpdateBlackUser(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter blocked, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAndUpdateBlackUser", nationCodeParameter, serverNoParameter, userNoParameter, blocked, symNo, rv);
        }
    
        public virtual int uspCheckLastOtpTime(Nullable<long> userNo, Nullable<int> worldNo, Nullable<int> nationCode, ObjectParameter resultCode)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckLastOtpTime", userNoParameter, worldNoParameter, nationCodeParameter, resultCode);
        }
    
        public virtual int uspCheckMyWallet_XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckMyWallet_XXX", nationCodeParameter, serverNoParameter, userNoParameter, symNo);
        }
    
        public virtual int uspCheckOTPItem(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, ObjectParameter isOTPItem, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckOTPItem", keyTypeParameter, mainKeyParameter, subKeyParameter, isOTPItem, symNo, rv);
        }
    
        public virtual int uspClearNoticeItemList(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClearNoticeItemList", symNo, rv);
        }
    
        public virtual int uspCreateMyWallet(string userId, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, string userNickname, Nullable<System.DateTime> packageExpiration, Nullable<System.DateTime> addWeightBuffExpiration, Nullable<int> addPearlItemLimitedCount, Nullable<int> maidCount, Nullable<bool> isGameMaster, Nullable<double> addTaxDiscountRate, Nullable<int> familySkillAddTaxDiscountRate, Nullable<int> inceaseWeight, Nullable<int> inceaseWeightByBuff, Nullable<int> ringCount, ObjectParameter isCreateWallet, ObjectParameter symNo, ObjectParameter rv)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            var packageExpirationParameter = packageExpiration.HasValue ?
                new ObjectParameter("packageExpiration", packageExpiration) :
                new ObjectParameter("packageExpiration", typeof(System.DateTime));
    
            var addWeightBuffExpirationParameter = addWeightBuffExpiration.HasValue ?
                new ObjectParameter("addWeightBuffExpiration", addWeightBuffExpiration) :
                new ObjectParameter("addWeightBuffExpiration", typeof(System.DateTime));
    
            var addPearlItemLimitedCountParameter = addPearlItemLimitedCount.HasValue ?
                new ObjectParameter("addPearlItemLimitedCount", addPearlItemLimitedCount) :
                new ObjectParameter("addPearlItemLimitedCount", typeof(int));
    
            var maidCountParameter = maidCount.HasValue ?
                new ObjectParameter("maidCount", maidCount) :
                new ObjectParameter("maidCount", typeof(int));
    
            var isGameMasterParameter = isGameMaster.HasValue ?
                new ObjectParameter("isGameMaster", isGameMaster) :
                new ObjectParameter("isGameMaster", typeof(bool));
    
            var addTaxDiscountRateParameter = addTaxDiscountRate.HasValue ?
                new ObjectParameter("addTaxDiscountRate", addTaxDiscountRate) :
                new ObjectParameter("addTaxDiscountRate", typeof(double));
    
            var familySkillAddTaxDiscountRateParameter = familySkillAddTaxDiscountRate.HasValue ?
                new ObjectParameter("familySkillAddTaxDiscountRate", familySkillAddTaxDiscountRate) :
                new ObjectParameter("familySkillAddTaxDiscountRate", typeof(int));
    
            var inceaseWeightParameter = inceaseWeight.HasValue ?
                new ObjectParameter("inceaseWeight", inceaseWeight) :
                new ObjectParameter("inceaseWeight", typeof(int));
    
            var inceaseWeightByBuffParameter = inceaseWeightByBuff.HasValue ?
                new ObjectParameter("inceaseWeightByBuff", inceaseWeightByBuff) :
                new ObjectParameter("inceaseWeightByBuff", typeof(int));
    
            var ringCountParameter = ringCount.HasValue ?
                new ObjectParameter("ringCount", ringCount) :
                new ObjectParameter("ringCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateMyWallet", userIdParameter, nationCodeParameter, serverNoParameter, userNoParameter, userNicknameParameter, packageExpirationParameter, addWeightBuffExpirationParameter, addPearlItemLimitedCountParameter, maidCountParameter, isGameMasterParameter, addTaxDiscountRateParameter, familySkillAddTaxDiscountRateParameter, inceaseWeightParameter, inceaseWeightByBuffParameter, ringCountParameter, isCreateWallet, symNo, rv);
        }
    
        public virtual int uspDeleteKeyWord(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> keyWordNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyWordNoParameter = keyWordNo.HasValue ?
                new ObjectParameter("keyWordNo", keyWordNo) :
                new ObjectParameter("keyWordNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteKeyWord", nationCodeParameter, serverNoParameter, userNoParameter, keyWordNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspFindUser_Result> uspFindUser(Nullable<int> serverNo, string userNickname, ObjectParameter symNo, ObjectParameter rv)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFindUser_Result>("uspFindUser", serverNoParameter, userNicknameParameter, symNo, rv);
        }
    
        public virtual int uspGetAddTaxDiscountRate(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter addTaxDiscountRate, ObjectParameter familySkillAddTaxDiscountRate)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetAddTaxDiscountRate", nationCodeParameter, serverNoParameter, userNoParameter, addTaxDiscountRate, familySkillAddTaxDiscountRate);
        }
    
        public virtual ObjectResult<Nullable<bool>> uspGetAppPushEnable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uspGetAppPushEnable");
        }
    
        public virtual int uspGetItemPrice(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, ObjectParameter pricePerOne, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetItemPrice", keyTypeParameter, mainKeyParameter, subKeyParameter, pricePerOne, symNo, rv);
        }
    
        public virtual int uspGetLastOtpTime(Nullable<long> userNo, Nullable<int> worldNo, Nullable<int> nationCode, ObjectParameter lastConfirmOtpTime, ObjectParameter resultCode)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetLastOtpTime", userNoParameter, worldNoParameter, nationCodeParameter, lastConfirmOtpTime, resultCode);
        }
    
        public virtual ObjectResult<uspGetLogWriteEnable_Result> uspGetLogWriteEnable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLogWriteEnable_Result>("uspGetLogWriteEnable");
        }
    
        public virtual ObjectResult<uspGetMarketPriceInfo_Result> uspGetMarketPriceInfo(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMarketPriceInfo_Result>("uspGetMarketPriceInfo", keyTypeParameter, mainKeyParameter, subKeyParameter, symNo);
        }
    
        public virtual int uspGetMaterialPrice_XXX(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, ObjectParameter metarialPricePerOneStock, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetMaterialPrice_XXX", keyTypeParameter, mainKeyParameter, subKeyParameter, metarialPricePerOneStock, symNo);
        }
    
        public virtual int uspGetMyWalletInfo(string userId, ObjectParameter userNo, ObjectParameter userNickName, ObjectParameter serviceType, ObjectParameter worldNo, ObjectParameter valuepackage, ObjectParameter addWeightBuff, ObjectParameter resultCode, ObjectParameter resultMsg)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetMyWalletInfo", userIdParameter, userNo, userNickName, serviceType, worldNo, valuepackage, addWeightBuff, resultCode, resultMsg);
        }
    
        public virtual int uspGetPearlItemLimitedCount(Nullable<long> userNo, Nullable<int> serverNo, Nullable<int> nationCode, ObjectParameter addPearlItemLimitedCount, ObjectParameter currentPearlItemLimitedCount, ObjectParameter addWeight, ObjectParameter ringBuffCount)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetPearlItemLimitedCount", userNoParameter, serverNoParameter, nationCodeParameter, addPearlItemLimitedCount, currentPearlItemLimitedCount, addWeight, ringBuffCount);
        }
    
        public virtual int uspGetSecondPwdInfo(Nullable<int> serverNo, Nullable<long> userNo, Nullable<bool> failFlag, ObjectParameter failCount)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var failFlagParameter = failFlag.HasValue ?
                new ObjectParameter("failFlag", failFlag) :
                new ObjectParameter("failFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetSecondPwdInfo", serverNoParameter, userNoParameter, failFlagParameter, failCount);
        }
    
        public virtual int uspGetServantNo(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, ObjectParameter servantNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetServantNo", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, servantNo, symNo, rv);
        }
    
        public virtual ObjectResult<uspGetShutDownCheckUseWeb_Result> uspGetShutDownCheckUseWeb(string cultureCode, ObjectParameter resultCode)
        {
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("cultureCode", cultureCode) :
                new ObjectParameter("cultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetShutDownCheckUseWeb_Result>("uspGetShutDownCheckUseWeb", cultureCodeParameter, resultCode);
        }
    
        public virtual int uspGetWaitItemShutDown_XXX(ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetWaitItemShutDown_XXX", symNo);
        }
    
        public virtual int uspGetWithDrawPayLoadState(Nullable<long> userNo, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> payload, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> count, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter state, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetWithDrawPayLoadState", userNoParameter, nationCodeParameter, serverNoParameter, payloadParameter, mainKeyParameter, subKeyParameter, isSealedParameter, countParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, state, symNo, rv);
        }
    
        public virtual int uspIncreaseTickCount(Nullable<int> mainGroupNo, ObjectParameter isUpdatePrice, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainGroupNoParameter = mainGroupNo.HasValue ?
                new ObjectParameter("mainGroupNo", mainGroupNo) :
                new ObjectParameter("mainGroupNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIncreaseTickCount", mainGroupNoParameter, isUpdatePrice, symNo, rv);
        }
    
        public virtual int uspInsertBlockItem(Nullable<int> keyType, Nullable<int> mainKey, Nullable<long> subKey, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBlockItem", keyTypeParameter, mainKeyParameter, subKeyParameter, symNo, rv);
        }
    
        public virtual int uspInsertBlockUser(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<System.DateTime> dueDate, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("dueDate", dueDate) :
                new ObjectParameter("dueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBlockUser", nationCodeParameter, serverNoParameter, userNoParameter, dueDateParameter, symNo, rv);
        }
    
        public virtual int uspInsertKeyWord(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, string searchKeyWord, ObjectParameter keyWordNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var searchKeyWordParameter = searchKeyWord != null ?
                new ObjectParameter("searchKeyWord", searchKeyWord) :
                new ObjectParameter("searchKeyWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertKeyWord", nationCodeParameter, serverNoParameter, userNoParameter, searchKeyWordParameter, keyWordNo, symNo, rv);
        }
    
        public virtual int uspInsertToGroupMarketPriceInfo_XXX(Nullable<long> priceGroupKey, Nullable<long> price, ObjectParameter symNo)
        {
            var priceGroupKeyParameter = priceGroupKey.HasValue ?
                new ObjectParameter("priceGroupKey", priceGroupKey) :
                new ObjectParameter("priceGroupKey", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertToGroupMarketPriceInfo_XXX", priceGroupKeyParameter, priceParameter, symNo);
        }
    
        public virtual int uspInsertToGroupNoticeItem_XXX(Nullable<long> priceGroupKey, Nullable<long> price, Nullable<long> chagedValue, Nullable<short> noticeType, ObjectParameter symNo)
        {
            var priceGroupKeyParameter = priceGroupKey.HasValue ?
                new ObjectParameter("priceGroupKey", priceGroupKey) :
                new ObjectParameter("priceGroupKey", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var chagedValueParameter = chagedValue.HasValue ?
                new ObjectParameter("chagedValue", chagedValue) :
                new ObjectParameter("chagedValue", typeof(long));
    
            var noticeTypeParameter = noticeType.HasValue ?
                new ObjectParameter("noticeType", noticeType) :
                new ObjectParameter("noticeType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertToGroupNoticeItem_XXX", priceGroupKeyParameter, priceParameter, chagedValueParameter, noticeTypeParameter, symNo);
        }
    
        public virtual int uspInsertToMarketPriceInfo_XXX(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> price, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertToMarketPriceInfo_XXX", keyTypeParameter, mainKeyParameter, subKeyParameter, priceParameter, symNo);
        }
    
        public virtual int uspInsertToNoticeItem_XXX(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> price, Nullable<long> chagedValue, Nullable<short> noticeType, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var chagedValueParameter = chagedValue.HasValue ?
                new ObjectParameter("chagedValue", chagedValue) :
                new ObjectParameter("chagedValue", typeof(long));
    
            var noticeTypeParameter = noticeType.HasValue ?
                new ObjectParameter("noticeType", noticeType) :
                new ObjectParameter("noticeType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertToNoticeItem_XXX", keyTypeParameter, mainKeyParameter, subKeyParameter, priceParameter, chagedValueParameter, noticeTypeParameter, symNo);
        }
    
        public virtual int uspIsBlockItem__XXX(Nullable<int> keyType, Nullable<int> mainKey, Nullable<long> subKey, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsBlockItem__XXX", keyTypeParameter, mainKeyParameter, subKeyParameter, symNo);
        }
    
        public virtual int uspIsBlockUser__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsBlockUser__XXX", nationCodeParameter, serverNoParameter, userNoParameter, symNo);
        }
    
        public virtual int uspIsGameMaster__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter isGameMaster)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsGameMaster__XXX", nationCodeParameter, serverNoParameter, userNoParameter, isGameMaster);
        }
    
        public virtual int uspIsMarketOpen__XXX(ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsMarketOpen__XXX", symNo);
        }
    
        public virtual ObjectResult<uspListBiddingInfo_Result> uspListBiddingInfo(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<int> metarialMainKey, Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListBiddingInfo_Result>("uspListBiddingInfo", keyTypeParameter, mainKeyParameter, subKeyParameter, metarialMainKeyParameter, biddingRateParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListBiddingPrice_Result> uspListBiddingPrice(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<int> maxGroupKey, Nullable<double> biddingRate, Nullable<long> pricePerOne, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var maxGroupKeyParameter = maxGroupKey.HasValue ?
                new ObjectParameter("maxGroupKey", maxGroupKey) :
                new ObjectParameter("maxGroupKey", typeof(int));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            var pricePerOneParameter = pricePerOne.HasValue ?
                new ObjectParameter("pricePerOne", pricePerOne) :
                new ObjectParameter("pricePerOne", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListBiddingPrice_Result>("uspListBiddingPrice", keyTypeParameter, mainKeyParameter, subKeyParameter, maxGroupKeyParameter, biddingRateParameter, pricePerOneParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListGroupBiddingPrice_Result> uspListGroupBiddingPrice(Nullable<long> priceGroupKey, Nullable<double> biddingRate, Nullable<long> pricePerOne, ObjectParameter symNo, ObjectParameter rv)
        {
            var priceGroupKeyParameter = priceGroupKey.HasValue ?
                new ObjectParameter("priceGroupKey", priceGroupKey) :
                new ObjectParameter("priceGroupKey", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            var pricePerOneParameter = pricePerOne.HasValue ?
                new ObjectParameter("pricePerOne", pricePerOne) :
                new ObjectParameter("pricePerOne", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGroupBiddingPrice_Result>("uspListGroupBiddingPrice", priceGroupKeyParameter, biddingRateParameter, pricePerOneParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListKeyWord_Result> uspListKeyWord(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListKeyWord_Result>("uspListKeyWord", nationCodeParameter, serverNoParameter, userNoParameter);
        }
    
        public virtual ObjectResult<uspListNoticeItem_Result> uspListNoticeItem(Nullable<long> checkDateTimeStamp, ObjectParameter rv, ObjectParameter symNo)
        {
            var checkDateTimeStampParameter = checkDateTimeStamp.HasValue ?
                new ObjectParameter("checkDateTimeStamp", checkDateTimeStamp) :
                new ObjectParameter("checkDateTimeStamp", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListNoticeItem_Result>("uspListNoticeItem", checkDateTimeStampParameter, rv, symNo);
        }
    
        public virtual ObjectResult<uspListTickCount_Result> uspListTickCount(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListTickCount_Result>("uspListTickCount", symNo, rv);
        }
    
        public virtual ObjectResult<uspListUserBiddingBuy_Result> uspListUserBiddingBuy(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserBiddingBuy_Result>("uspListUserBiddingBuy", nationCodeParameter, serverNoParameter, userNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListUserBiddingSell_Result> uspListUserBiddingSell(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserBiddingSell_Result>("uspListUserBiddingSell", nationCodeParameter, serverNoParameter, userNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWaitBiddingSell_Result> uspListWaitBiddingSell(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWaitBiddingSell_Result>("uspListWaitBiddingSell", symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarket_Result> uspListWorldMarket(Nullable<int> keyType, Nullable<int> mainCategory, Nullable<int> subCategory, Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainCategoryParameter = mainCategory.HasValue ?
                new ObjectParameter("mainCategory", mainCategory) :
                new ObjectParameter("mainCategory", typeof(int));
    
            var subCategoryParameter = subCategory.HasValue ?
                new ObjectParameter("subCategory", subCategory) :
                new ObjectParameter("subCategory", typeof(int));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarket_Result>("uspListWorldMarket", keyTypeParameter, mainCategoryParameter, subCategoryParameter, biddingRateParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketAccumulateTrade_Result> uspListWorldMarketAccumulateTrade(Nullable<int> mainGroupNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainGroupNoParameter = mainGroupNo.HasValue ?
                new ObjectParameter("mainGroupNo", mainGroupNo) :
                new ObjectParameter("mainGroupNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketAccumulateTrade_Result>("uspListWorldMarketAccumulateTrade", mainGroupNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketAccumulateTradeByStock_Result> uspListWorldMarketAccumulateTradeByStock(Nullable<int> mainGroupNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainGroupNoParameter = mainGroupNo.HasValue ?
                new ObjectParameter("mainGroupNo", mainGroupNo) :
                new ObjectParameter("mainGroupNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketAccumulateTradeByStock_Result>("uspListWorldMarketAccumulateTradeByStock", mainGroupNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketByMainGroup_Result> uspListWorldMarketByMainGroup(Nullable<int> mainGroupNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainGroupNoParameter = mainGroupNo.HasValue ?
                new ObjectParameter("mainGroupNo", mainGroupNo) :
                new ObjectParameter("mainGroupNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketByMainGroup_Result>("uspListWorldMarketByMainGroup", mainGroupNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketCurrentPrice_Result> uspListWorldMarketCurrentPrice(Nullable<int> mainCategory, Nullable<int> subCategory, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainCategoryParameter = mainCategory.HasValue ?
                new ObjectParameter("mainCategory", mainCategory) :
                new ObjectParameter("mainCategory", typeof(int));
    
            var subCategoryParameter = subCategory.HasValue ?
                new ObjectParameter("subCategory", subCategory) :
                new ObjectParameter("subCategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketCurrentPrice_Result>("uspListWorldMarketCurrentPrice", mainCategoryParameter, subCategoryParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketDetail_Result> uspListWorldMarketDetail(Nullable<int> keyType, Nullable<int> mainKey, Nullable<bool> isUseTotalTradeCount, Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var isUseTotalTradeCountParameter = isUseTotalTradeCount.HasValue ?
                new ObjectParameter("isUseTotalTradeCount", isUseTotalTradeCount) :
                new ObjectParameter("isUseTotalTradeCount", typeof(bool));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketDetail_Result>("uspListWorldMarketDetail", keyTypeParameter, mainKeyParameter, isUseTotalTradeCountParameter, biddingRateParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketDetailByCategory_Result> uspListWorldMarketDetailByCategory(Nullable<int> mainCategory, Nullable<int> subCategory, Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainCategoryParameter = mainCategory.HasValue ?
                new ObjectParameter("mainCategory", mainCategory) :
                new ObjectParameter("mainCategory", typeof(int));
    
            var subCategoryParameter = subCategory.HasValue ?
                new ObjectParameter("subCategory", subCategory) :
                new ObjectParameter("subCategory", typeof(int));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketDetailByCategory_Result>("uspListWorldMarketDetailByCategory", mainCategoryParameter, subCategoryParameter, biddingRateParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketHot_Result> uspListWorldMarketHot(Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketHot_Result>("uspListWorldMarketHot", biddingRateParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketMyWallet_Result> uspListWorldMarketMyWallet(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketMyWallet_Result>("uspListWorldMarketMyWallet", nationCodeParameter, serverNoParameter, userNoParameter, symNo, rv);
        }
    
        public virtual ObjectResult<uspListWorldMarketWait_Result> uspListWorldMarketWait(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldMarketWait_Result>("uspListWorldMarketWait", symNo, rv);
        }
    
        public virtual ObjectResult<uspLoadWorldMarketInfo_Result> uspLoadWorldMarketInfo(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoadWorldMarketInfo_Result>("uspLoadWorldMarketInfo", symNo, rv);
        }
    
        public virtual int uspPayCommission__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> mainCategory, Nullable<long> originalPrice, Nullable<byte> applyRingBuffType, ObjectParameter resultPrice, ObjectParameter packageExpiration, ObjectParameter isNextRingBuff, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var mainCategoryParameter = mainCategory.HasValue ?
                new ObjectParameter("mainCategory", mainCategory) :
                new ObjectParameter("mainCategory", typeof(int));
    
            var originalPriceParameter = originalPrice.HasValue ?
                new ObjectParameter("originalPrice", originalPrice) :
                new ObjectParameter("originalPrice", typeof(long));
    
            var applyRingBuffTypeParameter = applyRingBuffType.HasValue ?
                new ObjectParameter("applyRingBuffType", applyRingBuffType) :
                new ObjectParameter("applyRingBuffType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPayCommission__XXX", nationCodeParameter, serverNoParameter, userNoParameter, mainCategoryParameter, originalPriceParameter, applyRingBuffTypeParameter, resultPrice, packageExpiration, isNextRingBuff, symNo);
        }
    
        public virtual ObjectResult<uspPersonalTradeList_Result> uspPersonalTradeList(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPersonalTradeList_Result>("uspPersonalTradeList", nationCodeParameter, serverNoParameter, userNoParameter, symNo, rv);
        }
    
        public virtual int uspPopItemFromMyWallet__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> count, ObjectParameter beforeCount, ObjectParameter afterCount, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPopItemFromMyWallet__XXX", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, countParameter, beforeCount, afterCount, symNo);
        }
    
        public virtual int uspPopItemFromMyWalletParam__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> count, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPopItemFromMyWalletParam__XXX", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, countParameter, symNo);
        }
    
        public virtual int uspPopItemFromPersonalTrade__XXX(Nullable<long> marketNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> pricePerOne, Nullable<long> count, Nullable<int> fromNationCode, Nullable<int> fromServerNo, Nullable<long> fromUserNo, ObjectParameter symNo)
        {
            var marketNoParameter = marketNo.HasValue ?
                new ObjectParameter("marketNo", marketNo) :
                new ObjectParameter("marketNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var pricePerOneParameter = pricePerOne.HasValue ?
                new ObjectParameter("pricePerOne", pricePerOne) :
                new ObjectParameter("pricePerOne", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fromNationCodeParameter = fromNationCode.HasValue ?
                new ObjectParameter("fromNationCode", fromNationCode) :
                new ObjectParameter("fromNationCode", typeof(int));
    
            var fromServerNoParameter = fromServerNo.HasValue ?
                new ObjectParameter("fromServerNo", fromServerNo) :
                new ObjectParameter("fromServerNo", typeof(int));
    
            var fromUserNoParameter = fromUserNo.HasValue ?
                new ObjectParameter("fromUserNo", fromUserNo) :
                new ObjectParameter("fromUserNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPopItemFromPersonalTrade__XXX", marketNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, pricePerOneParameter, countParameter, fromNationCodeParameter, fromServerNoParameter, fromUserNoParameter, symNo);
        }
    
        public virtual int uspPopWeightToMyWallet__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> weight, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPopWeightToMyWallet__XXX", nationCodeParameter, serverNoParameter, userNoParameter, weightParameter, symNo);
        }
    
        public virtual int uspPrepareDepositToWorldMarket(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> count, Nullable<bool> isSealed, Nullable<long> itemWeight, Nullable<long> maxWeight, ObjectParameter payload, ObjectParameter isNotError, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var itemWeightParameter = itemWeight.HasValue ?
                new ObjectParameter("itemWeight", itemWeight) :
                new ObjectParameter("itemWeight", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPrepareDepositToWorldMarket", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, countParameter, isSealedParameter, itemWeightParameter, maxWeightParameter, payload, isNotError, symNo, rv);
        }
    
        public virtual int uspPrepareWithdrawFromWorldMarket(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> count, Nullable<long> itemWeight, ObjectParameter payload, ObjectParameter param0, ObjectParameter param1, ObjectParameter param2, ObjectParameter param3, ObjectParameter param4, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var itemWeightParameter = itemWeight.HasValue ?
                new ObjectParameter("itemWeight", itemWeight) :
                new ObjectParameter("itemWeight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPrepareWithdrawFromWorldMarket", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, countParameter, itemWeightParameter, payload, param0, param1, param2, param3, param4, symNo, rv);
        }
    
        public virtual int uspProcessDepositToWorldMarket(Nullable<long> payload, ObjectParameter reason, ObjectParameter keyType, ObjectParameter mainKey, ObjectParameter subKey, ObjectParameter isSealed, ObjectParameter param0, ObjectParameter param1, ObjectParameter param2, ObjectParameter param3, ObjectParameter param4, ObjectParameter count, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessDepositToWorldMarket", payloadParameter, reason, keyType, mainKey, subKey, isSealed, param0, param1, param2, param3, param4, count, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspProcessWithdrawFromWorldMarket(Nullable<long> payload, ObjectParameter reason, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessWithdrawFromWorldMarket", payloadParameter, reason, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspPushItemToMyWallet__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> count, ObjectParameter beforeCount, ObjectParameter afterCount, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPushItemToMyWallet__XXX", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, countParameter, beforeCount, afterCount, symNo);
        }
    
        public virtual int uspPushItemToMyWalletParam__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> count, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPushItemToMyWalletParam__XXX", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, countParameter, symNo);
        }
    
        public virtual int uspPushItemToPersonalTrade__XXX(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> pricePerOne, Nullable<long> count, Nullable<int> fromNationCode, Nullable<int> fromServerNo, Nullable<long> fromUserNo, Nullable<int> toNationCode, Nullable<int> toServetNo, Nullable<long> toUserNo, ObjectParameter marketNo, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var pricePerOneParameter = pricePerOne.HasValue ?
                new ObjectParameter("pricePerOne", pricePerOne) :
                new ObjectParameter("pricePerOne", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var fromNationCodeParameter = fromNationCode.HasValue ?
                new ObjectParameter("fromNationCode", fromNationCode) :
                new ObjectParameter("fromNationCode", typeof(int));
    
            var fromServerNoParameter = fromServerNo.HasValue ?
                new ObjectParameter("fromServerNo", fromServerNo) :
                new ObjectParameter("fromServerNo", typeof(int));
    
            var fromUserNoParameter = fromUserNo.HasValue ?
                new ObjectParameter("fromUserNo", fromUserNo) :
                new ObjectParameter("fromUserNo", typeof(long));
    
            var toNationCodeParameter = toNationCode.HasValue ?
                new ObjectParameter("toNationCode", toNationCode) :
                new ObjectParameter("toNationCode", typeof(int));
    
            var toServetNoParameter = toServetNo.HasValue ?
                new ObjectParameter("toServetNo", toServetNo) :
                new ObjectParameter("toServetNo", typeof(int));
    
            var toUserNoParameter = toUserNo.HasValue ?
                new ObjectParameter("toUserNo", toUserNo) :
                new ObjectParameter("toUserNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPushItemToPersonalTrade__XXX", keyTypeParameter, mainKeyParameter, subKeyParameter, pricePerOneParameter, countParameter, fromNationCodeParameter, fromServerNoParameter, fromUserNoParameter, toNationCodeParameter, toServetNoParameter, toUserNoParameter, marketNo, symNo);
        }
    
        public virtual int uspPushWeightToMyWallet__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> weight, Nullable<long> maxWeight, Nullable<bool> isNecessaryUpdate, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            var isNecessaryUpdateParameter = isNecessaryUpdate.HasValue ?
                new ObjectParameter("isNecessaryUpdate", isNecessaryUpdate) :
                new ObjectParameter("isNecessaryUpdate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPushWeightToMyWallet__XXX", nationCodeParameter, serverNoParameter, userNoParameter, weightParameter, maxWeightParameter, isNecessaryUpdateParameter, symNo);
        }
    
        public virtual int uspRemoveBlockItem(Nullable<int> keyType, Nullable<int> mainKey, Nullable<long> subKey, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveBlockItem", keyTypeParameter, mainKeyParameter, subKeyParameter, symNo, rv);
        }
    
        public virtual int uspRemoveBlockUser(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveBlockUser", nationCodeParameter, serverNoParameter, userNoParameter, symNo, rv);
        }
    
        public virtual int uspRingBuffCheck__XXXXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<byte> applyRingBuffType, ObjectParameter isNextRingBuff, ObjectParameter ringDiscountRate, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var applyRingBuffTypeParameter = applyRingBuffType.HasValue ?
                new ObjectParameter("applyRingBuffType", applyRingBuffType) :
                new ObjectParameter("applyRingBuffType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRingBuffCheck__XXXXX", nationCodeParameter, serverNoParameter, userNoParameter, applyRingBuffTypeParameter, isNextRingBuff, ringDiscountRate, symNo);
        }
    
        public virtual ObjectResult<uspSearchListWorldMarket_Result> uspSearchListWorldMarket(string searchResultString, Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var searchResultStringParameter = searchResultString != null ?
                new ObjectParameter("searchResultString", searchResultString) :
                new ObjectParameter("searchResultString", typeof(string));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSearchListWorldMarket_Result>("uspSearchListWorldMarket", searchResultStringParameter, biddingRateParameter, symNo, rv);
        }
    
        public virtual int uspSellBiddingToWorldMarket(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> sellKeyType, Nullable<int> sellMainKey, Nullable<int> sellSubKey, Nullable<int> sellMainCategory, Nullable<bool> isSealed, Nullable<long> sellPrice, Nullable<long> sellCount, Nullable<int> sellChooseKey, Nullable<int> metarialMainKey, Nullable<long> needMetarialCount, Nullable<double> biddingRate, Nullable<bool> isNoticeItem, Nullable<long> weightPerOne, Nullable<long> maxWeight, Nullable<long> maxPearlItemLimitedCount, Nullable<System.DateTime> currentTime, Nullable<byte> applyRingBuffType, Nullable<long> waitNo, Nullable<bool> isRingBuff, Nullable<long> retryBiddingNo, ObjectParameter walletMoney, ObjectParameter realSellCount, ObjectParameter totalMoneyCount, ObjectParameter originalTotalMoneyCount, ObjectParameter packageExpiration, ObjectParameter buyNo, ObjectParameter buyUserNo, ObjectParameter buyUserId, ObjectParameter buyLeftCount, ObjectParameter stopType, ObjectParameter isNextApplyRingBuff, ObjectParameter resultWaitNo, ObjectParameter raceCount, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter beforeCount2, ObjectParameter afterCount2, ObjectParameter beforeCount3, ObjectParameter afterCount3, ObjectParameter beforeCount4, ObjectParameter afterCount4, ObjectParameter soldCount, ObjectParameter leftCount, ObjectParameter moneyCount, ObjectParameter calculateMoney, ObjectParameter isCalculateRingBuff, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var sellKeyTypeParameter = sellKeyType.HasValue ?
                new ObjectParameter("sellKeyType", sellKeyType) :
                new ObjectParameter("sellKeyType", typeof(int));
    
            var sellMainKeyParameter = sellMainKey.HasValue ?
                new ObjectParameter("sellMainKey", sellMainKey) :
                new ObjectParameter("sellMainKey", typeof(int));
    
            var sellSubKeyParameter = sellSubKey.HasValue ?
                new ObjectParameter("sellSubKey", sellSubKey) :
                new ObjectParameter("sellSubKey", typeof(int));
    
            var sellMainCategoryParameter = sellMainCategory.HasValue ?
                new ObjectParameter("sellMainCategory", sellMainCategory) :
                new ObjectParameter("sellMainCategory", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("sellPrice", sellPrice) :
                new ObjectParameter("sellPrice", typeof(long));
    
            var sellCountParameter = sellCount.HasValue ?
                new ObjectParameter("sellCount", sellCount) :
                new ObjectParameter("sellCount", typeof(long));
    
            var sellChooseKeyParameter = sellChooseKey.HasValue ?
                new ObjectParameter("sellChooseKey", sellChooseKey) :
                new ObjectParameter("sellChooseKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var needMetarialCountParameter = needMetarialCount.HasValue ?
                new ObjectParameter("needMetarialCount", needMetarialCount) :
                new ObjectParameter("needMetarialCount", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("BiddingRate", biddingRate) :
                new ObjectParameter("BiddingRate", typeof(double));
    
            var isNoticeItemParameter = isNoticeItem.HasValue ?
                new ObjectParameter("isNoticeItem", isNoticeItem) :
                new ObjectParameter("isNoticeItem", typeof(bool));
    
            var weightPerOneParameter = weightPerOne.HasValue ?
                new ObjectParameter("weightPerOne", weightPerOne) :
                new ObjectParameter("weightPerOne", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            var maxPearlItemLimitedCountParameter = maxPearlItemLimitedCount.HasValue ?
                new ObjectParameter("maxPearlItemLimitedCount", maxPearlItemLimitedCount) :
                new ObjectParameter("maxPearlItemLimitedCount", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            var applyRingBuffTypeParameter = applyRingBuffType.HasValue ?
                new ObjectParameter("applyRingBuffType", applyRingBuffType) :
                new ObjectParameter("applyRingBuffType", typeof(byte));
    
            var waitNoParameter = waitNo.HasValue ?
                new ObjectParameter("waitNo", waitNo) :
                new ObjectParameter("waitNo", typeof(long));
    
            var isRingBuffParameter = isRingBuff.HasValue ?
                new ObjectParameter("isRingBuff", isRingBuff) :
                new ObjectParameter("isRingBuff", typeof(bool));
    
            var retryBiddingNoParameter = retryBiddingNo.HasValue ?
                new ObjectParameter("retryBiddingNo", retryBiddingNo) :
                new ObjectParameter("retryBiddingNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSellBiddingToWorldMarket", nationCodeParameter, serverNoParameter, userNoParameter, sellKeyTypeParameter, sellMainKeyParameter, sellSubKeyParameter, sellMainCategoryParameter, isSealedParameter, sellPriceParameter, sellCountParameter, sellChooseKeyParameter, metarialMainKeyParameter, needMetarialCountParameter, biddingRateParameter, isNoticeItemParameter, weightPerOneParameter, maxWeightParameter, maxPearlItemLimitedCountParameter, currentTimeParameter, applyRingBuffTypeParameter, waitNoParameter, isRingBuffParameter, retryBiddingNoParameter, walletMoney, realSellCount, totalMoneyCount, originalTotalMoneyCount, packageExpiration, buyNo, buyUserNo, buyUserId, buyLeftCount, stopType, isNextApplyRingBuff, resultWaitNo, raceCount, beforeCount1, afterCount1, beforeCount2, afterCount2, beforeCount3, afterCount3, beforeCount4, afterCount4, soldCount, leftCount, moneyCount, calculateMoney, isCalculateRingBuff, symNo, rv);
        }
    
        public virtual int uspSellToWorldMarket(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> sellKeyType, Nullable<int> sellMainKey, Nullable<int> sellSubKey, Nullable<int> sellMainCategory, Nullable<bool> isSealed, Nullable<long> sellPrice, Nullable<long> sellCount, Nullable<int> sellChooseKey, Nullable<int> metarialMainKey, Nullable<long> needMetarialCount, Nullable<double> biddingRate, Nullable<bool> isNoticeItem, Nullable<long> weightPerOne, Nullable<long> maxPearlItemLimitedCount, Nullable<System.DateTime> currentTime, Nullable<byte> applyRingBuffType, Nullable<long> waitNo, ObjectParameter sellPricePerOne, ObjectParameter realSellCount, ObjectParameter totalMoneyCount, ObjectParameter originalTotalMoneyCount, ObjectParameter packageExpiration, ObjectParameter sellNo, ObjectParameter isAppledRingBuff, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter beforeCount2, ObjectParameter afterCount2, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var sellKeyTypeParameter = sellKeyType.HasValue ?
                new ObjectParameter("sellKeyType", sellKeyType) :
                new ObjectParameter("sellKeyType", typeof(int));
    
            var sellMainKeyParameter = sellMainKey.HasValue ?
                new ObjectParameter("sellMainKey", sellMainKey) :
                new ObjectParameter("sellMainKey", typeof(int));
    
            var sellSubKeyParameter = sellSubKey.HasValue ?
                new ObjectParameter("sellSubKey", sellSubKey) :
                new ObjectParameter("sellSubKey", typeof(int));
    
            var sellMainCategoryParameter = sellMainCategory.HasValue ?
                new ObjectParameter("sellMainCategory", sellMainCategory) :
                new ObjectParameter("sellMainCategory", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("sellPrice", sellPrice) :
                new ObjectParameter("sellPrice", typeof(long));
    
            var sellCountParameter = sellCount.HasValue ?
                new ObjectParameter("sellCount", sellCount) :
                new ObjectParameter("sellCount", typeof(long));
    
            var sellChooseKeyParameter = sellChooseKey.HasValue ?
                new ObjectParameter("sellChooseKey", sellChooseKey) :
                new ObjectParameter("sellChooseKey", typeof(int));
    
            var metarialMainKeyParameter = metarialMainKey.HasValue ?
                new ObjectParameter("metarialMainKey", metarialMainKey) :
                new ObjectParameter("metarialMainKey", typeof(int));
    
            var needMetarialCountParameter = needMetarialCount.HasValue ?
                new ObjectParameter("needMetarialCount", needMetarialCount) :
                new ObjectParameter("needMetarialCount", typeof(long));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("BiddingRate", biddingRate) :
                new ObjectParameter("BiddingRate", typeof(double));
    
            var isNoticeItemParameter = isNoticeItem.HasValue ?
                new ObjectParameter("isNoticeItem", isNoticeItem) :
                new ObjectParameter("isNoticeItem", typeof(bool));
    
            var weightPerOneParameter = weightPerOne.HasValue ?
                new ObjectParameter("weightPerOne", weightPerOne) :
                new ObjectParameter("weightPerOne", typeof(long));
    
            var maxPearlItemLimitedCountParameter = maxPearlItemLimitedCount.HasValue ?
                new ObjectParameter("maxPearlItemLimitedCount", maxPearlItemLimitedCount) :
                new ObjectParameter("maxPearlItemLimitedCount", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            var applyRingBuffTypeParameter = applyRingBuffType.HasValue ?
                new ObjectParameter("applyRingBuffType", applyRingBuffType) :
                new ObjectParameter("applyRingBuffType", typeof(byte));
    
            var waitNoParameter = waitNo.HasValue ?
                new ObjectParameter("waitNo", waitNo) :
                new ObjectParameter("waitNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSellToWorldMarket", nationCodeParameter, serverNoParameter, userNoParameter, sellKeyTypeParameter, sellMainKeyParameter, sellSubKeyParameter, sellMainCategoryParameter, isSealedParameter, sellPriceParameter, sellCountParameter, sellChooseKeyParameter, metarialMainKeyParameter, needMetarialCountParameter, biddingRateParameter, isNoticeItemParameter, weightPerOneParameter, maxPearlItemLimitedCountParameter, currentTimeParameter, applyRingBuffTypeParameter, waitNoParameter, sellPricePerOne, realSellCount, totalMoneyCount, originalTotalMoneyCount, packageExpiration, sellNo, isAppledRingBuff, beforeCount1, afterCount1, beforeCount2, afterCount2, symNo, rv);
        }
    
        public virtual int uspSetAppPushEnable(Nullable<bool> enablePushSend, ObjectParameter resultCode)
        {
            var enablePushSendParameter = enablePushSend.HasValue ?
                new ObjectParameter("enablePushSend", enablePushSend) :
                new ObjectParameter("enablePushSend", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetAppPushEnable", enablePushSendParameter, resultCode);
        }
    
        public virtual int uspSetContentsInsUseWeb(Nullable<int> groupContentNo, Nullable<System.DateTime> contentStartDate, Nullable<System.DateTime> contentEndDate, Nullable<byte> isDisplay, Nullable<byte> isDelete, ObjectParameter resultCode)
        {
            var groupContentNoParameter = groupContentNo.HasValue ?
                new ObjectParameter("groupContentNo", groupContentNo) :
                new ObjectParameter("groupContentNo", typeof(int));
    
            var contentStartDateParameter = contentStartDate.HasValue ?
                new ObjectParameter("contentStartDate", contentStartDate) :
                new ObjectParameter("contentStartDate", typeof(System.DateTime));
    
            var contentEndDateParameter = contentEndDate.HasValue ?
                new ObjectParameter("contentEndDate", contentEndDate) :
                new ObjectParameter("contentEndDate", typeof(System.DateTime));
    
            var isDisplayParameter = isDisplay.HasValue ?
                new ObjectParameter("isDisplay", isDisplay) :
                new ObjectParameter("isDisplay", typeof(byte));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("isDelete", isDelete) :
                new ObjectParameter("isDelete", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetContentsInsUseWeb", groupContentNoParameter, contentStartDateParameter, contentEndDateParameter, isDisplayParameter, isDeleteParameter, resultCode);
        }
    
        public virtual int uspSetContentsUpdUseWeb(Nullable<int> groupContentNo, Nullable<System.DateTime> contentStartDate, Nullable<System.DateTime> contentEndDate, Nullable<byte> isDisplay, Nullable<byte> isDelete, ObjectParameter resultCode)
        {
            var groupContentNoParameter = groupContentNo.HasValue ?
                new ObjectParameter("groupContentNo", groupContentNo) :
                new ObjectParameter("groupContentNo", typeof(int));
    
            var contentStartDateParameter = contentStartDate.HasValue ?
                new ObjectParameter("contentStartDate", contentStartDate) :
                new ObjectParameter("contentStartDate", typeof(System.DateTime));
    
            var contentEndDateParameter = contentEndDate.HasValue ?
                new ObjectParameter("contentEndDate", contentEndDate) :
                new ObjectParameter("contentEndDate", typeof(System.DateTime));
    
            var isDisplayParameter = isDisplay.HasValue ?
                new ObjectParameter("isDisplay", isDisplay) :
                new ObjectParameter("isDisplay", typeof(byte));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("isDelete", isDelete) :
                new ObjectParameter("isDelete", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetContentsUpdUseWeb", groupContentNoParameter, contentStartDateParameter, contentEndDateParameter, isDisplayParameter, isDeleteParameter, resultCode);
        }
    
        public virtual int uspSetLastOtpTime(Nullable<long> userNo, Nullable<int> worldNo, Nullable<int> nationCode, ObjectParameter resultCode)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetLastOtpTime", userNoParameter, worldNoParameter, nationCodeParameter, resultCode);
        }
    
        public virtual int uspSetLogWriteEnable(Nullable<bool> writeDebugLog, Nullable<bool> writeInfoLog, Nullable<bool> writeWarringLog, Nullable<bool> writeErrorLog, Nullable<bool> writeFatalLog, ObjectParameter resultCode)
        {
            var writeDebugLogParameter = writeDebugLog.HasValue ?
                new ObjectParameter("writeDebugLog", writeDebugLog) :
                new ObjectParameter("writeDebugLog", typeof(bool));
    
            var writeInfoLogParameter = writeInfoLog.HasValue ?
                new ObjectParameter("writeInfoLog", writeInfoLog) :
                new ObjectParameter("writeInfoLog", typeof(bool));
    
            var writeWarringLogParameter = writeWarringLog.HasValue ?
                new ObjectParameter("writeWarringLog", writeWarringLog) :
                new ObjectParameter("writeWarringLog", typeof(bool));
    
            var writeErrorLogParameter = writeErrorLog.HasValue ?
                new ObjectParameter("writeErrorLog", writeErrorLog) :
                new ObjectParameter("writeErrorLog", typeof(bool));
    
            var writeFatalLogParameter = writeFatalLog.HasValue ?
                new ObjectParameter("writeFatalLog", writeFatalLog) :
                new ObjectParameter("writeFatalLog", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetLogWriteEnable", writeDebugLogParameter, writeInfoLogParameter, writeWarringLogParameter, writeErrorLogParameter, writeFatalLogParameter, resultCode);
        }
    
        public virtual int uspSetMaxPrice(Nullable<int> keyType, Nullable<int> mainKey, Nullable<long> subKey, Nullable<bool> isMax, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(long));
    
            var isMaxParameter = isMax.HasValue ?
                new ObjectParameter("isMax", isMax) :
                new ObjectParameter("isMax", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetMaxPrice", keyTypeParameter, mainKeyParameter, subKeyParameter, isMaxParameter, symNo, rv);
        }
    
        public virtual int uspSetShutDownInfoInsUseWeb(Nullable<int> groupContentsNo, string cultureCode, string mainMessage, string subMessage, string redirectUrl, string memo, ObjectParameter resultCode)
        {
            var groupContentsNoParameter = groupContentsNo.HasValue ?
                new ObjectParameter("groupContentsNo", groupContentsNo) :
                new ObjectParameter("groupContentsNo", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("cultureCode", cultureCode) :
                new ObjectParameter("cultureCode", typeof(string));
    
            var mainMessageParameter = mainMessage != null ?
                new ObjectParameter("mainMessage", mainMessage) :
                new ObjectParameter("mainMessage", typeof(string));
    
            var subMessageParameter = subMessage != null ?
                new ObjectParameter("subMessage", subMessage) :
                new ObjectParameter("subMessage", typeof(string));
    
            var redirectUrlParameter = redirectUrl != null ?
                new ObjectParameter("redirectUrl", redirectUrl) :
                new ObjectParameter("redirectUrl", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetShutDownInfoInsUseWeb", groupContentsNoParameter, cultureCodeParameter, mainMessageParameter, subMessageParameter, redirectUrlParameter, memoParameter, resultCode);
        }
    
        public virtual int uspSetShutDownInfoUpdUseWeb(Nullable<int> groupContentsNo, string cultureCode, string mainMessage, string subMessage, string redirectUrl, string memo, ObjectParameter resultCode)
        {
            var groupContentsNoParameter = groupContentsNo.HasValue ?
                new ObjectParameter("groupContentsNo", groupContentsNo) :
                new ObjectParameter("groupContentsNo", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("cultureCode", cultureCode) :
                new ObjectParameter("cultureCode", typeof(string));
    
            var mainMessageParameter = mainMessage != null ?
                new ObjectParameter("mainMessage", mainMessage) :
                new ObjectParameter("mainMessage", typeof(string));
    
            var subMessageParameter = subMessage != null ?
                new ObjectParameter("subMessage", subMessage) :
                new ObjectParameter("subMessage", typeof(string));
    
            var redirectUrlParameter = redirectUrl != null ?
                new ObjectParameter("redirectUrl", redirectUrl) :
                new ObjectParameter("redirectUrl", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetShutDownInfoUpdUseWeb", groupContentsNoParameter, cultureCodeParameter, mainMessageParameter, subMessageParameter, redirectUrlParameter, memoParameter, resultCode);
        }
    
        public virtual int uspSetUpdateTickCount(Nullable<int> mainGroupNo, Nullable<int> updateTickCount, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainGroupNoParameter = mainGroupNo.HasValue ?
                new ObjectParameter("mainGroupNo", mainGroupNo) :
                new ObjectParameter("mainGroupNo", typeof(int));
    
            var updateTickCountParameter = updateTickCount.HasValue ?
                new ObjectParameter("updateTickCount", updateTickCount) :
                new ObjectParameter("updateTickCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetUpdateTickCount", mainGroupNoParameter, updateTickCountParameter, symNo, rv);
        }
    
        public virtual int uspSetUserId_XXX(Nullable<long> userNo, Nullable<long> accountNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetUserId_XXX", userNoParameter, accountNoParameter);
        }
    
        public virtual int uspUpdateItemInfo(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<int> mainGroupNo, Nullable<int> subGroupNo, Nullable<long> baseCount, Nullable<long> minCount, Nullable<long> maxCount, Nullable<long> basePrice, Nullable<long> maxPrice, Nullable<long> minPrice, Nullable<long> realMaxPrice, Nullable<long> realMinPrice, Nullable<long> marketPriceGroupKey, Nullable<bool> isDisplay, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var mainGroupNoParameter = mainGroupNo.HasValue ?
                new ObjectParameter("mainGroupNo", mainGroupNo) :
                new ObjectParameter("mainGroupNo", typeof(int));
    
            var subGroupNoParameter = subGroupNo.HasValue ?
                new ObjectParameter("subGroupNo", subGroupNo) :
                new ObjectParameter("subGroupNo", typeof(int));
    
            var baseCountParameter = baseCount.HasValue ?
                new ObjectParameter("baseCount", baseCount) :
                new ObjectParameter("baseCount", typeof(long));
    
            var minCountParameter = minCount.HasValue ?
                new ObjectParameter("minCount", minCount) :
                new ObjectParameter("minCount", typeof(long));
    
            var maxCountParameter = maxCount.HasValue ?
                new ObjectParameter("maxCount", maxCount) :
                new ObjectParameter("maxCount", typeof(long));
    
            var basePriceParameter = basePrice.HasValue ?
                new ObjectParameter("basePrice", basePrice) :
                new ObjectParameter("basePrice", typeof(long));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("maxPrice", maxPrice) :
                new ObjectParameter("maxPrice", typeof(long));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("minPrice", minPrice) :
                new ObjectParameter("minPrice", typeof(long));
    
            var realMaxPriceParameter = realMaxPrice.HasValue ?
                new ObjectParameter("realMaxPrice", realMaxPrice) :
                new ObjectParameter("realMaxPrice", typeof(long));
    
            var realMinPriceParameter = realMinPrice.HasValue ?
                new ObjectParameter("realMinPrice", realMinPrice) :
                new ObjectParameter("realMinPrice", typeof(long));
    
            var marketPriceGroupKeyParameter = marketPriceGroupKey.HasValue ?
                new ObjectParameter("marketPriceGroupKey", marketPriceGroupKey) :
                new ObjectParameter("marketPriceGroupKey", typeof(long));
    
            var isDisplayParameter = isDisplay.HasValue ?
                new ObjectParameter("isDisplay", isDisplay) :
                new ObjectParameter("isDisplay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateItemInfo", keyTypeParameter, mainKeyParameter, subKeyParameter, mainGroupNoParameter, subGroupNoParameter, baseCountParameter, minCountParameter, maxCountParameter, basePriceParameter, maxPriceParameter, minPriceParameter, realMaxPriceParameter, realMinPriceParameter, marketPriceGroupKeyParameter, isDisplayParameter, symNo, rv);
        }
    
        public virtual int uspUpdateMarketState(Nullable<bool> isOpen, ObjectParameter symNo, ObjectParameter rv)
        {
            var isOpenParameter = isOpen.HasValue ?
                new ObjectParameter("isOpen", isOpen) :
                new ObjectParameter("isOpen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMarketState", isOpenParameter, symNo, rv);
        }
    
        public virtual int uspUpdateMyWalletWeight(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> calculateWeight, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var calculateWeightParameter = calculateWeight.HasValue ?
                new ObjectParameter("calculateWeight", calculateWeight) :
                new ObjectParameter("calculateWeight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMyWalletWeight", nationCodeParameter, serverNoParameter, userNoParameter, calculateWeightParameter, symNo, rv);
        }
    
        public virtual int uspUpdatePearlItemLimitedCount__XXX(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> count, Nullable<long> maxCount, Nullable<bool> countingType, Nullable<System.DateTime> currentTime, ObjectParameter symNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var maxCountParameter = maxCount.HasValue ?
                new ObjectParameter("maxCount", maxCount) :
                new ObjectParameter("maxCount", typeof(long));
    
            var countingTypeParameter = countingType.HasValue ?
                new ObjectParameter("countingType", countingType) :
                new ObjectParameter("countingType", typeof(bool));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePearlItemLimitedCount__XXX", nationCodeParameter, serverNoParameter, userNoParameter, countParameter, maxCountParameter, countingTypeParameter, currentTimeParameter, symNo);
        }
    
        public virtual int uspUpdateRingBuffRate(Nullable<int> ringRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var ringRateParameter = ringRate.HasValue ?
                new ObjectParameter("ringRate", ringRate) :
                new ObjectParameter("ringRate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateRingBuffRate", ringRateParameter, symNo, rv);
        }
    
        public virtual int uspUpdateWaitFail(Nullable<long> waitNo, Nullable<long> pushWeight, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var waitNoParameter = waitNo.HasValue ?
                new ObjectParameter("waitNo", waitNo) :
                new ObjectParameter("waitNo", typeof(long));
    
            var pushWeightParameter = pushWeight.HasValue ?
                new ObjectParameter("pushWeight", pushWeight) :
                new ObjectParameter("pushWeight", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWaitFail", waitNoParameter, pushWeightParameter, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspUpdateWorldMarketGroupPrice(Nullable<long> priceGroupKey, Nullable<long> newPrice, Nullable<long> newGraphPrice, Nullable<byte> fluctuationType, Nullable<long> fluctuationPrice, ObjectParameter symNo, ObjectParameter rv)
        {
            var priceGroupKeyParameter = priceGroupKey.HasValue ?
                new ObjectParameter("priceGroupKey", priceGroupKey) :
                new ObjectParameter("priceGroupKey", typeof(long));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("newPrice", newPrice) :
                new ObjectParameter("newPrice", typeof(long));
    
            var newGraphPriceParameter = newGraphPrice.HasValue ?
                new ObjectParameter("newGraphPrice", newGraphPrice) :
                new ObjectParameter("newGraphPrice", typeof(long));
    
            var fluctuationTypeParameter = fluctuationType.HasValue ?
                new ObjectParameter("fluctuationType", fluctuationType) :
                new ObjectParameter("fluctuationType", typeof(byte));
    
            var fluctuationPriceParameter = fluctuationPrice.HasValue ?
                new ObjectParameter("fluctuationPrice", fluctuationPrice) :
                new ObjectParameter("fluctuationPrice", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWorldMarketGroupPrice", priceGroupKeyParameter, newPriceParameter, newGraphPriceParameter, fluctuationTypeParameter, fluctuationPriceParameter, symNo, rv);
        }
    
        public virtual int uspUpdateWorldMarketPassCount(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<double> biddingRate, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var biddingRateParameter = biddingRate.HasValue ?
                new ObjectParameter("biddingRate", biddingRate) :
                new ObjectParameter("biddingRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWorldMarketPassCount", keyTypeParameter, mainKeyParameter, subKeyParameter, biddingRateParameter, symNo, rv);
        }
    
        public virtual int uspUpdateWorldMarketPrice(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> newPrice, Nullable<long> newGraphPrice, Nullable<byte> fluctuationType, Nullable<long> fluctuationPrice, Nullable<long> newStockCount, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("newPrice", newPrice) :
                new ObjectParameter("newPrice", typeof(long));
    
            var newGraphPriceParameter = newGraphPrice.HasValue ?
                new ObjectParameter("newGraphPrice", newGraphPrice) :
                new ObjectParameter("newGraphPrice", typeof(long));
    
            var fluctuationTypeParameter = fluctuationType.HasValue ?
                new ObjectParameter("fluctuationType", fluctuationType) :
                new ObjectParameter("fluctuationType", typeof(byte));
    
            var fluctuationPriceParameter = fluctuationPrice.HasValue ?
                new ObjectParameter("fluctuationPrice", fluctuationPrice) :
                new ObjectParameter("fluctuationPrice", typeof(long));
    
            var newStockCountParameter = newStockCount.HasValue ?
                new ObjectParameter("newStockCount", newStockCount) :
                new ObjectParameter("newStockCount", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWorldMarketPrice", keyTypeParameter, mainKeyParameter, subKeyParameter, newPriceParameter, newGraphPriceParameter, fluctuationTypeParameter, fluctuationPriceParameter, newStockCountParameter, symNo, rv);
        }
    
        public virtual int uspUpdateWorldMarketStock(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> newStockCount, ObjectParameter symNo, ObjectParameter rv)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var newStockCountParameter = newStockCount.HasValue ?
                new ObjectParameter("newStockCount", newStockCount) :
                new ObjectParameter("newStockCount", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWorldMarketStock", keyTypeParameter, mainKeyParameter, subKeyParameter, newStockCountParameter, symNo, rv);
        }
    
        public virtual int uspVariedTradeCount_XXX(Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> variedCount, Nullable<long> variedPrice, Nullable<bool> isBidding, ObjectParameter symNo)
        {
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var variedCountParameter = variedCount.HasValue ?
                new ObjectParameter("variedCount", variedCount) :
                new ObjectParameter("variedCount", typeof(long));
    
            var variedPriceParameter = variedPrice.HasValue ?
                new ObjectParameter("variedPrice", variedPrice) :
                new ObjectParameter("variedPrice", typeof(long));
    
            var isBiddingParameter = isBidding.HasValue ?
                new ObjectParameter("isBidding", isBidding) :
                new ObjectParameter("isBidding", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVariedTradeCount_XXX", keyTypeParameter, mainKeyParameter, subKeyParameter, variedCountParameter, variedPriceParameter, isBiddingParameter, symNo);
        }
    
        public virtual int uspWithdrawBiddingBuy(Nullable<long> buyNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> count, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> chooseSubKey, ObjectParameter differenceMoney, ObjectParameter withdrawMoneyCount, ObjectParameter isDelete, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var buyNoParameter = buyNo.HasValue ?
                new ObjectParameter("buyNo", buyNo) :
                new ObjectParameter("buyNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var chooseSubKeyParameter = chooseSubKey.HasValue ?
                new ObjectParameter("chooseSubKey", chooseSubKey) :
                new ObjectParameter("chooseSubKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWithdrawBiddingBuy", buyNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, countParameter, nationCodeParameter, serverNoParameter, userNoParameter, chooseSubKeyParameter, differenceMoney, withdrawMoneyCount, isDelete, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspWithdrawBiddingSell(Nullable<long> sellNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> count, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<long> weightPerOne, Nullable<long> maxWeight, Nullable<long> maxPearlItemLimitedCount, Nullable<System.DateTime> currentTime, ObjectParameter chooseSubKey, ObjectParameter isDelete, ObjectParameter beforeCount1, ObjectParameter afterCount1, ObjectParameter symNo, ObjectParameter rv)
        {
            var sellNoParameter = sellNo.HasValue ?
                new ObjectParameter("sellNo", sellNo) :
                new ObjectParameter("sellNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var weightPerOneParameter = weightPerOne.HasValue ?
                new ObjectParameter("weightPerOne", weightPerOne) :
                new ObjectParameter("weightPerOne", typeof(long));
    
            var maxWeightParameter = maxWeight.HasValue ?
                new ObjectParameter("maxWeight", maxWeight) :
                new ObjectParameter("maxWeight", typeof(long));
    
            var maxPearlItemLimitedCountParameter = maxPearlItemLimitedCount.HasValue ?
                new ObjectParameter("maxPearlItemLimitedCount", maxPearlItemLimitedCount) :
                new ObjectParameter("maxPearlItemLimitedCount", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWithdrawBiddingSell", sellNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, countParameter, nationCodeParameter, serverNoParameter, userNoParameter, weightPerOneParameter, maxWeightParameter, maxPearlItemLimitedCountParameter, currentTimeParameter, chooseSubKey, isDelete, beforeCount1, afterCount1, symNo, rv);
        }
    
        public virtual int uspWorldMarketDetailOne(Nullable<int> mainKey, Nullable<int> subKey, ObjectParameter pricePerOne, ObjectParameter count, ObjectParameter minPrice, ObjectParameter maxPrice, ObjectParameter totalTradeCount, ObjectParameter lastTradePrice, ObjectParameter lastTradeTime, ObjectParameter symNo, ObjectParameter rv)
        {
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWorldMarketDetailOne", mainKeyParameter, subKeyParameter, pricePerOne, count, minPrice, maxPrice, totalTradeCount, lastTradePrice, lastTradeTime, symNo, rv);
        }
    
        public virtual int uspWorldMarketMyWallet(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, ObjectParameter count, ObjectParameter symNo, ObjectParameter rv)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));
    
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));
    
            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWorldMarketMyWallet", nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, count, symNo, rv);
        }
    
        public virtual ObjectResult<uspWorldMarketWaitNoticeList_Result> uspWorldMarketWaitNoticeList(Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo)
        {
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspWorldMarketWaitNoticeList_Result>("uspWorldMarketWaitNoticeList", nationCodeParameter, serverNoParameter, userNoParameter);
        }
    
        public virtual int uspDeleteWorldMarketWallet(Nullable<long> userNo, Nullable<int> itemKey, Nullable<int> enchantLevel, Nullable<bool> isSealed, Nullable<long> currentcount, Nullable<long> minuscount, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var enchantLevelParameter = enchantLevel.HasValue ?
                new ObjectParameter("enchantLevel", enchantLevel) :
                new ObjectParameter("enchantLevel", typeof(int));
    
            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));
    
            var currentcountParameter = currentcount.HasValue ?
                new ObjectParameter("currentcount", currentcount) :
                new ObjectParameter("currentcount", typeof(long));
    
            var minuscountParameter = minuscount.HasValue ?
                new ObjectParameter("minuscount", minuscount) :
                new ObjectParameter("minuscount", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteWorldMarketWallet", userNoParameter, itemKeyParameter, enchantLevelParameter, isSealedParameter, currentcountParameter, minuscountParameter, symNo);
        }
    
        public virtual ObjectResult<uspGetBiddingBuy_Result> uspGetBiddingBuy(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBiddingBuy_Result>("uspGetBiddingBuy", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetBiddingSell_Result> uspGetBiddingSell(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBiddingSell_Result>("uspGetBiddingSell", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetMinusLoanDetailData_Result> uspGetMinusLoanDetailData(Nullable<long> idx)
        {
            var idxParameter = idx.HasValue ?
                new ObjectParameter("idx", idx) :
                new ObjectParameter("idx", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMinusLoanDetailData_Result>("uspGetMinusLoanDetailData", idxParameter);
        }
    
        public virtual ObjectResult<uspGetMinusLoanInsertData_Result> uspGetMinusLoanInsertData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMinusLoanInsertData_Result>("uspGetMinusLoanInsertData");
        }
    
        public virtual ObjectResult<uspGetMinusLoanResultData_Result> uspGetMinusLoanResultData(Nullable<long> idx)
        {
            var idxParameter = idx.HasValue ?
                new ObjectParameter("idx", idx) :
                new ObjectParameter("idx", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMinusLoanResultData_Result>("uspGetMinusLoanResultData", idxParameter);
        }
    
        public virtual ObjectResult<uspGetWorldMarketWallet_Result> uspGetWorldMarketWallet(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorldMarketWallet_Result>("uspGetWorldMarketWallet", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetWorldMarketWalletInfo_Result> uspGetWorldMarketWalletInfo(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorldMarketWalletInfo_Result>("uspGetWorldMarketWalletInfo", userNoParameter);
        }
    
        public virtual ObjectResult<uspListMarketServerNoNationCode_Result> uspListMarketServerNoNationCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListMarketServerNoNationCode_Result>("uspListMarketServerNoNationCode");
        }
    
        public virtual int uspSetApplyMinusMoney(Nullable<long> idx)
        {
            var idxParameter = idx.HasValue ?
                new ObjectParameter("idx", idx) :
                new ObjectParameter("idx", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetApplyMinusMoney", idxParameter);
        }
    
        public virtual int uspSetMinusLoanIndex(Nullable<long> count)
        {
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetMinusLoanIndex", countParameter);
        }
    
        public virtual int uspSetMinusLoanUserData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetMinusLoanUserData");
        }
    
        public virtual int uspTradeDeleteTargetItems(string tempTableName, ObjectParameter symNo)
        {
            var tempTableNameParameter = tempTableName != null ?
                new ObjectParameter("tempTableName", tempTableName) :
                new ObjectParameter("tempTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTradeDeleteTargetItems", tempTableNameParameter, symNo);
        }
    }
}
