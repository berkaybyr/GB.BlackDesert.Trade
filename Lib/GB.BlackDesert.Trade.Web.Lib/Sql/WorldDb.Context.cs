//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackDesert.TradeMarket.Lib.Sql
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SA_BETA_WORLDDB_0002 : DbContext
    {
        public SA_BETA_WORLDDB_0002()
            : base("name=SA_BETA_WORLDDB_0002")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("SA_BETA_WORLDDB_0002", "ufnParseEntitlementItemForRefund")]
        public virtual IQueryable<ufnParseEntitlementItemForRefund_Result> ufnParseEntitlementItemForRefund(string vchString, string vchDelimiter)
        {
            var vchStringParameter = vchString != null ?
                new ObjectParameter("vchString", vchString) :
                new ObjectParameter("vchString", typeof(string));
    
            var vchDelimiterParameter = vchDelimiter != null ?
                new ObjectParameter("vchDelimiter", vchDelimiter) :
                new ObjectParameter("vchDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnParseEntitlementItemForRefund_Result>("[SA_BETA_WORLDDB_0002].[ufnParseEntitlementItemForRefund](@vchString, @vchDelimiter)", vchStringParameter, vchDelimiterParameter);
        }
    
        [DbFunction("SA_BETA_WORLDDB_0002", "ufnParseEntitlementItemForUpdate")]
        public virtual IQueryable<ufnParseEntitlementItemForUpdate_Result> ufnParseEntitlementItemForUpdate(string vchString, string vchDelimiter)
        {
            var vchStringParameter = vchString != null ?
                new ObjectParameter("vchString", vchString) :
                new ObjectParameter("vchString", typeof(string));
    
            var vchDelimiterParameter = vchDelimiter != null ?
                new ObjectParameter("vchDelimiter", vchDelimiter) :
                new ObjectParameter("vchDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnParseEntitlementItemForUpdate_Result>("[SA_BETA_WORLDDB_0002].[ufnParseEntitlementItemForUpdate](@vchString, @vchDelimiter)", vchStringParameter, vchDelimiterParameter);
        }
    
        [DbFunction("SA_BETA_WORLDDB_0002", "ufnParseItemListByXboxCashInfo")]
        public virtual IQueryable<ufnParseItemListByXboxCashInfo_Result> ufnParseItemListByXboxCashInfo(string vchString, string vchDelimiter)
        {
            var vchStringParameter = vchString != null ?
                new ObjectParameter("vchString", vchString) :
                new ObjectParameter("vchString", typeof(string));
    
            var vchDelimiterParameter = vchDelimiter != null ?
                new ObjectParameter("vchDelimiter", vchDelimiter) :
                new ObjectParameter("vchDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnParseItemListByXboxCashInfo_Result>("[SA_BETA_WORLDDB_0002].[ufnParseItemListByXboxCashInfo](@vchString, @vchDelimiter)", vchStringParameter, vchDelimiterParameter);
        }
    
        [DbFunction("SA_BETA_WORLDDB_0002", "ufnParseServerInfoListByUpdateAdminTool")]
        public virtual IQueryable<ufnParseServerInfoListByUpdateAdminTool_Result> ufnParseServerInfoListByUpdateAdminTool(string vchString, string vchDelimiter)
        {
            var vchStringParameter = vchString != null ?
                new ObjectParameter("vchString", vchString) :
                new ObjectParameter("vchString", typeof(string));
    
            var vchDelimiterParameter = vchDelimiter != null ?
                new ObjectParameter("vchDelimiter", vchDelimiter) :
                new ObjectParameter("vchDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnParseServerInfoListByUpdateAdminTool_Result>("[SA_BETA_WORLDDB_0002].[ufnParseServerInfoListByUpdateAdminTool](@vchString, @vchDelimiter)", vchStringParameter, vchDelimiterParameter);
        }
    
        [DbFunction("SA_BETA_WORLDDB_0002", "ufnDateTimeInterval")]
        public virtual IQueryable<ufnDateTimeInterval_Result> ufnDateTimeInterval(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string dateTimePart, Nullable<int> incr)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var dateTimePartParameter = dateTimePart != null ?
                new ObjectParameter("dateTimePart", dateTimePart) :
                new ObjectParameter("dateTimePart", typeof(string));
    
            var incrParameter = incr.HasValue ?
                new ObjectParameter("incr", incr) :
                new ObjectParameter("incr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnDateTimeInterval_Result>("[SA_BETA_WORLDDB_0002].[ufnDateTimeInterval](@startDate, @endDate, @dateTimePart, @incr)", startDateParameter, endDateParameter, dateTimePartParameter, incrParameter);
        }
    
        [DbFunction("SA_BETA_WORLDDB_0002", "ufnSplitWord")]
        public virtual IQueryable<ufnSplitWord_Result> ufnSplitWord(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnSplitWord_Result>("[SA_BETA_WORLDDB_0002].[ufnSplitWord](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int FamCharExecNameChange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FamCharExecNameChange");
        }
    
        public virtual int lin_Reindex()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("lin_Reindex");
        }
    
        public virtual int usp_bd_jewel_chg_item_gameon(Nullable<int> usn, string charname, Nullable<long> use_point, Nullable<int> itemno, string itemname, Nullable<long> itemcount, Nullable<short> world, string ip_adress, Nullable<byte> present_flag, Nullable<int> receiver_usn, Nullable<long> receiver_charid, string receiver_charname, ObjectParameter total, ObjectParameter jewel, ObjectParameter sp, ObjectParameter result, ObjectParameter point_seq)
        {
            var usnParameter = usn.HasValue ?
                new ObjectParameter("usn", usn) :
                new ObjectParameter("usn", typeof(int));
    
            var charnameParameter = charname != null ?
                new ObjectParameter("charname", charname) :
                new ObjectParameter("charname", typeof(string));
    
            var use_pointParameter = use_point.HasValue ?
                new ObjectParameter("use_point", use_point) :
                new ObjectParameter("use_point", typeof(long));
    
            var itemnoParameter = itemno.HasValue ?
                new ObjectParameter("itemno", itemno) :
                new ObjectParameter("itemno", typeof(int));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var itemcountParameter = itemcount.HasValue ?
                new ObjectParameter("itemcount", itemcount) :
                new ObjectParameter("itemcount", typeof(long));
    
            var worldParameter = world.HasValue ?
                new ObjectParameter("world", world) :
                new ObjectParameter("world", typeof(short));
    
            var ip_adressParameter = ip_adress != null ?
                new ObjectParameter("ip_adress", ip_adress) :
                new ObjectParameter("ip_adress", typeof(string));
    
            var present_flagParameter = present_flag.HasValue ?
                new ObjectParameter("present_flag", present_flag) :
                new ObjectParameter("present_flag", typeof(byte));
    
            var receiver_usnParameter = receiver_usn.HasValue ?
                new ObjectParameter("receiver_usn", receiver_usn) :
                new ObjectParameter("receiver_usn", typeof(int));
    
            var receiver_charidParameter = receiver_charid.HasValue ?
                new ObjectParameter("receiver_charid", receiver_charid) :
                new ObjectParameter("receiver_charid", typeof(long));
    
            var receiver_charnameParameter = receiver_charname != null ?
                new ObjectParameter("receiver_charname", receiver_charname) :
                new ObjectParameter("receiver_charname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_bd_jewel_chg_item_gameon", usnParameter, charnameParameter, use_pointParameter, itemnoParameter, itemnameParameter, itemcountParameter, worldParameter, ip_adressParameter, present_flagParameter, receiver_usnParameter, receiver_charidParameter, receiver_charnameParameter, total, jewel, sp, result, point_seq);
        }
    
        public virtual int usp_bd_jewel_chk_gameon(Nullable<int> usn, ObjectParameter total, ObjectParameter jewel, ObjectParameter servicePoint)
        {
            var usnParameter = usn.HasValue ?
                new ObjectParameter("usn", usn) :
                new ObjectParameter("usn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_bd_jewel_chk_gameon", usnParameter, total, jewel, servicePoint);
        }
    
        public virtual int usp_bd_nc_user_login(Nullable<int> usn, string ip, ObjectParameter result, ObjectParameter pcr_id_result)
        {
            var usnParameter = usn.HasValue ?
                new ObjectParameter("usn", usn) :
                new ObjectParameter("usn", typeof(int));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_bd_nc_user_login", usnParameter, ipParameter, result, pcr_id_result);
        }
    
        public virtual int usp_bd_nc_user_logout(string ip, Nullable<int> usn, ObjectParameter result)
        {
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var usnParameter = usn.HasValue ?
                new ObjectParameter("usn", usn) :
                new ObjectParameter("usn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_bd_nc_user_logout", ipParameter, usnParameter, result);
        }
    
        public virtual int uspDropConstraintCheck(string tbl, string col)
        {
            var tblParameter = tbl != null ?
                new ObjectParameter("tbl", tbl) :
                new ObjectParameter("tbl", typeof(string));
    
            var colParameter = col != null ?
                new ObjectParameter("col", col) :
                new ObjectParameter("col", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropConstraintCheck", tblParameter, colParameter);
        }
    
        public virtual int uspDropConstraintDefault(string tbl, string col)
        {
            var tblParameter = tbl != null ?
                new ObjectParameter("tbl", tbl) :
                new ObjectParameter("tbl", typeof(string));
    
            var colParameter = col != null ?
                new ObjectParameter("col", col) :
                new ObjectParameter("col", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropConstraintDefault", tblParameter, colParameter);
        }
    
        public virtual int uspDropConstraintPK(string tbl)
        {
            var tblParameter = tbl != null ?
                new ObjectParameter("tbl", tbl) :
                new ObjectParameter("tbl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropConstraintPK", tblParameter);
        }
    
        public virtual int uspMacAddressLockCheck(Nullable<long> userNo, string macAddress)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMacAddressLockCheck", userNoParameter, macAddressParameter);
        }
    
        public virtual int uspSaveUserMac(string userId, Nullable<long> userNo, string userNickname, string macAddress, Nullable<bool> isHijackLogin, string cpuBrandString, string graphicsAdapterBrandString, string ip)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var isHijackLoginParameter = isHijackLogin.HasValue ?
                new ObjectParameter("isHijackLogin", isHijackLogin) :
                new ObjectParameter("isHijackLogin", typeof(bool));
    
            var cpuBrandStringParameter = cpuBrandString != null ?
                new ObjectParameter("cpuBrandString", cpuBrandString) :
                new ObjectParameter("cpuBrandString", typeof(string));
    
            var graphicsAdapterBrandStringParameter = graphicsAdapterBrandString != null ?
                new ObjectParameter("graphicsAdapterBrandString", graphicsAdapterBrandString) :
                new ObjectParameter("graphicsAdapterBrandString", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveUserMac", userIdParameter, userNoParameter, userNicknameParameter, macAddressParameter, isHijackLoginParameter, cpuBrandStringParameter, graphicsAdapterBrandStringParameter, ipParameter);
        }
    
        public virtual int uspShrinkDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspShrinkDatabase");
        }
    
        public virtual int uspAccumulateUserPlayTime(Nullable<long> userNo, Nullable<long> playTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var playTimeParameter = playTime.HasValue ?
                new ObjectParameter("playTime", playTime) :
                new ObjectParameter("playTime", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccumulateUserPlayTime", userNoParameter, playTimeParameter, symNo);
        }
    
        public virtual ObjectResult<uspAuthenticateOrCreateUser_Result> uspAuthenticateOrCreateUser(string userId, string password, string ip, Nullable<int> oldAuthenticKey, Nullable<int> newAuthenticKey, Nullable<int> authenticPeriod, Nullable<bool> doOnlyOneConnect, Nullable<byte> failedPasswordLimitedCount, Nullable<int> comebackStandardTime, string publisherCryptToken, Nullable<byte> membershipType, string cpuBrandString, Nullable<int> totalSystemMemory, string graphicsAdapterBrandString, Nullable<int> resoulutionWidth, Nullable<int> resoulutionHeight, Nullable<byte> textureQuality, Nullable<byte> graphicOption, Nullable<System.DateTime> speedServerExpiration, Nullable<System.DateTime> returnSpeedServerExpiration, Nullable<int> defaultAccountExpirationTime, Nullable<System.DateTime> currentDate, Nullable<bool> isGuestAccount, Nullable<bool> isAdultWorldUser, string surveyHWAndSW, Nullable<bool> isPCRoomLogin, string macAddress, Nullable<bool> dontCreateUser, ObjectParameter userNo, ObjectParameter userNickname, ObjectParameter connectingServerNo, ObjectParameter reasonMemo, ObjectParameter endDate, ObjectParameter isAdmissionToSpeedServer, ObjectParameter isHijackLogin, ObjectParameter accountExpirationDate, ObjectParameter isAdultWorldUser2, ObjectParameter isUpdatePackageBuff, ObjectParameter allCharacterTotalLevel, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var oldAuthenticKeyParameter = oldAuthenticKey.HasValue ?
                new ObjectParameter("oldAuthenticKey", oldAuthenticKey) :
                new ObjectParameter("oldAuthenticKey", typeof(int));
    
            var newAuthenticKeyParameter = newAuthenticKey.HasValue ?
                new ObjectParameter("newAuthenticKey", newAuthenticKey) :
                new ObjectParameter("newAuthenticKey", typeof(int));
    
            var authenticPeriodParameter = authenticPeriod.HasValue ?
                new ObjectParameter("authenticPeriod", authenticPeriod) :
                new ObjectParameter("authenticPeriod", typeof(int));
    
            var doOnlyOneConnectParameter = doOnlyOneConnect.HasValue ?
                new ObjectParameter("doOnlyOneConnect", doOnlyOneConnect) :
                new ObjectParameter("doOnlyOneConnect", typeof(bool));
    
            var failedPasswordLimitedCountParameter = failedPasswordLimitedCount.HasValue ?
                new ObjectParameter("failedPasswordLimitedCount", failedPasswordLimitedCount) :
                new ObjectParameter("failedPasswordLimitedCount", typeof(byte));
    
            var comebackStandardTimeParameter = comebackStandardTime.HasValue ?
                new ObjectParameter("comebackStandardTime", comebackStandardTime) :
                new ObjectParameter("comebackStandardTime", typeof(int));
    
            var publisherCryptTokenParameter = publisherCryptToken != null ?
                new ObjectParameter("publisherCryptToken", publisherCryptToken) :
                new ObjectParameter("publisherCryptToken", typeof(string));
    
            var membershipTypeParameter = membershipType.HasValue ?
                new ObjectParameter("membershipType", membershipType) :
                new ObjectParameter("membershipType", typeof(byte));
    
            var cpuBrandStringParameter = cpuBrandString != null ?
                new ObjectParameter("cpuBrandString", cpuBrandString) :
                new ObjectParameter("cpuBrandString", typeof(string));
    
            var totalSystemMemoryParameter = totalSystemMemory.HasValue ?
                new ObjectParameter("totalSystemMemory", totalSystemMemory) :
                new ObjectParameter("totalSystemMemory", typeof(int));
    
            var graphicsAdapterBrandStringParameter = graphicsAdapterBrandString != null ?
                new ObjectParameter("graphicsAdapterBrandString", graphicsAdapterBrandString) :
                new ObjectParameter("graphicsAdapterBrandString", typeof(string));
    
            var resoulutionWidthParameter = resoulutionWidth.HasValue ?
                new ObjectParameter("resoulutionWidth", resoulutionWidth) :
                new ObjectParameter("resoulutionWidth", typeof(int));
    
            var resoulutionHeightParameter = resoulutionHeight.HasValue ?
                new ObjectParameter("resoulutionHeight", resoulutionHeight) :
                new ObjectParameter("resoulutionHeight", typeof(int));
    
            var textureQualityParameter = textureQuality.HasValue ?
                new ObjectParameter("textureQuality", textureQuality) :
                new ObjectParameter("textureQuality", typeof(byte));
    
            var graphicOptionParameter = graphicOption.HasValue ?
                new ObjectParameter("graphicOption", graphicOption) :
                new ObjectParameter("graphicOption", typeof(byte));
    
            var speedServerExpirationParameter = speedServerExpiration.HasValue ?
                new ObjectParameter("speedServerExpiration", speedServerExpiration) :
                new ObjectParameter("speedServerExpiration", typeof(System.DateTime));
    
            var returnSpeedServerExpirationParameter = returnSpeedServerExpiration.HasValue ?
                new ObjectParameter("returnSpeedServerExpiration", returnSpeedServerExpiration) :
                new ObjectParameter("returnSpeedServerExpiration", typeof(System.DateTime));
    
            var defaultAccountExpirationTimeParameter = defaultAccountExpirationTime.HasValue ?
                new ObjectParameter("defaultAccountExpirationTime", defaultAccountExpirationTime) :
                new ObjectParameter("defaultAccountExpirationTime", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var isAdultWorldUserParameter = isAdultWorldUser.HasValue ?
                new ObjectParameter("isAdultWorldUser", isAdultWorldUser) :
                new ObjectParameter("isAdultWorldUser", typeof(bool));
    
            var surveyHWAndSWParameter = surveyHWAndSW != null ?
                new ObjectParameter("surveyHWAndSW", surveyHWAndSW) :
                new ObjectParameter("surveyHWAndSW", typeof(string));
    
            var isPCRoomLoginParameter = isPCRoomLogin.HasValue ?
                new ObjectParameter("isPCRoomLogin", isPCRoomLogin) :
                new ObjectParameter("isPCRoomLogin", typeof(bool));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var dontCreateUserParameter = dontCreateUser.HasValue ?
                new ObjectParameter("dontCreateUser", dontCreateUser) :
                new ObjectParameter("dontCreateUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAuthenticateOrCreateUser_Result>("uspAuthenticateOrCreateUser", userIdParameter, passwordParameter, ipParameter, oldAuthenticKeyParameter, newAuthenticKeyParameter, authenticPeriodParameter, doOnlyOneConnectParameter, failedPasswordLimitedCountParameter, comebackStandardTimeParameter, publisherCryptTokenParameter, membershipTypeParameter, cpuBrandStringParameter, totalSystemMemoryParameter, graphicsAdapterBrandStringParameter, resoulutionWidthParameter, resoulutionHeightParameter, textureQualityParameter, graphicOptionParameter, speedServerExpirationParameter, returnSpeedServerExpirationParameter, defaultAccountExpirationTimeParameter, currentDateParameter, isGuestAccountParameter, isAdultWorldUserParameter, surveyHWAndSWParameter, isPCRoomLoginParameter, macAddressParameter, dontCreateUserParameter, userNo, userNickname, connectingServerNo, reasonMemo, endDate, isAdmissionToSpeedServer, isHijackLogin, accountExpirationDate, isAdultWorldUser2, isUpdatePackageBuff, allCharacterTotalLevel, symNo);
        }
    
        public virtual int uspAuthenticateUserForManagerServer(string userId, string password, string ip, ObjectParameter userNo, ObjectParameter roleGroupNo, ObjectParameter macAddress, ObjectParameter ipAddress, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAuthenticateUserForManagerServer", userIdParameter, passwordParameter, ipParameter, userNo, roleGroupNo, macAddress, ipAddress, symNo);
        }
    
        public virtual int uspAuthenticateUserForVoiceChattingServer(Nullable<long> userNo, ObjectParameter roleGroupNo, ObjectParameter macAddress, ObjectParameter ipAddress, ObjectParameter userId, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAuthenticateUserForVoiceChattingServer", userNoParameter, roleGroupNo, macAddress, ipAddress, userId, symNo);
        }
    
        public virtual int uspBackupNewContentsOptionsKeyList(ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBackupNewContentsOptionsKeyList", symNo);
        }
    
        public virtual int uspCancelToUnregisterUniqueName(Nullable<byte> nameType, string name, ObjectParameter symNo)
        {
            var nameTypeParameter = nameType.HasValue ?
                new ObjectParameter("nameType", nameType) :
                new ObjectParameter("nameType", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCancelToUnregisterUniqueName", nameTypeParameter, nameParameter, symNo);
        }
    
        public virtual int uspChangeNickName(Nullable<long> userNo, string userNickname, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangeNickName", userNoParameter, userNicknameParameter, symNo);
        }
    
        public virtual int uspChangePCRoomUserGateserverNo(Nullable<byte> gatewayServerNo, Nullable<byte> prevGatewayServerNo)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            var prevGatewayServerNoParameter = prevGatewayServerNo.HasValue ?
                new ObjectParameter("prevGatewayServerNo", prevGatewayServerNo) :
                new ObjectParameter("prevGatewayServerNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangePCRoomUserGateserverNo", gatewayServerNoParameter, prevGatewayServerNoParameter);
        }
    
        public virtual int uspChannelChattingBlockByAdmin(Nullable<long> targetUserNo, Nullable<bool> isChattingBlock, Nullable<System.DateTime> blockEndTime, ObjectParameter symNo)
        {
            var targetUserNoParameter = targetUserNo.HasValue ?
                new ObjectParameter("targetUserNo", targetUserNo) :
                new ObjectParameter("targetUserNo", typeof(long));
    
            var isChattingBlockParameter = isChattingBlock.HasValue ?
                new ObjectParameter("isChattingBlock", isChattingBlock) :
                new ObjectParameter("isChattingBlock", typeof(bool));
    
            var blockEndTimeParameter = blockEndTime.HasValue ?
                new ObjectParameter("blockEndTime", blockEndTime) :
                new ObjectParameter("blockEndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChannelChattingBlockByAdmin", targetUserNoParameter, isChattingBlockParameter, blockEndTimeParameter, symNo);
        }
    
        public virtual int uspCheckAndRegisterUniqueName(Nullable<int> limitCount, Nullable<long> variousNo, Nullable<byte> nameType, string name, Nullable<short> worldNo, Nullable<byte> subType, ObjectParameter symNo)
        {
            var limitCountParameter = limitCount.HasValue ?
                new ObjectParameter("limitCount", limitCount) :
                new ObjectParameter("limitCount", typeof(int));
    
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var nameTypeParameter = nameType.HasValue ?
                new ObjectParameter("nameType", nameType) :
                new ObjectParameter("nameType", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var subTypeParameter = subType.HasValue ?
                new ObjectParameter("subType", subType) :
                new ObjectParameter("subType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAndRegisterUniqueName", limitCountParameter, variousNoParameter, nameTypeParameter, nameParameter, worldNoParameter, subTypeParameter, symNo);
        }
    
        public virtual int uspCheckAndUpdateInSpeedServer_XXX(Nullable<long> userNo, Nullable<int> comebackStandardTime, Nullable<System.DateTime> speedServerExpiration, ObjectParameter isAdmissionToSpeedServer, ObjectParameter isUpdatePackageBuff, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var comebackStandardTimeParameter = comebackStandardTime.HasValue ?
                new ObjectParameter("comebackStandardTime", comebackStandardTime) :
                new ObjectParameter("comebackStandardTime", typeof(int));
    
            var speedServerExpirationParameter = speedServerExpiration.HasValue ?
                new ObjectParameter("speedServerExpiration", speedServerExpiration) :
                new ObjectParameter("speedServerExpiration", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAndUpdateInSpeedServer_XXX", userNoParameter, comebackStandardTimeParameter, speedServerExpirationParameter, isAdmissionToSpeedServer, isUpdatePackageBuff, symNo);
        }
    
        public virtual int uspCheckAuthKey(Nullable<long> userNo, string certifeidKey, ObjectParameter requestDate, ObjectParameter serviceType, ObjectParameter worldNo, ObjectParameter userNickName, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var certifeidKeyParameter = certifeidKey != null ?
                new ObjectParameter("certifeidKey", certifeidKey) :
                new ObjectParameter("certifeidKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAuthKey", userNoParameter, certifeidKeyParameter, requestDate, serviceType, worldNo, userNickName, symNo, rv);
        }
    
        public virtual int uspCheckAuthKey__XXX(Nullable<long> userNo, string certifeidKey, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var certifeidKeyParameter = certifeidKey != null ?
                new ObjectParameter("certifeidKey", certifeidKey) :
                new ObjectParameter("certifeidKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAuthKey__XXX", userNoParameter, certifeidKeyParameter, symNo);
        }
    
        public virtual int uspCheckPaymentPassword(Nullable<long> userNo, string paymentPassword, ObjectParameter isSuccessCheckPassword, ObjectParameter failedPasswordCount, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var paymentPasswordParameter = paymentPassword != null ?
                new ObjectParameter("paymentPassword", paymentPassword) :
                new ObjectParameter("paymentPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckPaymentPassword", userNoParameter, paymentPasswordParameter, isSuccessCheckPassword, failedPasswordCount, symNo);
        }
    
        public virtual int uspCheckPCRoomUserInfo(Nullable<long> userNo, ObjectParameter sessionNo, ObjectParameter status, ObjectParameter reason, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckPCRoomUserInfo", userNoParameter, sessionNo, status, reason, symNo);
        }
    
        public virtual int uspCheckPS4DevAccessUser(string tokenKey, string ip, ObjectParameter userId, ObjectParameter ps4UserId, ObjectParameter symNo)
        {
            var tokenKeyParameter = tokenKey != null ?
                new ObjectParameter("tokenKey", tokenKey) :
                new ObjectParameter("tokenKey", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckPS4DevAccessUser", tokenKeyParameter, ipParameter, userId, ps4UserId, symNo);
        }
    
        public virtual int uspCheckQuickChangeUserNickNameAtWorld(Nullable<long> userNo, string currentUserNickName, string changeUserNickName, ObjectParameter isExist, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var currentUserNickNameParameter = currentUserNickName != null ?
                new ObjectParameter("currentUserNickName", currentUserNickName) :
                new ObjectParameter("currentUserNickName", typeof(string));
    
            var changeUserNickNameParameter = changeUserNickName != null ?
                new ObjectParameter("changeUserNickName", changeUserNickName) :
                new ObjectParameter("changeUserNickName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckQuickChangeUserNickNameAtWorld", userNoParameter, currentUserNickNameParameter, changeUserNickNameParameter, isExist, symNo);
        }
    
        public virtual int uspCheckServerUUID(Nullable<short> serverNo, string serverUUID, ObjectParameter symNo)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var serverUUIDParameter = serverUUID != null ?
                new ObjectParameter("serverUUID", serverUUID) :
                new ObjectParameter("serverUUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckServerUUID", serverNoParameter, serverUUIDParameter, symNo);
        }
    
        public virtual int uspCheckTransferAccountUser(Nullable<long> userNo, ObjectParameter isTransfer, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckTransferAccountUser", userNoParameter, isTransfer, symNo);
        }
    
        public virtual int uspCheckUserLoginProcess(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckUserLoginProcess", userNoParameter);
        }
    
        public virtual int uspCheckValidUniqueName(Nullable<byte> nameType, string name, ObjectParameter symNo)
        {
            var nameTypeParameter = nameType.HasValue ?
                new ObjectParameter("nameType", nameType) :
                new ObjectParameter("nameType", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckValidUniqueName", nameTypeParameter, nameParameter, symNo);
        }
    
        public virtual int uspCleanPCRoomData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCleanPCRoomData");
        }
    
        public virtual int uspCleanUpChangeNameAtWorld(Nullable<int> addMinute)
        {
            var addMinuteParameter = addMinute.HasValue ?
                new ObjectParameter("addMinute", addMinute) :
                new ObjectParameter("addMinute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCleanUpChangeNameAtWorld", addMinuteParameter);
        }
    
        public virtual int uspCleanupUserRepositoryInWorld(Nullable<short> serverNo, Nullable<short> worldNo, ObjectParameter cumulatedTick, ObjectParameter symNo)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCleanupUserRepositoryInWorld", serverNoParameter, worldNoParameter, cumulatedTick, symNo);
        }
    
        public virtual int uspClearAccessibleServer(Nullable<long> userNo, Nullable<short> worldNo, Nullable<bool> isForced, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var isForcedParameter = isForced.HasValue ?
                new ObjectParameter("isForced", isForced) :
                new ObjectParameter("isForced", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClearAccessibleServer", userNoParameter, worldNoParameter, isForcedParameter, symNo);
        }
    
        public virtual int uspClearTradeAuthHistory(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClearTradeAuthHistory", symNo, rv);
        }
    
        public virtual int uspClearTradeAuthKey(Nullable<long> userNo, Nullable<System.DateTime> currentTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClearTradeAuthKey", userNoParameter, currentTimeParameter, symNo);
        }
    
        public virtual int uspCompleteTesterSubmit(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCompleteTesterSubmit", userNoParameter, symNo);
        }
    
        public virtual int uspConsumePS4CashInfoWorld(string userId, string entitlementId, Nullable<long> mailNo, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var entitlementIdParameter = entitlementId != null ?
                new ObjectParameter("entitlementId", entitlementId) :
                new ObjectParameter("entitlementId", typeof(string));
    
            var mailNoParameter = mailNo.HasValue ?
                new ObjectParameter("mailNo", mailNo) :
                new ObjectParameter("mailNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspConsumePS4CashInfoWorld", userIdParameter, entitlementIdParameter, mailNoParameter, symNo);
        }
    
        public virtual int uspCreateBriefCharacterInformation(Nullable<long> userNo, Nullable<short> worldNo, Nullable<long> characterNo, string characterName, Nullable<int> level, Nullable<System.DateTime> createDate, Nullable<byte> classType, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("createDate", createDate) :
                new ObjectParameter("createDate", typeof(System.DateTime));
    
            var classTypeParameter = classType.HasValue ?
                new ObjectParameter("classType", classType) :
                new ObjectParameter("classType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateBriefCharacterInformation", userNoParameter, worldNoParameter, characterNoParameter, characterNameParameter, levelParameter, createDateParameter, classTypeParameter, symNo);
        }
    
        public virtual int uspCreateContentsOptionsLog(ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateContentsOptionsLog", symNo);
        }
    
        public virtual int uspDeleteBriefCharacterInformation(Nullable<long> userNo, Nullable<short> worldNo, Nullable<long> characterNo, Nullable<System.DateTime> removeTime, Nullable<bool> isDeleteCancel, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var removeTimeParameter = removeTime.HasValue ?
                new ObjectParameter("removeTime", removeTime) :
                new ObjectParameter("removeTime", typeof(System.DateTime));
    
            var isDeleteCancelParameter = isDeleteCancel.HasValue ?
                new ObjectParameter("isDeleteCancel", isDeleteCancel) :
                new ObjectParameter("isDeleteCancel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteBriefCharacterInformation", userNoParameter, worldNoParameter, characterNoParameter, removeTimeParameter, isDeleteCancelParameter, symNo);
        }
    
        public virtual int uspDeleteOperationMention(Nullable<long> mentionNo, ObjectParameter symNo)
        {
            var mentionNoParameter = mentionNo.HasValue ?
                new ObjectParameter("mentionNo", mentionNo) :
                new ObjectParameter("mentionNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteOperationMention", mentionNoParameter, symNo);
        }
    
        public virtual ObjectResult<uspDeletePCRoomRequest_Result> uspDeletePCRoomRequest(Nullable<byte> gatewayServerNo, Nullable<long> userNo, Nullable<byte> requestType, ObjectParameter symNo)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("requestType", requestType) :
                new ObjectParameter("requestType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDeletePCRoomRequest_Result>("uspDeletePCRoomRequest", gatewayServerNoParameter, userNoParameter, requestTypeParameter, symNo);
        }
    
        public virtual int uspDoHaveProhibitedWord(string userId, Nullable<bool> isLikeNameFilter, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isLikeNameFilterParameter = isLikeNameFilter.HasValue ?
                new ObjectParameter("isLikeNameFilter", isLikeNameFilter) :
                new ObjectParameter("isLikeNameFilter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDoHaveProhibitedWord", userIdParameter, isLikeNameFilterParameter, symNo);
        }
    
        public virtual ObjectResult<byte[]> uspDownloadUserCache(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("uspDownloadUserCache", userNoParameter);
        }
    
        public virtual int uspDownloadWorldOption(Nullable<long> userNo, ObjectParameter crossPlayOption)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDownloadWorldOption", userNoParameter, crossPlayOption);
        }
    
        public virtual ObjectResult<uspGetBriefCharacterInformation_Result> uspGetBriefCharacterInformation(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBriefCharacterInformation_Result>("uspGetBriefCharacterInformation", userNoParameter, symNo);
        }
    
        public virtual int uspGetCreateUserInformation(string userId, string ip, Nullable<int> oldAuthenticKey, Nullable<byte> failedPasswordLimitedCount, Nullable<bool> guestAccount, Nullable<System.DateTime> shutDownTime, Nullable<bool> isPCRoomLogin, Nullable<bool> isOtp, ObjectParameter isCreatePassword, ObjectParameter publisherCryptToken, ObjectParameter lastServerNo, ObjectParameter isAccessableBalanceChannel, ObjectParameter isPremiumChannelPermission, ObjectParameter atField, ObjectParameter isCompleteTesterSubmit, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var oldAuthenticKeyParameter = oldAuthenticKey.HasValue ?
                new ObjectParameter("oldAuthenticKey", oldAuthenticKey) :
                new ObjectParameter("oldAuthenticKey", typeof(int));
    
            var failedPasswordLimitedCountParameter = failedPasswordLimitedCount.HasValue ?
                new ObjectParameter("failedPasswordLimitedCount", failedPasswordLimitedCount) :
                new ObjectParameter("failedPasswordLimitedCount", typeof(byte));
    
            var guestAccountParameter = guestAccount.HasValue ?
                new ObjectParameter("guestAccount", guestAccount) :
                new ObjectParameter("guestAccount", typeof(bool));
    
            var shutDownTimeParameter = shutDownTime.HasValue ?
                new ObjectParameter("shutDownTime", shutDownTime) :
                new ObjectParameter("shutDownTime", typeof(System.DateTime));
    
            var isPCRoomLoginParameter = isPCRoomLogin.HasValue ?
                new ObjectParameter("isPCRoomLogin", isPCRoomLogin) :
                new ObjectParameter("isPCRoomLogin", typeof(bool));
    
            var isOtpParameter = isOtp.HasValue ?
                new ObjectParameter("isOtp", isOtp) :
                new ObjectParameter("isOtp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetCreateUserInformation", userIdParameter, ipParameter, oldAuthenticKeyParameter, failedPasswordLimitedCountParameter, guestAccountParameter, shutDownTimeParameter, isPCRoomLoginParameter, isOtpParameter, isCreatePassword, publisherCryptToken, lastServerNo, isAccessableBalanceChannel, isPremiumChannelPermission, atField, isCompleteTesterSubmit, symNo);
        }
    
        public virtual int uspGetCumulatedTickCount(Nullable<short> worldNo, ObjectParameter cumulatedTickCount, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetCumulatedTickCount", worldNoParameter, cumulatedTickCount, symNo);
        }
    
        public virtual int uspGetGameOption(Nullable<long> userNo, ObjectParameter gameOptionSerializedData, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetGameOption", userNoParameter, gameOptionSerializedData, symNo);
        }
    
        public virtual int uspGetGatewayServerStatus(Nullable<byte> gatewayServerNo, ObjectParameter status)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetGatewayServerStatus", gatewayServerNoParameter, status);
        }
    
        public virtual ObjectResult<uspGetPCRoomGatewayServerList_Result> uspGetPCRoomGatewayServerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPCRoomGatewayServerList_Result>("uspGetPCRoomGatewayServerList");
        }
    
        public virtual int uspGetPS4AccessToken(string userId, ObjectParameter accessToken, ObjectParameter ps4UserId, ObjectParameter lastUpdateTime, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetPS4AccessToken", userIdParameter, accessToken, ps4UserId, lastUpdateTime, symNo);
        }
    
        public virtual int uspGetRecommandUserNickName(ObjectParameter combineUserNickName, ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetRecommandUserNickName", combineUserNickName, symNo);
        }
    
        public virtual int uspGetSequentialCheckFlag(Nullable<short> serverNo, string serverUUID, ObjectParameter checkFlag)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var serverUUIDParameter = serverUUID != null ?
                new ObjectParameter("serverUUID", serverUUID) :
                new ObjectParameter("serverUUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetSequentialCheckFlag", serverNoParameter, serverUUIDParameter, checkFlag);
        }
    
        public virtual ObjectResult<uspGetServerChannelChatInfoList_Result> uspGetServerChannelChatInfoList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetServerChannelChatInfoList_Result>("uspGetServerChannelChatInfoList");
        }
    
        public virtual int uspGetServerDataAndVersion(ObjectParameter serverDataCRC, ObjectParameter serverVersion, ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetServerDataAndVersion", serverDataCRC, serverVersion, symNo);
        }
    
        public virtual ObjectResult<uspGetServerFamilyInfoList_Result> uspGetServerFamilyInfoList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetServerFamilyInfoList_Result>("uspGetServerFamilyInfoList");
        }
    
        public virtual ObjectResult<uspGetServerInstanceFieldInfoList_Result> uspGetServerInstanceFieldInfoList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetServerInstanceFieldInfoList_Result>("uspGetServerInstanceFieldInfoList");
        }
    
        public virtual int uspGetTeenageUserInformation(string userId, ObjectParameter userNo, ObjectParameter teenAgeType, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetTeenageUserInformation", userIdParameter, userNo, teenAgeType, symNo);
        }
    
        public virtual int uspGetTranslationCount(Nullable<short> staticType, Nullable<int> translationKey1, Nullable<short> translationKey2, Nullable<short> translationKey3, Nullable<short> textNo, Nullable<byte> serviceResourceType, ObjectParameter translationCount)
        {
            var staticTypeParameter = staticType.HasValue ?
                new ObjectParameter("staticType", staticType) :
                new ObjectParameter("staticType", typeof(short));
    
            var translationKey1Parameter = translationKey1.HasValue ?
                new ObjectParameter("translationKey1", translationKey1) :
                new ObjectParameter("translationKey1", typeof(int));
    
            var translationKey2Parameter = translationKey2.HasValue ?
                new ObjectParameter("translationKey2", translationKey2) :
                new ObjectParameter("translationKey2", typeof(short));
    
            var translationKey3Parameter = translationKey3.HasValue ?
                new ObjectParameter("translationKey3", translationKey3) :
                new ObjectParameter("translationKey3", typeof(short));
    
            var textNoParameter = textNo.HasValue ?
                new ObjectParameter("textNo", textNo) :
                new ObjectParameter("textNo", typeof(short));
    
            var serviceResourceTypeParameter = serviceResourceType.HasValue ?
                new ObjectParameter("serviceResourceType", serviceResourceType) :
                new ObjectParameter("serviceResourceType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetTranslationCount", staticTypeParameter, translationKey1Parameter, translationKey2Parameter, translationKey3Parameter, textNoParameter, serviceResourceTypeParameter, translationCount);
        }
    
        public virtual ObjectResult<uspGetTranslationList_Result> uspGetTranslationList(Nullable<long> userNo, Nullable<short> staticType, Nullable<int> translationKey1, Nullable<short> translationKey2, Nullable<short> translationKey3, Nullable<short> textNo, Nullable<byte> serviceResourceType, Nullable<int> page, Nullable<int> pageSize, ObjectParameter totalPage, ObjectParameter isWrite)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var staticTypeParameter = staticType.HasValue ?
                new ObjectParameter("staticType", staticType) :
                new ObjectParameter("staticType", typeof(short));
    
            var translationKey1Parameter = translationKey1.HasValue ?
                new ObjectParameter("translationKey1", translationKey1) :
                new ObjectParameter("translationKey1", typeof(int));
    
            var translationKey2Parameter = translationKey2.HasValue ?
                new ObjectParameter("translationKey2", translationKey2) :
                new ObjectParameter("translationKey2", typeof(short));
    
            var translationKey3Parameter = translationKey3.HasValue ?
                new ObjectParameter("translationKey3", translationKey3) :
                new ObjectParameter("translationKey3", typeof(short));
    
            var textNoParameter = textNo.HasValue ?
                new ObjectParameter("textNo", textNo) :
                new ObjectParameter("textNo", typeof(short));
    
            var serviceResourceTypeParameter = serviceResourceType.HasValue ?
                new ObjectParameter("serviceResourceType", serviceResourceType) :
                new ObjectParameter("serviceResourceType", typeof(byte));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTranslationList_Result>("uspGetTranslationList", userNoParameter, staticTypeParameter, translationKey1Parameter, translationKey2Parameter, translationKey3Parameter, textNoParameter, serviceResourceTypeParameter, pageParameter, pageSizeParameter, totalPage, isWrite);
        }
    
        public virtual int uspGetUIUserInfomation(Nullable<long> userNo, ObjectParameter horseEquipSlotFlag, ObjectParameter camelEquipSlotFlag, ObjectParameter avatarEquipSlotFlag, ObjectParameter isBattleHelmShow, ObjectParameter isCloakShow)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUIUserInfomation", userNoParameter, horseEquipSlotFlag, camelEquipSlotFlag, avatarEquipSlotFlag, isBattleHelmShow, isCloakShow);
        }
    
        public virtual int uspInsertContentsOptionsKeyList(string contentsOptionsKeyList, ObjectParameter symNo)
        {
            var contentsOptionsKeyListParameter = contentsOptionsKeyList != null ?
                new ObjectParameter("contentsOptionsKeyList", contentsOptionsKeyList) :
                new ObjectParameter("contentsOptionsKeyList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertContentsOptionsKeyList", contentsOptionsKeyListParameter, symNo);
        }
    
        public virtual int uspInsertOperationMention(Nullable<byte> type, Nullable<short> resourceType, string mention, ObjectParameter mentionNo, ObjectParameter symNo)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(byte));
    
            var resourceTypeParameter = resourceType.HasValue ?
                new ObjectParameter("resourceType", resourceType) :
                new ObjectParameter("resourceType", typeof(short));
    
            var mentionParameter = mention != null ?
                new ObjectParameter("mention", mention) :
                new ObjectParameter("mention", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertOperationMention", typeParameter, resourceTypeParameter, mentionParameter, mentionNo, symNo);
        }
    
        public virtual int uspInsertPCRoomLogin(Nullable<byte> gatewayServerNo, Nullable<long> userNo, string sessionNo, Nullable<byte> status, Nullable<byte> reason, byte[] machineID, string clientIP, string localIP, ObjectParameter symNo)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var sessionNoParameter = sessionNo != null ?
                new ObjectParameter("sessionNo", sessionNo) :
                new ObjectParameter("sessionNo", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(byte));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(byte));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(byte[]));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("clientIP", clientIP) :
                new ObjectParameter("clientIP", typeof(string));
    
            var localIPParameter = localIP != null ?
                new ObjectParameter("localIP", localIP) :
                new ObjectParameter("localIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertPCRoomLogin", gatewayServerNoParameter, userNoParameter, sessionNoParameter, statusParameter, reasonParameter, machineIDParameter, clientIPParameter, localIPParameter, symNo);
        }
    
        public virtual int uspInsertPCRoomRequest(Nullable<long> userNo, string sessionNo, Nullable<byte> requestType, string clientIP, string localIP, byte[] machineID, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var sessionNoParameter = sessionNo != null ?
                new ObjectParameter("sessionNo", sessionNo) :
                new ObjectParameter("sessionNo", typeof(string));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("requestType", requestType) :
                new ObjectParameter("requestType", typeof(byte));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("clientIP", clientIP) :
                new ObjectParameter("clientIP", typeof(string));
    
            var localIPParameter = localIP != null ?
                new ObjectParameter("localIP", localIP) :
                new ObjectParameter("localIP", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertPCRoomRequest", userNoParameter, sessionNoParameter, requestTypeParameter, clientIPParameter, localIPParameter, machineIDParameter, symNo);
        }
    
        public virtual int uspInsertRoleGroup(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroup", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual ObjectResult<uspInsertRoleGroupMember_Result> uspInsertRoleGroupMember(Nullable<long> userNo, Nullable<byte> roleGroupNo, string macAddress, string ipAddress, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsertRoleGroupMember_Result>("uspInsertRoleGroupMember", userNoParameter, roleGroupNoParameter, macAddressParameter, ipAddressParameter, symNo);
        }
    
        public virtual int uspInsertServerInformation(string serverInfoString, ObjectParameter symNo)
        {
            var serverInfoStringParameter = serverInfoString != null ?
                new ObjectParameter("serverInfoString", serverInfoString) :
                new ObjectParameter("serverInfoString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerInformation", serverInfoStringParameter, symNo);
        }
    
        public virtual int uspIsAcceptableServer(Nullable<long> userNo, Nullable<short> worldNo, Nullable<short> serverNo, Nullable<bool> isSpecialChannel, Nullable<System.DateTime> currentTime, ObjectParameter isAcceptable, ObjectParameter acceptableTime)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var isSpecialChannelParameter = isSpecialChannel.HasValue ?
                new ObjectParameter("isSpecialChannel", isSpecialChannel) :
                new ObjectParameter("isSpecialChannel", typeof(bool));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsAcceptableServer", userNoParameter, worldNoParameter, serverNoParameter, isSpecialChannelParameter, currentTimeParameter, isAcceptable, acceptableTime);
        }
    
        public virtual int uspIsGameMaster(Nullable<long> userNo, ObjectParameter isGameMaster, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsGameMaster", userNoParameter, isGameMaster, symNo, rv);
        }
    
        public virtual ObjectResult<uspListChattingMacro_Result> uspListChattingMacro(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListChattingMacro_Result>("uspListChattingMacro", userNoParameter);
        }
    
        public virtual ObjectResult<uspListOperationMentionForField_Result> uspListOperationMentionForField()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListOperationMentionForField_Result>("uspListOperationMentionForField");
        }
    
        public virtual ObjectResult<uspListPS4CashInfoWorld_Result> uspListPS4CashInfoWorld(string userId, Nullable<byte> nationType, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPS4CashInfoWorld_Result>("uspListPS4CashInfoWorld", userIdParameter, nationTypeParameter, symNo);
        }
    
        public virtual ObjectResult<uspListRegistedPS4CashProducNotWorld_Result> uspListRegistedPS4CashProducNotWorld()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRegistedPS4CashProducNotWorld_Result>("uspListRegistedPS4CashProducNotWorld");
        }
    
        public virtual ObjectResult<uspListRegistedXboxCashProducNotWorld_Result> uspListRegistedXboxCashProducNotWorld()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRegistedXboxCashProducNotWorld_Result>("uspListRegistedXboxCashProducNotWorld");
        }
    
        public virtual ObjectResult<uspListReplaceSubItemGroup_Result> uspListReplaceSubItemGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListReplaceSubItemGroup_Result>("uspListReplaceSubItemGroup");
        }
    
        public virtual ObjectResult<uspListRole_Result> uspListRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRole_Result>("uspListRole");
        }
    
        public virtual ObjectResult<uspListRoleGroup_Result> uspListRoleGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroup_Result>("uspListRoleGroup");
        }
    
        public virtual ObjectResult<uspListXboxCashInfoWorld_Result> uspListXboxCashInfoWorld(string userId, Nullable<byte> nationType, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListXboxCashInfoWorld_Result>("uspListXboxCashInfoWorld", userIdParameter, nationTypeParameter, symNo);
        }
    
        public virtual int uspLoadCashFromGameNet(string userId, ObjectParameter cash, ObjectParameter error)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoadCashFromGameNet", userIdParameter, cash, error);
        }
    
        public virtual int uspLoadChannelChatBlockInfo(Nullable<long> userNo, Nullable<System.DateTime> currentTime, ObjectParameter availableBlockCount, ObjectParameter lastUpdateTime, ObjectParameter blockedCount, ObjectParameter chattingBlockEndTime, ObjectParameter channelJoinBlockEndTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoadChannelChatBlockInfo", userNoParameter, currentTimeParameter, availableBlockCount, lastUpdateTime, blockedCount, chattingBlockEndTime, channelJoinBlockEndTime, symNo);
        }
    
        public virtual int uspLoadRoleGroupNo(Nullable<long> userNo, ObjectParameter roleGroupNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoadRoleGroupNo", userNoParameter, roleGroupNo);
        }
    
        public virtual int uspLogBlockChatByUser(Nullable<long> userNo, string userId, Nullable<long> characterNo, string characterName, string userIp, string targetCharacterName, string reasonChat, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var targetCharacterNameParameter = targetCharacterName != null ?
                new ObjectParameter("targetCharacterName", targetCharacterName) :
                new ObjectParameter("targetCharacterName", typeof(string));
    
            var reasonChatParameter = reasonChat != null ?
                new ObjectParameter("reasonChat", reasonChat) :
                new ObjectParameter("reasonChat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogBlockChatByUser", userNoParameter, userIdParameter, characterNoParameter, characterNameParameter, userIpParameter, targetCharacterNameParameter, reasonChatParameter, symNo);
        }
    
        public virtual int uspLoginUser(string userId, string ip, Nullable<int> oldAuthenticKey, Nullable<int> webAuthenticKey, Nullable<short> serverNo, Nullable<short> worldNo, Nullable<short> serviceType, Nullable<bool> lastServerOnly, Nullable<bool> doOnlyOneConnect, Nullable<byte> failedPasswordLimitedCount, Nullable<System.DateTime> currentDate, Nullable<bool> isBlanceChannel, Nullable<bool> isReconnect, Nullable<bool> gmOnlyFlag, ObjectParameter userNo, ObjectParameter userNickname, ObjectParameter connectingServerNo, ObjectParameter roleGroupNo, ObjectParameter macAddress, ObjectParameter roleIp, ObjectParameter isCreatePaymentPassword, ObjectParameter failPasswordCount, ObjectParameter isAdmissionToSpeedServer, ObjectParameter speedServerExpiration, ObjectParameter publisherCryptToken, ObjectParameter isGuestAccount, ObjectParameter isAdultWorldUser, ObjectParameter shutDownTime, ObjectParameter hijackUserId, ObjectParameter adminUserNo, ObjectParameter accountExpirationDate, ObjectParameter membershipType, ObjectParameter isIgnoreCheckCustomizeOnly, ObjectParameter isPremiumChannelPermission, ObjectParameter isPCRoomUser, ObjectParameter registerAccountedTime, ObjectParameter isOtp, ObjectParameter teenAgeType, ObjectParameter allCharacterTotalLevel, ObjectParameter isAppliedNickNameChange, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var oldAuthenticKeyParameter = oldAuthenticKey.HasValue ?
                new ObjectParameter("oldAuthenticKey", oldAuthenticKey) :
                new ObjectParameter("oldAuthenticKey", typeof(int));
    
            var webAuthenticKeyParameter = webAuthenticKey.HasValue ?
                new ObjectParameter("webAuthenticKey", webAuthenticKey) :
                new ObjectParameter("webAuthenticKey", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("serviceType", serviceType) :
                new ObjectParameter("serviceType", typeof(short));
    
            var lastServerOnlyParameter = lastServerOnly.HasValue ?
                new ObjectParameter("lastServerOnly", lastServerOnly) :
                new ObjectParameter("lastServerOnly", typeof(bool));
    
            var doOnlyOneConnectParameter = doOnlyOneConnect.HasValue ?
                new ObjectParameter("doOnlyOneConnect", doOnlyOneConnect) :
                new ObjectParameter("doOnlyOneConnect", typeof(bool));
    
            var failedPasswordLimitedCountParameter = failedPasswordLimitedCount.HasValue ?
                new ObjectParameter("failedPasswordLimitedCount", failedPasswordLimitedCount) :
                new ObjectParameter("failedPasswordLimitedCount", typeof(byte));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var isBlanceChannelParameter = isBlanceChannel.HasValue ?
                new ObjectParameter("isBlanceChannel", isBlanceChannel) :
                new ObjectParameter("isBlanceChannel", typeof(bool));
    
            var isReconnectParameter = isReconnect.HasValue ?
                new ObjectParameter("isReconnect", isReconnect) :
                new ObjectParameter("isReconnect", typeof(bool));
    
            var gmOnlyFlagParameter = gmOnlyFlag.HasValue ?
                new ObjectParameter("gmOnlyFlag", gmOnlyFlag) :
                new ObjectParameter("gmOnlyFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoginUser", userIdParameter, ipParameter, oldAuthenticKeyParameter, webAuthenticKeyParameter, serverNoParameter, worldNoParameter, serviceTypeParameter, lastServerOnlyParameter, doOnlyOneConnectParameter, failedPasswordLimitedCountParameter, currentDateParameter, isBlanceChannelParameter, isReconnectParameter, gmOnlyFlagParameter, userNo, userNickname, connectingServerNo, roleGroupNo, macAddress, roleIp, isCreatePaymentPassword, failPasswordCount, isAdmissionToSpeedServer, speedServerExpiration, publisherCryptToken, isGuestAccount, isAdultWorldUser, shutDownTime, hijackUserId, adminUserNo, accountExpirationDate, membershipType, isIgnoreCheckCustomizeOnly, isPremiumChannelPermission, isPCRoomUser, registerAccountedTime, isOtp, teenAgeType, allCharacterTotalLevel, isAppliedNickNameChange, symNo);
        }
    
        public virtual int uspLogoutUser(Nullable<long> userNo, Nullable<bool> doAuthenticKeyReset, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var doAuthenticKeyResetParameter = doAuthenticKeyReset.HasValue ?
                new ObjectParameter("doAuthenticKeyReset", doAuthenticKeyReset) :
                new ObjectParameter("doAuthenticKeyReset", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogoutUser", userNoParameter, doAuthenticKeyResetParameter, symNo);
        }
    
        public virtual int uspNameExchangeAtWorld(ObjectParameter symNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspNameExchangeAtWorld", symNo);
        }
    
        public virtual int uspPayCashFromGameNet(string userId, string charaterName, Nullable<int> cashProductNo, Nullable<long> itemCost, Nullable<long> itemCount, Nullable<short> worldNo, string worldName, ObjectParameter invoceID, ObjectParameter cash, ObjectParameter error)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var charaterNameParameter = charaterName != null ?
                new ObjectParameter("charaterName", charaterName) :
                new ObjectParameter("charaterName", typeof(string));
    
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(int));
    
            var itemCostParameter = itemCost.HasValue ?
                new ObjectParameter("itemCost", itemCost) :
                new ObjectParameter("itemCost", typeof(long));
    
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("itemCount", itemCount) :
                new ObjectParameter("itemCount", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var worldNameParameter = worldName != null ?
                new ObjectParameter("worldName", worldName) :
                new ObjectParameter("worldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPayCashFromGameNet", userIdParameter, charaterNameParameter, cashProductNoParameter, itemCostParameter, itemCountParameter, worldNoParameter, worldNameParameter, invoceID, cash, error);
        }
    
        public virtual ObjectResult<uspPCRoomLoginList_Result> uspPCRoomLoginList(Nullable<byte> gatewayServerNo)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPCRoomLoginList_Result>("uspPCRoomLoginList", gatewayServerNoParameter);
        }
    
        public virtual ObjectResult<uspPCRoomRequestList_Result> uspPCRoomRequestList(Nullable<byte> gatewayServerNo, Nullable<bool> isMainServer)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            var isMainServerParameter = isMainServer.HasValue ?
                new ObjectParameter("isMainServer", isMainServer) :
                new ObjectParameter("isMainServer", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPCRoomRequestList_Result>("uspPCRoomRequestList", gatewayServerNoParameter, isMainServerParameter);
        }
    
        public virtual int uspQuickChangeUserNickNameAtWorld(Nullable<long> userNo, string changeUserNickName, Nullable<short> worldNo, ObjectParameter beforeName, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var changeUserNickNameParameter = changeUserNickName != null ?
                new ObjectParameter("changeUserNickName", changeUserNickName) :
                new ObjectParameter("changeUserNickName", typeof(string));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspQuickChangeUserNickNameAtWorld", userNoParameter, changeUserNickNameParameter, worldNoParameter, beforeName, symNo);
        }
    
        public virtual int uspRefreshPS4CashInfoWorld(string userId, string cashInfoString, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cashInfoStringParameter = cashInfoString != null ?
                new ObjectParameter("cashInfoString", cashInfoString) :
                new ObjectParameter("cashInfoString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefreshPS4CashInfoWorld", userIdParameter, cashInfoStringParameter, symNo);
        }
    
        public virtual int uspRefundUpdatePSCashInfoWorld(string userId, string variableString1, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var variableString1Parameter = variableString1 != null ?
                new ObjectParameter("variableString1", variableString1) :
                new ObjectParameter("variableString1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefundUpdatePSCashInfoWorld", userIdParameter, variableString1Parameter, symNo);
        }
    
        public virtual int uspRegisterNickName(Nullable<long> userNo, string userNickname, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegisterNickName", userNoParameter, userNicknameParameter, symNo);
        }
    
        public virtual int uspRegisterServerName(Nullable<short> serverNo, string serverId, string serverName, ObjectParameter symNo)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var serverIdParameter = serverId != null ?
                new ObjectParameter("serverId", serverId) :
                new ObjectParameter("serverId", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("serverName", serverName) :
                new ObjectParameter("serverName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegisterServerName", serverNoParameter, serverIdParameter, serverNameParameter, symNo);
        }
    
        public virtual int uspRegistNagetiveUserInfo(Nullable<byte> reportType, Nullable<long> ownerUserNo, Nullable<long> ownerUserCharacterNo, string ownerUserCharacterName, Nullable<long> targetUserNo, Nullable<long> targetUserCharacterNo, string targetUserCharacterName, Nullable<short> serverNo, Nullable<long> positionX, Nullable<long> positionY, Nullable<long> positionZ, string reportComment, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter currentCount, ObjectParameter symNo)
        {
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("reportType", reportType) :
                new ObjectParameter("reportType", typeof(byte));
    
            var ownerUserNoParameter = ownerUserNo.HasValue ?
                new ObjectParameter("ownerUserNo", ownerUserNo) :
                new ObjectParameter("ownerUserNo", typeof(long));
    
            var ownerUserCharacterNoParameter = ownerUserCharacterNo.HasValue ?
                new ObjectParameter("ownerUserCharacterNo", ownerUserCharacterNo) :
                new ObjectParameter("ownerUserCharacterNo", typeof(long));
    
            var ownerUserCharacterNameParameter = ownerUserCharacterName != null ?
                new ObjectParameter("ownerUserCharacterName", ownerUserCharacterName) :
                new ObjectParameter("ownerUserCharacterName", typeof(string));
    
            var targetUserNoParameter = targetUserNo.HasValue ?
                new ObjectParameter("targetUserNo", targetUserNo) :
                new ObjectParameter("targetUserNo", typeof(long));
    
            var targetUserCharacterNoParameter = targetUserCharacterNo.HasValue ?
                new ObjectParameter("targetUserCharacterNo", targetUserCharacterNo) :
                new ObjectParameter("targetUserCharacterNo", typeof(long));
    
            var targetUserCharacterNameParameter = targetUserCharacterName != null ?
                new ObjectParameter("targetUserCharacterName", targetUserCharacterName) :
                new ObjectParameter("targetUserCharacterName", typeof(string));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var positionXParameter = positionX.HasValue ?
                new ObjectParameter("positionX", positionX) :
                new ObjectParameter("positionX", typeof(long));
    
            var positionYParameter = positionY.HasValue ?
                new ObjectParameter("positionY", positionY) :
                new ObjectParameter("positionY", typeof(long));
    
            var positionZParameter = positionZ.HasValue ?
                new ObjectParameter("positionZ", positionZ) :
                new ObjectParameter("positionZ", typeof(long));
    
            var reportCommentParameter = reportComment != null ?
                new ObjectParameter("reportComment", reportComment) :
                new ObjectParameter("reportComment", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegistNagetiveUserInfo", reportTypeParameter, ownerUserNoParameter, ownerUserCharacterNoParameter, ownerUserCharacterNameParameter, targetUserNoParameter, targetUserCharacterNoParameter, targetUserCharacterNameParameter, serverNoParameter, positionXParameter, positionYParameter, positionZParameter, reportCommentParameter, startDateParameter, endDateParameter, currentCount, symNo);
        }
    
        public virtual int uspRegistServerDataCRC(Nullable<long> serverDataCRC, Nullable<int> serverVersion, ObjectParameter symNo)
        {
            var serverDataCRCParameter = serverDataCRC.HasValue ?
                new ObjectParameter("serverDataCRC", serverDataCRC) :
                new ObjectParameter("serverDataCRC", typeof(long));
    
            var serverVersionParameter = serverVersion.HasValue ?
                new ObjectParameter("serverVersion", serverVersion) :
                new ObjectParameter("serverVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegistServerDataCRC", serverDataCRCParameter, serverVersionParameter, symNo);
        }
    
        public virtual int uspRemakeAuthenticKey(Nullable<long> userNo, Nullable<int> authenticKey, Nullable<int> authenticPeriod, Nullable<bool> doLogout, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var authenticKeyParameter = authenticKey.HasValue ?
                new ObjectParameter("authenticKey", authenticKey) :
                new ObjectParameter("authenticKey", typeof(int));
    
            var authenticPeriodParameter = authenticPeriod.HasValue ?
                new ObjectParameter("authenticPeriod", authenticPeriod) :
                new ObjectParameter("authenticPeriod", typeof(int));
    
            var doLogoutParameter = doLogout.HasValue ?
                new ObjectParameter("doLogout", doLogout) :
                new ObjectParameter("doLogout", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemakeAuthenticKey", userNoParameter, authenticKeyParameter, authenticPeriodParameter, doLogoutParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroup(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroup", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupMember(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupMember", userNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupName(Nullable<byte> roleGroupNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupName", roleGroupNoParameter, symNo);
        }
    
        public virtual int uspReportTranslation(Nullable<short> staticType, Nullable<int> translationKey1, Nullable<short> translationKey2, Nullable<short> translationKey3, Nullable<short> textNo, Nullable<byte> serviceResourceType, Nullable<long> userNo, string translationText, ObjectParameter symNo)
        {
            var staticTypeParameter = staticType.HasValue ?
                new ObjectParameter("staticType", staticType) :
                new ObjectParameter("staticType", typeof(short));
    
            var translationKey1Parameter = translationKey1.HasValue ?
                new ObjectParameter("translationKey1", translationKey1) :
                new ObjectParameter("translationKey1", typeof(int));
    
            var translationKey2Parameter = translationKey2.HasValue ?
                new ObjectParameter("translationKey2", translationKey2) :
                new ObjectParameter("translationKey2", typeof(short));
    
            var translationKey3Parameter = translationKey3.HasValue ?
                new ObjectParameter("translationKey3", translationKey3) :
                new ObjectParameter("translationKey3", typeof(short));
    
            var textNoParameter = textNo.HasValue ?
                new ObjectParameter("textNo", textNo) :
                new ObjectParameter("textNo", typeof(short));
    
            var serviceResourceTypeParameter = serviceResourceType.HasValue ?
                new ObjectParameter("serviceResourceType", serviceResourceType) :
                new ObjectParameter("serviceResourceType", typeof(byte));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var translationTextParameter = translationText != null ?
                new ObjectParameter("translationText", translationText) :
                new ObjectParameter("translationText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspReportTranslation", staticTypeParameter, translationKey1Parameter, translationKey2Parameter, translationKey3Parameter, textNoParameter, serviceResourceTypeParameter, userNoParameter, translationTextParameter, symNo);
        }
    
        public virtual int uspReportTranslationRecommend(Nullable<long> reportNo, Nullable<long> userNo, ObjectParameter recommendCount, ObjectParameter symNo)
        {
            var reportNoParameter = reportNo.HasValue ?
                new ObjectParameter("reportNo", reportNo) :
                new ObjectParameter("reportNo", typeof(long));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspReportTranslationRecommend", reportNoParameter, userNoParameter, recommendCount, symNo);
        }
    
        public virtual int uspRollBackPSCashInfoWorld(string userId, string cashInfoString, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cashInfoStringParameter = cashInfoString != null ?
                new ObjectParameter("cashInfoString", cashInfoString) :
                new ObjectParameter("cashInfoString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRollBackPSCashInfoWorld", userIdParameter, cashInfoStringParameter, symNo);
        }
    
        public virtual int uspRollBackQuickChangeUserNickNameAtWorld(Nullable<long> userNo, string changedUserNickName, string rollbackUserNickName, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var changedUserNickNameParameter = changedUserNickName != null ?
                new ObjectParameter("changedUserNickName", changedUserNickName) :
                new ObjectParameter("changedUserNickName", typeof(string));
    
            var rollbackUserNickNameParameter = rollbackUserNickName != null ?
                new ObjectParameter("rollbackUserNickName", rollbackUserNickName) :
                new ObjectParameter("rollbackUserNickName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRollBackQuickChangeUserNickNameAtWorld", userNoParameter, changedUserNickNameParameter, rollbackUserNickNameParameter, symNo);
        }
    
        public virtual int uspRollBackXboxCashInfoWorld(string userId, string cashInfoString, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cashInfoStringParameter = cashInfoString != null ?
                new ObjectParameter("cashInfoString", cashInfoString) :
                new ObjectParameter("cashInfoString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRollBackXboxCashInfoWorld", userIdParameter, cashInfoStringParameter, symNo);
        }
    
        public virtual int uspSaveChattingMacro(Nullable<long> userNo, Nullable<int> macroNo, Nullable<byte> chatType, string chatMessage, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var macroNoParameter = macroNo.HasValue ?
                new ObjectParameter("macroNo", macroNo) :
                new ObjectParameter("macroNo", typeof(int));
    
            var chatTypeParameter = chatType.HasValue ?
                new ObjectParameter("chatType", chatType) :
                new ObjectParameter("chatType", typeof(byte));
    
            var chatMessageParameter = chatMessage != null ?
                new ObjectParameter("chatMessage", chatMessage) :
                new ObjectParameter("chatMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveChattingMacro", userNoParameter, macroNoParameter, chatTypeParameter, chatMessageParameter, symNo);
        }
    
        public virtual int uspSaveExpirationDate(Nullable<long> userNo, Nullable<System.DateTime> expirationDate, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("expirationDate", expirationDate) :
                new ObjectParameter("expirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveExpirationDate", userNoParameter, expirationDateParameter, symNo);
        }
    
        public virtual int uspSaveGameOption(Nullable<long> userNo, string gameOptionSerializedData, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var gameOptionSerializedDataParameter = gameOptionSerializedData != null ?
                new ObjectParameter("gameOptionSerializedData", gameOptionSerializedData) :
                new ObjectParameter("gameOptionSerializedData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveGameOption", userNoParameter, gameOptionSerializedDataParameter, symNo);
        }
    
        public virtual int uspSavePcRoomInfo(Nullable<long> userNo, Nullable<bool> isPcRoom, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSavePcRoomInfo", userNoParameter, isPcRoomParameter, symNo);
        }
    
        public virtual ObjectResult<uspServerInfoList_Result> uspServerInfoList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspServerInfoList_Result>("uspServerInfoList");
        }
    
        public virtual int uspSetReconnectDisable(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetReconnectDisable", userNoParameter, symNo);
        }
    
        public virtual int uspShaCleanUpChangeNameAtWorld(Nullable<int> addMinute, ObjectParameter symNo)
        {
            var addMinuteParameter = addMinute.HasValue ?
                new ObjectParameter("addMinute", addMinute) :
                new ObjectParameter("addMinute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspShaCleanUpChangeNameAtWorld", addMinuteParameter, symNo);
        }
    
        public virtual int uspUnregisterUniqueName(Nullable<byte> type, Nullable<long> variousNo, Nullable<short> worldNo, string name, Nullable<System.DateTime> removeDate, Nullable<byte> subType, ObjectParameter symNo)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(byte));
    
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var removeDateParameter = removeDate.HasValue ?
                new ObjectParameter("removeDate", removeDate) :
                new ObjectParameter("removeDate", typeof(System.DateTime));
    
            var subTypeParameter = subType.HasValue ?
                new ObjectParameter("subType", subType) :
                new ObjectParameter("subType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUnregisterUniqueName", typeParameter, variousNoParameter, worldNoParameter, nameParameter, removeDateParameter, subTypeParameter, symNo);
        }
    
        public virtual int uspUpdateAccessibleServer(Nullable<long> userNo, Nullable<short> userGuildServerGroupNo, Nullable<short> worldNo, Nullable<short> serverNo, Nullable<short> serverGroupNo, Nullable<System.DateTime> currentTime, Nullable<System.DateTime> accessTime, Nullable<byte> updateType, Nullable<byte> restrictReason, ObjectParameter writeTime, ObjectParameter writeSpecialTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userGuildServerGroupNoParameter = userGuildServerGroupNo.HasValue ?
                new ObjectParameter("userGuildServerGroupNo", userGuildServerGroupNo) :
                new ObjectParameter("userGuildServerGroupNo", typeof(short));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var serverGroupNoParameter = serverGroupNo.HasValue ?
                new ObjectParameter("serverGroupNo", serverGroupNo) :
                new ObjectParameter("serverGroupNo", typeof(short));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            var accessTimeParameter = accessTime.HasValue ?
                new ObjectParameter("accessTime", accessTime) :
                new ObjectParameter("accessTime", typeof(System.DateTime));
    
            var updateTypeParameter = updateType.HasValue ?
                new ObjectParameter("updateType", updateType) :
                new ObjectParameter("updateType", typeof(byte));
    
            var restrictReasonParameter = restrictReason.HasValue ?
                new ObjectParameter("restrictReason", restrictReason) :
                new ObjectParameter("restrictReason", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAccessibleServer", userNoParameter, userGuildServerGroupNoParameter, worldNoParameter, serverNoParameter, serverGroupNoParameter, currentTimeParameter, accessTimeParameter, updateTypeParameter, restrictReasonParameter, writeTime, writeSpecialTime, symNo);
        }
    
        public virtual int uspUpdateCommonTime(Nullable<short> worldNo, Nullable<long> elapsedTick, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var elapsedTickParameter = elapsedTick.HasValue ?
                new ObjectParameter("elapsedTick", elapsedTick) :
                new ObjectParameter("elapsedTick", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateCommonTime", worldNoParameter, elapsedTickParameter, symNo);
        }
    
        public virtual int uspUpdateCurrentSessionCount(Nullable<short> worldNo, Nullable<short> serverNo, Nullable<int> totalSessionCount, Nullable<int> busySessionCount, Nullable<int> loginningUserCount, Nullable<int> playingUserCount, Nullable<int> playingPcRoomUserCount, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var totalSessionCountParameter = totalSessionCount.HasValue ?
                new ObjectParameter("totalSessionCount", totalSessionCount) :
                new ObjectParameter("totalSessionCount", typeof(int));
    
            var busySessionCountParameter = busySessionCount.HasValue ?
                new ObjectParameter("busySessionCount", busySessionCount) :
                new ObjectParameter("busySessionCount", typeof(int));
    
            var loginningUserCountParameter = loginningUserCount.HasValue ?
                new ObjectParameter("loginningUserCount", loginningUserCount) :
                new ObjectParameter("loginningUserCount", typeof(int));
    
            var playingUserCountParameter = playingUserCount.HasValue ?
                new ObjectParameter("playingUserCount", playingUserCount) :
                new ObjectParameter("playingUserCount", typeof(int));
    
            var playingPcRoomUserCountParameter = playingPcRoomUserCount.HasValue ?
                new ObjectParameter("playingPcRoomUserCount", playingPcRoomUserCount) :
                new ObjectParameter("playingPcRoomUserCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateCurrentSessionCount", worldNoParameter, serverNoParameter, totalSessionCountParameter, busySessionCountParameter, loginningUserCountParameter, playingUserCountParameter, playingPcRoomUserCountParameter, symNo);
        }
    
        public virtual int uspUpdateFailedPasswordCount(Nullable<long> userNo, Nullable<byte> failedPasswordCount, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var failedPasswordCountParameter = failedPasswordCount.HasValue ?
                new ObjectParameter("failedPasswordCount", failedPasswordCount) :
                new ObjectParameter("failedPasswordCount", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateFailedPasswordCount", userNoParameter, failedPasswordCountParameter, symNo);
        }
    
        public virtual int uspUpdateGatewayServerStatus(Nullable<byte> gatewayServerNo, Nullable<byte> status)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGatewayServerStatus", gatewayServerNoParameter, statusParameter);
        }
    
        public virtual int uspUpdateGatewayServerStatusByAdmin(Nullable<byte> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGatewayServerStatusByAdmin", statusParameter);
        }
    
        public virtual int uspUpdateGatewayServerTime__XXX(Nullable<byte> gatewayServerNo)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGatewayServerTime__XXX", gatewayServerNoParameter);
        }
    
        public virtual int uspUpdateItemSubGroup(Nullable<int> itemSubGroupKey, string itemList, ObjectParameter symNo)
        {
            var itemSubGroupKeyParameter = itemSubGroupKey.HasValue ?
                new ObjectParameter("itemSubGroupKey", itemSubGroupKey) :
                new ObjectParameter("itemSubGroupKey", typeof(int));
    
            var itemListParameter = itemList != null ?
                new ObjectParameter("itemList", itemList) :
                new ObjectParameter("itemList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateItemSubGroup", itemSubGroupKeyParameter, itemListParameter, symNo);
        }
    
        public virtual int uspUpdateLoginDateBriefCharacterInformation(Nullable<long> userNo, Nullable<short> worldNo, Nullable<long> characterNo, string characterName, Nullable<int> level, Nullable<byte> classType, Nullable<System.DateTime> loginDate, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var classTypeParameter = classType.HasValue ?
                new ObjectParameter("classType", classType) :
                new ObjectParameter("classType", typeof(byte));
    
            var loginDateParameter = loginDate.HasValue ?
                new ObjectParameter("loginDate", loginDate) :
                new ObjectParameter("loginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateLoginDateBriefCharacterInformation", userNoParameter, worldNoParameter, characterNoParameter, characterNameParameter, levelParameter, classTypeParameter, loginDateParameter, symNo);
        }
    
        public virtual int uspUpdateLogoutDateBriefCharacterInformation(Nullable<long> userNo, Nullable<short> worldNo, Nullable<long> characterNo, string characterName, Nullable<int> level, Nullable<byte> classType, Nullable<System.DateTime> logoutDate, Nullable<long> totalPlayTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var classTypeParameter = classType.HasValue ?
                new ObjectParameter("classType", classType) :
                new ObjectParameter("classType", typeof(byte));
    
            var logoutDateParameter = logoutDate.HasValue ?
                new ObjectParameter("logoutDate", logoutDate) :
                new ObjectParameter("logoutDate", typeof(System.DateTime));
    
            var totalPlayTimeParameter = totalPlayTime.HasValue ?
                new ObjectParameter("totalPlayTime", totalPlayTime) :
                new ObjectParameter("totalPlayTime", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateLogoutDateBriefCharacterInformation", userNoParameter, worldNoParameter, characterNoParameter, characterNameParameter, levelParameter, classTypeParameter, logoutDateParameter, totalPlayTimeParameter, symNo);
        }
    
        public virtual int uspUpdatePCRoomLogin(Nullable<long> userNo, Nullable<long> sessionNo, Nullable<long> afterSessionNo, Nullable<byte> status, Nullable<byte> option, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var sessionNoParameter = sessionNo.HasValue ?
                new ObjectParameter("sessionNo", sessionNo) :
                new ObjectParameter("sessionNo", typeof(long));
    
            var afterSessionNoParameter = afterSessionNo.HasValue ?
                new ObjectParameter("afterSessionNo", afterSessionNo) :
                new ObjectParameter("afterSessionNo", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(byte));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("option", option) :
                new ObjectParameter("option", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePCRoomLogin", userNoParameter, sessionNoParameter, afterSessionNoParameter, statusParameter, optionParameter, symNo);
        }
    
        public virtual int uspUpdatePCRoomRequest(Nullable<byte> gatewayServerNo, Nullable<long> userNo, Nullable<byte> requestType, ObjectParameter symNo)
        {
            var gatewayServerNoParameter = gatewayServerNo.HasValue ?
                new ObjectParameter("gatewayServerNo", gatewayServerNo) :
                new ObjectParameter("gatewayServerNo", typeof(byte));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("requestType", requestType) :
                new ObjectParameter("requestType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePCRoomRequest", gatewayServerNoParameter, userNoParameter, requestTypeParameter, symNo);
        }
    
        public virtual int uspUpdatePS4AccessToken(string userId, string accessToken, string ps4UserId, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("accessToken", accessToken) :
                new ObjectParameter("accessToken", typeof(string));
    
            var ps4UserIdParameter = ps4UserId != null ?
                new ObjectParameter("ps4UserId", ps4UserId) :
                new ObjectParameter("ps4UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePS4AccessToken", userIdParameter, accessTokenParameter, ps4UserIdParameter, symNo);
        }
    
        public virtual int uspUpdatePS4CashInfoWorld(string userId, string cashInfoString, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cashInfoStringParameter = cashInfoString != null ?
                new ObjectParameter("cashInfoString", cashInfoString) :
                new ObjectParameter("cashInfoString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePS4CashInfoWorld", userIdParameter, cashInfoStringParameter, symNo);
        }
    
        public virtual int uspUpdateTeenageUserInformation(string userId, Nullable<long> userNo, Nullable<byte> teenAgeType, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var teenAgeTypeParameter = teenAgeType.HasValue ?
                new ObjectParameter("teenAgeType", teenAgeType) :
                new ObjectParameter("teenAgeType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTeenageUserInformation", userIdParameter, userNoParameter, teenAgeTypeParameter, symNo);
        }
    
        public virtual int uspUpdateTradeAuthKey(Nullable<long> userNo, Nullable<System.DateTime> currentTime, ObjectParameter key, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTradeAuthKey", userNoParameter, currentTimeParameter, key, symNo);
        }
    
        public virtual int uspUpdateXboxCashInfoWorld(string userId, string cashInfoString, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cashInfoStringParameter = cashInfoString != null ?
                new ObjectParameter("cashInfoString", cashInfoString) :
                new ObjectParameter("cashInfoString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXboxCashInfoWorld", userIdParameter, cashInfoStringParameter, symNo);
        }
    
        public virtual int uspUploadUserCache(Nullable<long> userNo, byte[] pack, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var packParameter = pack != null ?
                new ObjectParameter("pack", pack) :
                new ObjectParameter("pack", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUploadUserCache", userNoParameter, packParameter, symNo);
        }
    
        public virtual int uspUploadWorldOption(Nullable<long> userNo, Nullable<bool> crossPlayOption, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var crossPlayOptionParameter = crossPlayOption.HasValue ?
                new ObjectParameter("crossPlayOption", crossPlayOption) :
                new ObjectParameter("crossPlayOption", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUploadWorldOption", userNoParameter, crossPlayOptionParameter, symNo);
        }
    
        public virtual int uspWorldTotalPlayTime(Nullable<long> userNo, ObjectParameter playTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWorldTotalPlayTime", userNoParameter, playTime, symNo);
        }
    
        public virtual int usRegisterPaymentPassword(Nullable<long> userNo, string paymentPassword, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var paymentPasswordParameter = paymentPassword != null ?
                new ObjectParameter("paymentPassword", paymentPassword) :
                new ObjectParameter("paymentPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usRegisterPaymentPassword", userNoParameter, paymentPasswordParameter, symNo);
        }
    
        public virtual int uspAccessByTradeWeb(Nullable<long> userNo, ObjectParameter serviceType, ObjectParameter worldNo, ObjectParameter isAdmissionToSpeedServer, ObjectParameter isUpdatePackageBuff, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccessByTradeWeb", userNoParameter, serviceType, worldNo, isAdmissionToSpeedServer, isUpdatePackageBuff, symNo, rv);
        }
    
        public virtual int uspActiveBlockType(Nullable<int> blockCode)
        {
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspActiveBlockType", blockCodeParameter);
        }
    
        public virtual int uspApplyCycleCommand(Nullable<int> worldNo, Nullable<int> serverNo, string commandString, Nullable<byte> intervalType, Nullable<int> interval, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var commandStringParameter = commandString != null ?
                new ObjectParameter("commandString", commandString) :
                new ObjectParameter("commandString", typeof(string));
    
            var intervalTypeParameter = intervalType.HasValue ?
                new ObjectParameter("intervalType", intervalType) :
                new ObjectParameter("intervalType", typeof(byte));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspApplyCycleCommand", worldNoParameter, serverNoParameter, commandStringParameter, intervalTypeParameter, intervalParameter, fromDateParameter, toDateParameter, symNo);
        }
    
        public virtual int uspBlockAllByUserNo(Nullable<long> userNo, Nullable<int> blockCode, string blockMemo, Nullable<long> requesterUserNo, Nullable<int> worldNo, Nullable<int> nationCode, Nullable<bool> oper1, Nullable<bool> oper2, Nullable<bool> oper3, Nullable<bool> oper4, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            var requesterUserNoParameter = requesterUserNo.HasValue ?
                new ObjectParameter("requesterUserNo", requesterUserNo) :
                new ObjectParameter("requesterUserNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var oper1Parameter = oper1.HasValue ?
                new ObjectParameter("oper1", oper1) :
                new ObjectParameter("oper1", typeof(bool));
    
            var oper2Parameter = oper2.HasValue ?
                new ObjectParameter("oper2", oper2) :
                new ObjectParameter("oper2", typeof(bool));
    
            var oper3Parameter = oper3.HasValue ?
                new ObjectParameter("oper3", oper3) :
                new ObjectParameter("oper3", typeof(bool));
    
            var oper4Parameter = oper4.HasValue ?
                new ObjectParameter("oper4", oper4) :
                new ObjectParameter("oper4", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBlockAllByUserNo", userNoParameter, blockCodeParameter, blockMemoParameter, requesterUserNoParameter, worldNoParameter, nationCodeParameter, oper1Parameter, oper2Parameter, oper3Parameter, oper4Parameter, symNo);
        }
    
        public virtual int uspBlockUserByUserNo(Nullable<long> userNo, Nullable<int> blockCode, string blockMemo, Nullable<long> requesterUserNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            var requesterUserNoParameter = requesterUserNo.HasValue ?
                new ObjectParameter("requesterUserNo", requesterUserNo) :
                new ObjectParameter("requesterUserNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBlockUserByUserNo", userNoParameter, blockCodeParameter, blockMemoParameter, requesterUserNoParameter, symNo);
        }
    
        public virtual int uspBlockUserByUserNo_XXX(Nullable<long> userNo, Nullable<int> blockCode, string blockMemo, Nullable<long> requesterUserNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            var requesterUserNoParameter = requesterUserNo.HasValue ?
                new ObjectParameter("requesterUserNo", requesterUserNo) :
                new ObjectParameter("requesterUserNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBlockUserByUserNo_XXX", userNoParameter, blockCodeParameter, blockMemoParameter, requesterUserNoParameter, symNo);
        }
    
        public virtual int uspBlockUserByUserNoMacAddress(Nullable<long> userNo, Nullable<int> blockDurationTime, Nullable<int> blockCode, string blockMemo, Nullable<long> requesterUserNo, Nullable<bool> isMacDelete, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var blockDurationTimeParameter = blockDurationTime.HasValue ?
                new ObjectParameter("blockDurationTime", blockDurationTime) :
                new ObjectParameter("blockDurationTime", typeof(int));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            var requesterUserNoParameter = requesterUserNo.HasValue ?
                new ObjectParameter("requesterUserNo", requesterUserNo) :
                new ObjectParameter("requesterUserNo", typeof(long));
    
            var isMacDeleteParameter = isMacDelete.HasValue ?
                new ObjectParameter("isMacDelete", isMacDelete) :
                new ObjectParameter("isMacDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBlockUserByUserNoMacAddress", userNoParameter, blockDurationTimeParameter, blockCodeParameter, blockMemoParameter, requesterUserNoParameter, isMacDeleteParameter, symNo);
        }
    
        public virtual int uspChangeCharacterLevelWORLD(Nullable<long> characterNo, Nullable<int> level, ObjectParameter symNo)
        {
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangeCharacterLevelWORLD", characterNoParameter, levelParameter, symNo);
        }
    
        public virtual int uspCheckAndRegisterUniqueName1(Nullable<int> limitCount, Nullable<long> variousNo, Nullable<byte> nameType, string name, Nullable<short> worldNo, ObjectParameter symNo)
        {
            var limitCountParameter = limitCount.HasValue ?
                new ObjectParameter("limitCount", limitCount) :
                new ObjectParameter("limitCount", typeof(int));
    
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var nameTypeParameter = nameType.HasValue ?
                new ObjectParameter("nameType", nameType) :
                new ObjectParameter("nameType", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAndRegisterUniqueName1", limitCountParameter, variousNoParameter, nameTypeParameter, nameParameter, worldNoParameter, symNo);
        }
    
        public virtual int uspCheckAndRegistUniqueNameInWorld_XXX(Nullable<long> variousNo, Nullable<int> nameChangeType, string newName, ObjectParameter symNo)
        {
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var nameChangeTypeParameter = nameChangeType.HasValue ?
                new ObjectParameter("nameChangeType", nameChangeType) :
                new ObjectParameter("nameChangeType", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAndRegistUniqueNameInWorld_XXX", variousNoParameter, nameChangeTypeParameter, newNameParameter, symNo);
        }
    
        public virtual int uspCheckAuthKey1(Nullable<long> userNo, string certifeidKey, ObjectParameter requestDate, ObjectParameter isAdmissionToSpeedServer, ObjectParameter isUpdatePackageBuff, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var certifeidKeyParameter = certifeidKey != null ?
                new ObjectParameter("certifeidKey", certifeidKey) :
                new ObjectParameter("certifeidKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAuthKey1", userNoParameter, certifeidKeyParameter, requestDate, isAdmissionToSpeedServer, isUpdatePackageBuff, symNo, rv);
        }
    
        public virtual int uspCheckLoginAuth(string userNickname, string password, string ipAddress, ObjectParameter userNo, ObjectParameter userId, ObjectParameter symNo)
        {
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckLoginAuth", userNicknameParameter, passwordParameter, ipAddressParameter, userNo, userId, symNo);
        }
    
        public virtual int uspCheckLoginAuth_v3(Nullable<byte> whereType, string userNickname, string password, string ipAddress, ObjectParameter whereNo, ObjectParameter roleGroupNo, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckLoginAuth_v3", whereTypeParameter, userNicknameParameter, passwordParameter, ipAddressParameter, whereNo, roleGroupNo, symNo);
        }
    
        public virtual int uspCheckLoginAuthByNewPW(string userNickname, string password, string ipAddress, ObjectParameter userNo, ObjectParameter userId, ObjectParameter symNo)
        {
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckLoginAuthByNewPW", userNicknameParameter, passwordParameter, ipAddressParameter, userNo, userId, symNo);
        }
    
        public virtual int uspDelCharNameChangeWorld(Nullable<long> characterNo, string userId, string bfCharactername, string afCharacterName, ObjectParameter symNo)
        {
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var bfCharacternameParameter = bfCharactername != null ?
                new ObjectParameter("bfCharactername", bfCharactername) :
                new ObjectParameter("bfCharactername", typeof(string));
    
            var afCharacterNameParameter = afCharacterName != null ?
                new ObjectParameter("afCharacterName", afCharacterName) :
                new ObjectParameter("afCharacterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDelCharNameChangeWorld", characterNoParameter, userIdParameter, bfCharacternameParameter, afCharacterNameParameter, symNo);
        }
    
        public virtual int uspDeleteAccessibleServerInformation(Nullable<long> userNo, Nullable<short> worldNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteAccessibleServerInformation", userNoParameter, worldNoParameter, symNo);
        }
    
        public virtual int uspDeleteBlockType(Nullable<int> blockCode)
        {
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteBlockType", blockCodeParameter);
        }
    
        public virtual int uspDeleteLeaveUserWorld(ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteLeaveUserWorld", rv);
        }
    
        public virtual int uspDeleteRequestedNameChangeInWorld(string name, Nullable<int> nameType, ObjectParameter symNo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var nameTypeParameter = nameType.HasValue ?
                new ObjectParameter("nameType", nameType) :
                new ObjectParameter("nameType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteRequestedNameChangeInWorld", nameParameter, nameTypeParameter, symNo);
        }
    
        public virtual int uspDeleteReserveCommand(Nullable<long> commandNo, ObjectParameter symNo)
        {
            var commandNoParameter = commandNo.HasValue ?
                new ObjectParameter("commandNo", commandNo) :
                new ObjectParameter("commandNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteReserveCommand", commandNoParameter, symNo);
        }
    
        public virtual int uspDeleteRoleGroupMemberAllIpOasis(Nullable<byte> whereType, Nullable<long> whereNo, Nullable<byte> ip_A, Nullable<byte> ip_B, Nullable<byte> ip_C, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var ip_AParameter = ip_A.HasValue ?
                new ObjectParameter("ip_A", ip_A) :
                new ObjectParameter("ip_A", typeof(byte));
    
            var ip_BParameter = ip_B.HasValue ?
                new ObjectParameter("ip_B", ip_B) :
                new ObjectParameter("ip_B", typeof(byte));
    
            var ip_CParameter = ip_C.HasValue ?
                new ObjectParameter("ip_C", ip_C) :
                new ObjectParameter("ip_C", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteRoleGroupMemberAllIpOasis", whereTypeParameter, whereNoParameter, ip_AParameter, ip_BParameter, ip_CParameter, symNo);
        }
    
        public virtual int uspDeleteRoleOasis(Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteRoleOasis", roleNoParameter, symNo);
        }
    
        public virtual int uspDeleteServerChannelChatInformation(Nullable<long> roomNo)
        {
            var roomNoParameter = roomNo.HasValue ?
                new ObjectParameter("roomNo", roomNo) :
                new ObjectParameter("roomNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerChannelChatInformation", roomNoParameter);
        }
    
        public virtual int uspDeleteServerDataCRC(Nullable<long> serverDataCRC, Nullable<int> serverVersion, ObjectParameter symNo)
        {
            var serverDataCRCParameter = serverDataCRC.HasValue ?
                new ObjectParameter("serverDataCRC", serverDataCRC) :
                new ObjectParameter("serverDataCRC", typeof(long));
    
            var serverVersionParameter = serverVersion.HasValue ?
                new ObjectParameter("serverVersion", serverVersion) :
                new ObjectParameter("serverVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerDataCRC", serverDataCRCParameter, serverVersionParameter, symNo);
        }
    
        public virtual int uspDeleteServerExpPreset(string savePresetName, Nullable<short> serverNo)
        {
            var savePresetNameParameter = savePresetName != null ?
                new ObjectParameter("savePresetName", savePresetName) :
                new ObjectParameter("savePresetName", typeof(string));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerExpPreset", savePresetNameParameter, serverNoParameter);
        }
    
        public virtual int uspDeleteServerExpSetting(string savePresetName, ObjectParameter symNo)
        {
            var savePresetNameParameter = savePresetName != null ?
                new ObjectParameter("savePresetName", savePresetName) :
                new ObjectParameter("savePresetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerExpSetting", savePresetNameParameter, symNo);
        }
    
        public virtual int uspDeleteServerFamilyInformation(Nullable<short> toServerNo)
        {
            var toServerNoParameter = toServerNo.HasValue ?
                new ObjectParameter("toServerNo", toServerNo) :
                new ObjectParameter("toServerNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerFamilyInformation", toServerNoParameter);
        }
    
        public virtual int uspDeleteServerFromGroup(string serverGroup, Nullable<int> serverNo)
        {
            var serverGroupParameter = serverGroup != null ?
                new ObjectParameter("serverGroup", serverGroup) :
                new ObjectParameter("serverGroup", typeof(string));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerFromGroup", serverGroupParameter, serverNoParameter);
        }
    
        public virtual int uspDeleteServerInformationPreset(string presetName)
        {
            var presetNameParameter = presetName != null ?
                new ObjectParameter("presetName", presetName) :
                new ObjectParameter("presetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerInformationPreset", presetNameParameter);
        }
    
        public virtual int uspDeleteServerInstanceFieldInformation(Nullable<short> serverNo, Nullable<short> instanceFieldType, Nullable<short> instanceFieldMode, Nullable<short> instanceFieldMapKey)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var instanceFieldTypeParameter = instanceFieldType.HasValue ?
                new ObjectParameter("instanceFieldType", instanceFieldType) :
                new ObjectParameter("instanceFieldType", typeof(short));
    
            var instanceFieldModeParameter = instanceFieldMode.HasValue ?
                new ObjectParameter("instanceFieldMode", instanceFieldMode) :
                new ObjectParameter("instanceFieldMode", typeof(short));
    
            var instanceFieldMapKeyParameter = instanceFieldMapKey.HasValue ?
                new ObjectParameter("instanceFieldMapKey", instanceFieldMapKey) :
                new ObjectParameter("instanceFieldMapKey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteServerInstanceFieldInformation", serverNoParameter, instanceFieldTypeParameter, instanceFieldModeParameter, instanceFieldMapKeyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspExecNameChange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspExecNameChange");
        }
    
        public virtual int uspExecNameExChange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspExecNameExChange");
        }
    
        public virtual ObjectResult<uspGetAllBlockTypeList_Result> uspGetAllBlockTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllBlockTypeList_Result>("uspGetAllBlockTypeList");
        }
    
        public virtual ObjectResult<uspGetBlockListForPublisher_Result> uspGetBlockListForPublisher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockListForPublisher_Result>("uspGetBlockListForPublisher");
        }
    
        public virtual ObjectResult<uspGetBlockTypeByBlockCode_Result> uspGetBlockTypeByBlockCode(Nullable<int> blockCode)
        {
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockTypeByBlockCode_Result>("uspGetBlockTypeByBlockCode", blockCodeParameter);
        }
    
        public virtual ObjectResult<uspGetBlockTypeList_Result> uspGetBlockTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockTypeList_Result>("uspGetBlockTypeList");
        }
    
        public virtual ObjectResult<uspGetBlockUserByBlockCode_Result> uspGetBlockUserByBlockCode(Nullable<int> blockCode)
        {
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockUserByBlockCode_Result>("uspGetBlockUserByBlockCode", blockCodeParameter);
        }
    
        public virtual ObjectResult<uspGetBlockUserByRegisterDate_Result> uspGetBlockUserByRegisterDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockUserByRegisterDate_Result>("uspGetBlockUserByRegisterDate", startDateParameter, endDateParameter, symNo);
        }
    
        public virtual ObjectResult<uspGetBlockUserByUserNo_Result> uspGetBlockUserByUserNo(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockUserByUserNo_Result>("uspGetBlockUserByUserNo", userNoParameter, symNo);
        }
    
        public virtual ObjectResult<uspGetChangeNameDelay_Result> uspGetChangeNameDelay(string name, Nullable<byte> type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetChangeNameDelay_Result>("uspGetChangeNameDelay", nameParameter, typeParameter);
        }
    
        public virtual int uspGetDetailTicket(Nullable<long> ticketNo, ObjectParameter worldNo, ObjectParameter userId, ObjectParameter characterName, ObjectParameter gmUserNickname, ObjectParameter requestType, ObjectParameter requestList, ObjectParameter reason, ObjectParameter ticketState, ObjectParameter symNo)
        {
            var ticketNoParameter = ticketNo.HasValue ?
                new ObjectParameter("ticketNo", ticketNo) :
                new ObjectParameter("ticketNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetDetailTicket", ticketNoParameter, worldNo, userId, characterName, gmUserNickname, requestType, requestList, reason, ticketState, symNo);
        }
    
        public virtual ObjectResult<uspGetNewOrReturnUser_Result> uspGetNewOrReturnUser(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetNewOrReturnUser_Result>("uspGetNewOrReturnUser", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetOperationTicket_Result> uspGetOperationTicket(Nullable<long> gmUserNo, Nullable<byte> ticketState, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> ticketNo)
        {
            var gmUserNoParameter = gmUserNo.HasValue ?
                new ObjectParameter("gmUserNo", gmUserNo) :
                new ObjectParameter("gmUserNo", typeof(long));
    
            var ticketStateParameter = ticketState.HasValue ?
                new ObjectParameter("ticketState", ticketState) :
                new ObjectParameter("ticketState", typeof(byte));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var ticketNoParameter = ticketNo.HasValue ?
                new ObjectParameter("ticketNo", ticketNo) :
                new ObjectParameter("ticketNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetOperationTicket_Result>("uspGetOperationTicket", gmUserNoParameter, ticketStateParameter, startDateParameter, endDateParameter, ticketNoParameter);
        }
    
        public virtual ObjectResult<uspGetProhibitedWord_Result> uspGetProhibitedWord()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProhibitedWord_Result>("uspGetProhibitedWord");
        }
    
        public virtual ObjectResult<uspGetReportNegativUserLog_Result> uspGetReportNegativUserLog(Nullable<byte> searchType, string searchText, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("searchType", searchType) :
                new ObjectParameter("searchType", typeof(byte));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReportNegativUserLog_Result>("uspGetReportNegativUserLog", searchTypeParameter, searchTextParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspGetReportNegativUserLogForSha_Result> uspGetReportNegativUserLogForSha(Nullable<byte> searchType, string searchText, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("searchType", searchType) :
                new ObjectParameter("searchType", typeof(byte));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReportNegativUserLogForSha_Result>("uspGetReportNegativUserLogForSha", searchTypeParameter, searchTextParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspGetUserId(Nullable<long> userNo, ObjectParameter userId, ObjectParameter resultCode, ObjectParameter resultMsg)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUserId", userNoParameter, userId, resultCode, resultMsg);
        }
    
        public virtual ObjectResult<uspGetUserInfoByUserId_Result> uspGetUserInfoByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserInfoByUserId_Result>("uspGetUserInfoByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> uspGetUserPasswordFailedCount(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspGetUserPasswordFailedCount", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetUserRoleGroupNo_Result> uspGetUserRoleGroupNo(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserRoleGroupNo_Result>("uspGetUserRoleGroupNo", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetUserRoleList_Result> uspGetUserRoleList(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserRoleList_Result>("uspGetUserRoleList", userNoParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> uspGetUserRoleListOasis(Nullable<byte> whereType, Nullable<long> whereNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspGetUserRoleListOasis", whereTypeParameter, whereNoParameter);
        }
    
        public virtual int uspInsertAdminCommandStatus(Nullable<long> commandNo, ObjectParameter symNo)
        {
            var commandNoParameter = commandNo.HasValue ?
                new ObjectParameter("commandNo", commandNo) :
                new ObjectParameter("commandNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAdminCommandStatus", commandNoParameter, symNo);
        }
    
        public virtual int uspInsertBlockType(Nullable<int> blockCode, Nullable<long> duration, string blockReason, string memo)
        {
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(long));
    
            var blockReasonParameter = blockReason != null ?
                new ObjectParameter("blockReason", blockReason) :
                new ObjectParameter("blockReason", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBlockType", blockCodeParameter, durationParameter, blockReasonParameter, memoParameter);
        }
    
        public virtual int uspInsertCommand_XXX(Nullable<int> worldNo, string commandString, Nullable<System.DateTime> reserveDate, Nullable<bool> isCycleCommand, Nullable<long> interval, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var commandStringParameter = commandString != null ?
                new ObjectParameter("commandString", commandString) :
                new ObjectParameter("commandString", typeof(string));
    
            var reserveDateParameter = reserveDate.HasValue ?
                new ObjectParameter("reserveDate", reserveDate) :
                new ObjectParameter("reserveDate", typeof(System.DateTime));
    
            var isCycleCommandParameter = isCycleCommand.HasValue ?
                new ObjectParameter("isCycleCommand", isCycleCommand) :
                new ObjectParameter("isCycleCommand", typeof(bool));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(long));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommand_XXX", worldNoParameter, commandStringParameter, reserveDateParameter, isCycleCommandParameter, intervalParameter, endDateParameter, symNo);
        }
    
        public virtual int uspInsertCommandByApi(Nullable<long> accountNo, ObjectParameter symNo)
        {
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommandByApi", accountNoParameter, symNo);
        }
    
        public virtual int uspInsertCommandByWebAdminTool(Nullable<int> worldNo, string commandString, Nullable<System.DateTime> reserveDate, Nullable<bool> isCycleCommand, Nullable<long> interval, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var commandStringParameter = commandString != null ?
                new ObjectParameter("commandString", commandString) :
                new ObjectParameter("commandString", typeof(string));
    
            var reserveDateParameter = reserveDate.HasValue ?
                new ObjectParameter("reserveDate", reserveDate) :
                new ObjectParameter("reserveDate", typeof(System.DateTime));
    
            var isCycleCommandParameter = isCycleCommand.HasValue ?
                new ObjectParameter("isCycleCommand", isCycleCommand) :
                new ObjectParameter("isCycleCommand", typeof(bool));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(long));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommandByWebAdminTool", worldNoParameter, commandStringParameter, reserveDateParameter, isCycleCommandParameter, intervalParameter, endDateParameter, symNo);
        }
    
        public virtual int uspInsertCommandByWebAdminTool_XXX(Nullable<int> worldNo, string commandString, Nullable<System.DateTime> reserveDate, Nullable<bool> isCycleCommand, Nullable<long> interval, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var commandStringParameter = commandString != null ?
                new ObjectParameter("commandString", commandString) :
                new ObjectParameter("commandString", typeof(string));
    
            var reserveDateParameter = reserveDate.HasValue ?
                new ObjectParameter("reserveDate", reserveDate) :
                new ObjectParameter("reserveDate", typeof(System.DateTime));
    
            var isCycleCommandParameter = isCycleCommand.HasValue ?
                new ObjectParameter("isCycleCommand", isCycleCommand) :
                new ObjectParameter("isCycleCommand", typeof(bool));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(long));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommandByWebAdminTool_XXX", worldNoParameter, commandStringParameter, reserveDateParameter, isCycleCommandParameter, intervalParameter, endDateParameter, symNo);
        }
    
        public virtual int uspInsertCommandByWorldTradeMarket(string commandString, Nullable<System.DateTime> reserveDate, ObjectParameter symNo)
        {
            var commandStringParameter = commandString != null ?
                new ObjectParameter("commandString", commandString) :
                new ObjectParameter("commandString", typeof(string));
    
            var reserveDateParameter = reserveDate.HasValue ?
                new ObjectParameter("reserveDate", reserveDate) :
                new ObjectParameter("reserveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommandByWorldTradeMarket", commandStringParameter, reserveDateParameter, symNo);
        }
    
        public virtual int uspInsertCommandInServerGroupByWebAdmin(Nullable<int> worldNo, string groupNo, string commandString, Nullable<System.DateTime> reserveDate, Nullable<bool> isCycleCommand, Nullable<long> interval, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));
    
            var groupNoParameter = groupNo != null ?
                new ObjectParameter("groupNo", groupNo) :
                new ObjectParameter("groupNo", typeof(string));
    
            var commandStringParameter = commandString != null ?
                new ObjectParameter("commandString", commandString) :
                new ObjectParameter("commandString", typeof(string));
    
            var reserveDateParameter = reserveDate.HasValue ?
                new ObjectParameter("reserveDate", reserveDate) :
                new ObjectParameter("reserveDate", typeof(System.DateTime));
    
            var isCycleCommandParameter = isCycleCommand.HasValue ?
                new ObjectParameter("isCycleCommand", isCycleCommand) :
                new ObjectParameter("isCycleCommand", typeof(bool));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(long));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommandInServerGroupByWebAdmin", worldNoParameter, groupNoParameter, commandStringParameter, reserveDateParameter, isCycleCommandParameter, intervalParameter, endDateParameter, symNo);
        }
    
        public virtual int uspInsertCommandOasis(Nullable<int> paramInt0, Nullable<int> paramInt1, Nullable<int> paramInt2, Nullable<byte> paramTinyInt0, Nullable<byte> paramTinyInt1, Nullable<byte> paramTinyInt2, Nullable<short> paramSmallInt0, Nullable<short> paramSmallInt1, Nullable<short> paramSmallInt2, Nullable<long> paramBigInt0, Nullable<long> paramBigInt1, Nullable<long> paramBigInt2, string paramNvarchar0, string paramNvarchar1, string paramVarchar0, string paramVarchar1, Nullable<System.DateTime> paramDateTime0, Nullable<System.DateTime> paramDateTime1, Nullable<System.DateTime> paramDateTime2, Nullable<System.DateTime> paramDateTime20, Nullable<System.DateTime> paramDateTime21, Nullable<System.DateTime> paramDateTime22, Nullable<bool> paramBit0, Nullable<bool> paramBit1, ObjectParameter symNo)
        {
            var paramInt0Parameter = paramInt0.HasValue ?
                new ObjectParameter("paramInt0", paramInt0) :
                new ObjectParameter("paramInt0", typeof(int));
    
            var paramInt1Parameter = paramInt1.HasValue ?
                new ObjectParameter("paramInt1", paramInt1) :
                new ObjectParameter("paramInt1", typeof(int));
    
            var paramInt2Parameter = paramInt2.HasValue ?
                new ObjectParameter("paramInt2", paramInt2) :
                new ObjectParameter("paramInt2", typeof(int));
    
            var paramTinyInt0Parameter = paramTinyInt0.HasValue ?
                new ObjectParameter("paramTinyInt0", paramTinyInt0) :
                new ObjectParameter("paramTinyInt0", typeof(byte));
    
            var paramTinyInt1Parameter = paramTinyInt1.HasValue ?
                new ObjectParameter("paramTinyInt1", paramTinyInt1) :
                new ObjectParameter("paramTinyInt1", typeof(byte));
    
            var paramTinyInt2Parameter = paramTinyInt2.HasValue ?
                new ObjectParameter("paramTinyInt2", paramTinyInt2) :
                new ObjectParameter("paramTinyInt2", typeof(byte));
    
            var paramSmallInt0Parameter = paramSmallInt0.HasValue ?
                new ObjectParameter("paramSmallInt0", paramSmallInt0) :
                new ObjectParameter("paramSmallInt0", typeof(short));
    
            var paramSmallInt1Parameter = paramSmallInt1.HasValue ?
                new ObjectParameter("paramSmallInt1", paramSmallInt1) :
                new ObjectParameter("paramSmallInt1", typeof(short));
    
            var paramSmallInt2Parameter = paramSmallInt2.HasValue ?
                new ObjectParameter("paramSmallInt2", paramSmallInt2) :
                new ObjectParameter("paramSmallInt2", typeof(short));
    
            var paramBigInt0Parameter = paramBigInt0.HasValue ?
                new ObjectParameter("paramBigInt0", paramBigInt0) :
                new ObjectParameter("paramBigInt0", typeof(long));
    
            var paramBigInt1Parameter = paramBigInt1.HasValue ?
                new ObjectParameter("paramBigInt1", paramBigInt1) :
                new ObjectParameter("paramBigInt1", typeof(long));
    
            var paramBigInt2Parameter = paramBigInt2.HasValue ?
                new ObjectParameter("paramBigInt2", paramBigInt2) :
                new ObjectParameter("paramBigInt2", typeof(long));
    
            var paramNvarchar0Parameter = paramNvarchar0 != null ?
                new ObjectParameter("paramNvarchar0", paramNvarchar0) :
                new ObjectParameter("paramNvarchar0", typeof(string));
    
            var paramNvarchar1Parameter = paramNvarchar1 != null ?
                new ObjectParameter("paramNvarchar1", paramNvarchar1) :
                new ObjectParameter("paramNvarchar1", typeof(string));
    
            var paramVarchar0Parameter = paramVarchar0 != null ?
                new ObjectParameter("paramVarchar0", paramVarchar0) :
                new ObjectParameter("paramVarchar0", typeof(string));
    
            var paramVarchar1Parameter = paramVarchar1 != null ?
                new ObjectParameter("paramVarchar1", paramVarchar1) :
                new ObjectParameter("paramVarchar1", typeof(string));
    
            var paramDateTime0Parameter = paramDateTime0.HasValue ?
                new ObjectParameter("paramDateTime0", paramDateTime0) :
                new ObjectParameter("paramDateTime0", typeof(System.DateTime));
    
            var paramDateTime1Parameter = paramDateTime1.HasValue ?
                new ObjectParameter("paramDateTime1", paramDateTime1) :
                new ObjectParameter("paramDateTime1", typeof(System.DateTime));
    
            var paramDateTime2Parameter = paramDateTime2.HasValue ?
                new ObjectParameter("paramDateTime2", paramDateTime2) :
                new ObjectParameter("paramDateTime2", typeof(System.DateTime));
    
            var paramDateTime20Parameter = paramDateTime20.HasValue ?
                new ObjectParameter("paramDateTime20", paramDateTime20) :
                new ObjectParameter("paramDateTime20", typeof(System.DateTime));
    
            var paramDateTime21Parameter = paramDateTime21.HasValue ?
                new ObjectParameter("paramDateTime21", paramDateTime21) :
                new ObjectParameter("paramDateTime21", typeof(System.DateTime));
    
            var paramDateTime22Parameter = paramDateTime22.HasValue ?
                new ObjectParameter("paramDateTime22", paramDateTime22) :
                new ObjectParameter("paramDateTime22", typeof(System.DateTime));
    
            var paramBit0Parameter = paramBit0.HasValue ?
                new ObjectParameter("paramBit0", paramBit0) :
                new ObjectParameter("paramBit0", typeof(bool));
    
            var paramBit1Parameter = paramBit1.HasValue ?
                new ObjectParameter("paramBit1", paramBit1) :
                new ObjectParameter("paramBit1", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCommandOasis", paramInt0Parameter, paramInt1Parameter, paramInt2Parameter, paramTinyInt0Parameter, paramTinyInt1Parameter, paramTinyInt2Parameter, paramSmallInt0Parameter, paramSmallInt1Parameter, paramSmallInt2Parameter, paramBigInt0Parameter, paramBigInt1Parameter, paramBigInt2Parameter, paramNvarchar0Parameter, paramNvarchar1Parameter, paramVarchar0Parameter, paramVarchar1Parameter, paramDateTime0Parameter, paramDateTime1Parameter, paramDateTime2Parameter, paramDateTime20Parameter, paramDateTime21Parameter, paramDateTime22Parameter, paramBit0Parameter, paramBit1Parameter, symNo);
        }
    
        public virtual int uspInsertConfirmRequest(string characterName, string userId, Nullable<byte> requestType, string requestList, string reason, Nullable<long> gmUserNo, Nullable<byte> priority, Nullable<byte> ticketState, ObjectParameter ticketNo, ObjectParameter symNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("requestType", requestType) :
                new ObjectParameter("requestType", typeof(byte));
    
            var requestListParameter = requestList != null ?
                new ObjectParameter("requestList", requestList) :
                new ObjectParameter("requestList", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var gmUserNoParameter = gmUserNo.HasValue ?
                new ObjectParameter("gmUserNo", gmUserNo) :
                new ObjectParameter("gmUserNo", typeof(long));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(byte));
    
            var ticketStateParameter = ticketState.HasValue ?
                new ObjectParameter("ticketState", ticketState) :
                new ObjectParameter("ticketState", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertConfirmRequest", characterNameParameter, userIdParameter, requestTypeParameter, requestListParameter, reasonParameter, gmUserNoParameter, priorityParameter, ticketStateParameter, ticketNo, symNo);
        }
    
        public virtual int uspInsertPassTicket(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertPassTicket", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspInsertPS4CashProductRefundInfo(string userId, string entitlementId, Nullable<long> refundCount, Nullable<bool> isProductCheck, Nullable<byte> nationType, ObjectParameter refundNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var entitlementIdParameter = entitlementId != null ?
                new ObjectParameter("entitlementId", entitlementId) :
                new ObjectParameter("entitlementId", typeof(string));
    
            var refundCountParameter = refundCount.HasValue ?
                new ObjectParameter("refundCount", refundCount) :
                new ObjectParameter("refundCount", typeof(long));
    
            var isProductCheckParameter = isProductCheck.HasValue ?
                new ObjectParameter("isProductCheck", isProductCheck) :
                new ObjectParameter("isProductCheck", typeof(bool));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertPS4CashProductRefundInfo", userIdParameter, entitlementIdParameter, refundCountParameter, isProductCheckParameter, nationTypeParameter, refundNo);
        }
    
        public virtual int uspInsertRoleGroup1(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroup1", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspInsertRoleGroupMemberAllIpOasis(Nullable<byte> whereType, Nullable<long> whereNo, Nullable<byte> ip_A, Nullable<byte> ip_B, Nullable<byte> ip_C, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var ip_AParameter = ip_A.HasValue ?
                new ObjectParameter("ip_A", ip_A) :
                new ObjectParameter("ip_A", typeof(byte));
    
            var ip_BParameter = ip_B.HasValue ?
                new ObjectParameter("ip_B", ip_B) :
                new ObjectParameter("ip_B", typeof(byte));
    
            var ip_CParameter = ip_C.HasValue ?
                new ObjectParameter("ip_C", ip_C) :
                new ObjectParameter("ip_C", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroupMemberAllIpOasis", whereTypeParameter, whereNoParameter, ip_AParameter, ip_BParameter, ip_CParameter, symNo);
        }
    
        public virtual int uspInsertRoleGroupMemberLoginIpOasis(Nullable<byte> whereType, Nullable<long> whereNo, string ipAddress, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroupMemberLoginIpOasis", whereTypeParameter, whereNoParameter, ipAddressParameter, symNo);
        }
    
        public virtual ObjectResult<uspInsertRoleGroupMemberOasis_Result> uspInsertRoleGroupMemberOasis(Nullable<byte> whereType, Nullable<long> whereNo, Nullable<byte> roleGroupNo, string password, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsertRoleGroupMemberOasis_Result>("uspInsertRoleGroupMemberOasis", whereTypeParameter, whereNoParameter, roleGroupNoParameter, passwordParameter, symNo);
        }
    
        public virtual ObjectResult<uspInsertRoleGroupMemberWithWebAdminTool_Result> uspInsertRoleGroupMemberWithWebAdminTool(Nullable<long> userNo, Nullable<byte> roleGroupNo, string macAddress, string ipAddress, string password, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsertRoleGroupMemberWithWebAdminTool_Result>("uspInsertRoleGroupMemberWithWebAdminTool", userNoParameter, roleGroupNoParameter, macAddressParameter, ipAddressParameter, passwordParameter, symNo);
        }
    
        public virtual int uspInsertRoleGroupName(Nullable<byte> roleGroupNo, string roleGroupName, string roleGroupMemo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleGroupNameParameter = roleGroupName != null ?
                new ObjectParameter("roleGroupName", roleGroupName) :
                new ObjectParameter("roleGroupName", typeof(string));
    
            var roleGroupMemoParameter = roleGroupMemo != null ?
                new ObjectParameter("roleGroupMemo", roleGroupMemo) :
                new ObjectParameter("roleGroupMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroupName", roleGroupNoParameter, roleGroupNameParameter, roleGroupMemoParameter, symNo);
        }
    
        public virtual int uspInsertRoleGroupNameOasis(Nullable<byte> roleGroupNo, string roleGroupName, string roleGroupMemo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleGroupNameParameter = roleGroupName != null ?
                new ObjectParameter("roleGroupName", roleGroupName) :
                new ObjectParameter("roleGroupName", typeof(string));
    
            var roleGroupMemoParameter = roleGroupMemo != null ?
                new ObjectParameter("roleGroupMemo", roleGroupMemo) :
                new ObjectParameter("roleGroupMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroupNameOasis", roleGroupNoParameter, roleGroupNameParameter, roleGroupMemoParameter, symNo);
        }
    
        public virtual int uspInsertRoleGroupOasis(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleGroupOasis", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspInsertRoleOasis(string roleName, ObjectParameter symNo)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRoleOasis", roleNameParameter, symNo);
        }
    
        public virtual int uspInsertServerChannelChatInformation(Nullable<int> orderNo, Nullable<short> serverNo, Nullable<long> roomNo, string roomName, string roomDesc, Nullable<short> maxMemberCount)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var roomNoParameter = roomNo.HasValue ?
                new ObjectParameter("roomNo", roomNo) :
                new ObjectParameter("roomNo", typeof(long));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("roomName", roomName) :
                new ObjectParameter("roomName", typeof(string));
    
            var roomDescParameter = roomDesc != null ?
                new ObjectParameter("roomDesc", roomDesc) :
                new ObjectParameter("roomDesc", typeof(string));
    
            var maxMemberCountParameter = maxMemberCount.HasValue ?
                new ObjectParameter("maxMemberCount", maxMemberCount) :
                new ObjectParameter("maxMemberCount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerChannelChatInformation", orderNoParameter, serverNoParameter, roomNoParameter, roomNameParameter, roomDescParameter, maxMemberCountParameter);
        }
    
        public virtual int uspInsertServerDataCRC(Nullable<long> serverDataCRC, Nullable<int> serverVersion, ObjectParameter symNo)
        {
            var serverDataCRCParameter = serverDataCRC.HasValue ?
                new ObjectParameter("serverDataCRC", serverDataCRC) :
                new ObjectParameter("serverDataCRC", typeof(long));
    
            var serverVersionParameter = serverVersion.HasValue ?
                new ObjectParameter("serverVersion", serverVersion) :
                new ObjectParameter("serverVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerDataCRC", serverDataCRCParameter, serverVersionParameter, symNo);
        }
    
        public virtual int uspInsertServerFamilyInformation(Nullable<bool> isValid, Nullable<short> fromServerNo, Nullable<short> toServerNo)
        {
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("isValid", isValid) :
                new ObjectParameter("isValid", typeof(bool));
    
            var fromServerNoParameter = fromServerNo.HasValue ?
                new ObjectParameter("fromServerNo", fromServerNo) :
                new ObjectParameter("fromServerNo", typeof(short));
    
            var toServerNoParameter = toServerNo.HasValue ?
                new ObjectParameter("toServerNo", toServerNo) :
                new ObjectParameter("toServerNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerFamilyInformation", isValidParameter, fromServerNoParameter, toServerNoParameter);
        }
    
        public virtual int uspInsertServerInformationPreset(string presetName, Nullable<short> serverType, Nullable<bool> isSpareMachine, Nullable<short> startSiegeTerritory, Nullable<bool> doImperialDelivery, Nullable<bool> doImperialProductDelivery, Nullable<bool> dontPvPTendencyDecrease, Nullable<bool> doHorseRaceMatch, Nullable<bool> fixedCharge, Nullable<bool> isLimitedLocalWar, Nullable<bool> isSpeedChannel, Nullable<bool> doCompetitionArsha, Nullable<bool> isBalanceChannel, Nullable<short> isSavageDefence, Nullable<bool> isPcroomChannel, Nullable<bool> isSteamChannel, Nullable<bool> isPremiumChannel, Nullable<short> isGuildBattleChannel, Nullable<bool> isCantPvPChannel, Nullable<bool> isFixedBossSpawn, Nullable<bool> startNationSiege, Nullable<byte> servicePlatformType, Nullable<bool> isSeasonChannel, Nullable<bool> isSeasonNewbieChannel, Nullable<bool> isHadumChannel, Nullable<bool> isEventChannel)
        {
            var presetNameParameter = presetName != null ?
                new ObjectParameter("presetName", presetName) :
                new ObjectParameter("presetName", typeof(string));
    
            var serverTypeParameter = serverType.HasValue ?
                new ObjectParameter("serverType", serverType) :
                new ObjectParameter("serverType", typeof(short));
    
            var isSpareMachineParameter = isSpareMachine.HasValue ?
                new ObjectParameter("isSpareMachine", isSpareMachine) :
                new ObjectParameter("isSpareMachine", typeof(bool));
    
            var startSiegeTerritoryParameter = startSiegeTerritory.HasValue ?
                new ObjectParameter("startSiegeTerritory", startSiegeTerritory) :
                new ObjectParameter("startSiegeTerritory", typeof(short));
    
            var doImperialDeliveryParameter = doImperialDelivery.HasValue ?
                new ObjectParameter("doImperialDelivery", doImperialDelivery) :
                new ObjectParameter("doImperialDelivery", typeof(bool));
    
            var doImperialProductDeliveryParameter = doImperialProductDelivery.HasValue ?
                new ObjectParameter("doImperialProductDelivery", doImperialProductDelivery) :
                new ObjectParameter("doImperialProductDelivery", typeof(bool));
    
            var dontPvPTendencyDecreaseParameter = dontPvPTendencyDecrease.HasValue ?
                new ObjectParameter("dontPvPTendencyDecrease", dontPvPTendencyDecrease) :
                new ObjectParameter("dontPvPTendencyDecrease", typeof(bool));
    
            var doHorseRaceMatchParameter = doHorseRaceMatch.HasValue ?
                new ObjectParameter("doHorseRaceMatch", doHorseRaceMatch) :
                new ObjectParameter("doHorseRaceMatch", typeof(bool));
    
            var fixedChargeParameter = fixedCharge.HasValue ?
                new ObjectParameter("fixedCharge", fixedCharge) :
                new ObjectParameter("fixedCharge", typeof(bool));
    
            var isLimitedLocalWarParameter = isLimitedLocalWar.HasValue ?
                new ObjectParameter("isLimitedLocalWar", isLimitedLocalWar) :
                new ObjectParameter("isLimitedLocalWar", typeof(bool));
    
            var isSpeedChannelParameter = isSpeedChannel.HasValue ?
                new ObjectParameter("isSpeedChannel", isSpeedChannel) :
                new ObjectParameter("isSpeedChannel", typeof(bool));
    
            var doCompetitionArshaParameter = doCompetitionArsha.HasValue ?
                new ObjectParameter("doCompetitionArsha", doCompetitionArsha) :
                new ObjectParameter("doCompetitionArsha", typeof(bool));
    
            var isBalanceChannelParameter = isBalanceChannel.HasValue ?
                new ObjectParameter("isBalanceChannel", isBalanceChannel) :
                new ObjectParameter("isBalanceChannel", typeof(bool));
    
            var isSavageDefenceParameter = isSavageDefence.HasValue ?
                new ObjectParameter("isSavageDefence", isSavageDefence) :
                new ObjectParameter("isSavageDefence", typeof(short));
    
            var isPcroomChannelParameter = isPcroomChannel.HasValue ?
                new ObjectParameter("isPcroomChannel", isPcroomChannel) :
                new ObjectParameter("isPcroomChannel", typeof(bool));
    
            var isSteamChannelParameter = isSteamChannel.HasValue ?
                new ObjectParameter("isSteamChannel", isSteamChannel) :
                new ObjectParameter("isSteamChannel", typeof(bool));
    
            var isPremiumChannelParameter = isPremiumChannel.HasValue ?
                new ObjectParameter("isPremiumChannel", isPremiumChannel) :
                new ObjectParameter("isPremiumChannel", typeof(bool));
    
            var isGuildBattleChannelParameter = isGuildBattleChannel.HasValue ?
                new ObjectParameter("isGuildBattleChannel", isGuildBattleChannel) :
                new ObjectParameter("isGuildBattleChannel", typeof(short));
    
            var isCantPvPChannelParameter = isCantPvPChannel.HasValue ?
                new ObjectParameter("isCantPvPChannel", isCantPvPChannel) :
                new ObjectParameter("isCantPvPChannel", typeof(bool));
    
            var isFixedBossSpawnParameter = isFixedBossSpawn.HasValue ?
                new ObjectParameter("isFixedBossSpawn", isFixedBossSpawn) :
                new ObjectParameter("isFixedBossSpawn", typeof(bool));
    
            var startNationSiegeParameter = startNationSiege.HasValue ?
                new ObjectParameter("startNationSiege", startNationSiege) :
                new ObjectParameter("startNationSiege", typeof(bool));
    
            var servicePlatformTypeParameter = servicePlatformType.HasValue ?
                new ObjectParameter("servicePlatformType", servicePlatformType) :
                new ObjectParameter("servicePlatformType", typeof(byte));
    
            var isSeasonChannelParameter = isSeasonChannel.HasValue ?
                new ObjectParameter("isSeasonChannel", isSeasonChannel) :
                new ObjectParameter("isSeasonChannel", typeof(bool));
    
            var isSeasonNewbieChannelParameter = isSeasonNewbieChannel.HasValue ?
                new ObjectParameter("isSeasonNewbieChannel", isSeasonNewbieChannel) :
                new ObjectParameter("isSeasonNewbieChannel", typeof(bool));
    
            var isHadumChannelParameter = isHadumChannel.HasValue ?
                new ObjectParameter("isHadumChannel", isHadumChannel) :
                new ObjectParameter("isHadumChannel", typeof(bool));
    
            var isEventChannelParameter = isEventChannel.HasValue ?
                new ObjectParameter("isEventChannel", isEventChannel) :
                new ObjectParameter("isEventChannel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerInformationPreset", presetNameParameter, serverTypeParameter, isSpareMachineParameter, startSiegeTerritoryParameter, doImperialDeliveryParameter, doImperialProductDeliveryParameter, dontPvPTendencyDecreaseParameter, doHorseRaceMatchParameter, fixedChargeParameter, isLimitedLocalWarParameter, isSpeedChannelParameter, doCompetitionArshaParameter, isBalanceChannelParameter, isSavageDefenceParameter, isPcroomChannelParameter, isSteamChannelParameter, isPremiumChannelParameter, isGuildBattleChannelParameter, isCantPvPChannelParameter, isFixedBossSpawnParameter, startNationSiegeParameter, servicePlatformTypeParameter, isSeasonChannelParameter, isSeasonNewbieChannelParameter, isHadumChannelParameter, isEventChannelParameter);
        }
    
        public virtual int uspInsertServerInstanceFieldInformation(Nullable<short> serverNo, Nullable<short> instanceFieldType, Nullable<short> instanceFieldMode, Nullable<short> instanceFieldMapKey, Nullable<short> count)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var instanceFieldTypeParameter = instanceFieldType.HasValue ?
                new ObjectParameter("instanceFieldType", instanceFieldType) :
                new ObjectParameter("instanceFieldType", typeof(short));
    
            var instanceFieldModeParameter = instanceFieldMode.HasValue ?
                new ObjectParameter("instanceFieldMode", instanceFieldMode) :
                new ObjectParameter("instanceFieldMode", typeof(short));
    
            var instanceFieldMapKeyParameter = instanceFieldMapKey.HasValue ?
                new ObjectParameter("instanceFieldMapKey", instanceFieldMapKey) :
                new ObjectParameter("instanceFieldMapKey", typeof(short));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerInstanceFieldInformation", serverNoParameter, instanceFieldTypeParameter, instanceFieldModeParameter, instanceFieldMapKeyParameter, countParameter);
        }
    
        public virtual int uspInsertServerToGroup(string serverGroup, Nullable<int> serverNo)
        {
            var serverGroupParameter = serverGroup != null ?
                new ObjectParameter("serverGroup", serverGroup) :
                new ObjectParameter("serverGroup", typeof(string));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertServerToGroup", serverGroupParameter, serverNoParameter);
        }
    
        public virtual int uspInsertTicket_v3(Nullable<byte> requestWhereType, Nullable<long> requestWhereNo, string requestXmlName, string requestDbName, string requestSpName, string requestList, string requestReason, Nullable<byte> requestType, ObjectParameter ticketNo, ObjectParameter symNo)
        {
            var requestWhereTypeParameter = requestWhereType.HasValue ?
                new ObjectParameter("requestWhereType", requestWhereType) :
                new ObjectParameter("requestWhereType", typeof(byte));
    
            var requestWhereNoParameter = requestWhereNo.HasValue ?
                new ObjectParameter("requestWhereNo", requestWhereNo) :
                new ObjectParameter("requestWhereNo", typeof(long));
    
            var requestXmlNameParameter = requestXmlName != null ?
                new ObjectParameter("requestXmlName", requestXmlName) :
                new ObjectParameter("requestXmlName", typeof(string));
    
            var requestDbNameParameter = requestDbName != null ?
                new ObjectParameter("requestDbName", requestDbName) :
                new ObjectParameter("requestDbName", typeof(string));
    
            var requestSpNameParameter = requestSpName != null ?
                new ObjectParameter("requestSpName", requestSpName) :
                new ObjectParameter("requestSpName", typeof(string));
    
            var requestListParameter = requestList != null ?
                new ObjectParameter("requestList", requestList) :
                new ObjectParameter("requestList", typeof(string));
    
            var requestReasonParameter = requestReason != null ?
                new ObjectParameter("requestReason", requestReason) :
                new ObjectParameter("requestReason", typeof(string));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("requestType", requestType) :
                new ObjectParameter("requestType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertTicket_v3", requestWhereTypeParameter, requestWhereNoParameter, requestXmlNameParameter, requestDbNameParameter, requestSpNameParameter, requestListParameter, requestReasonParameter, requestTypeParameter, ticketNo, symNo);
        }
    
        public virtual int uspInsertValidServerInformation(Nullable<short> serverNo, string serverId)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var serverIdParameter = serverId != null ?
                new ObjectParameter("serverId", serverId) :
                new ObjectParameter("serverId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertValidServerInformation", serverNoParameter, serverIdParameter);
        }
    
        public virtual int uspInsertXboxCashProductRefundInfo(string userId, string legacyProductId, Nullable<long> refundCount, Nullable<bool> isProductCheck, Nullable<byte> nationType, ObjectParameter refundNo, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var legacyProductIdParameter = legacyProductId != null ?
                new ObjectParameter("legacyProductId", legacyProductId) :
                new ObjectParameter("legacyProductId", typeof(string));
    
            var refundCountParameter = refundCount.HasValue ?
                new ObjectParameter("refundCount", refundCount) :
                new ObjectParameter("refundCount", typeof(long));
    
            var isProductCheckParameter = isProductCheck.HasValue ?
                new ObjectParameter("isProductCheck", isProductCheck) :
                new ObjectParameter("isProductCheck", typeof(bool));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertXboxCashProductRefundInfo", userIdParameter, legacyProductIdParameter, refundCountParameter, isProductCheckParameter, nationTypeParameter, refundNo, symNo);
        }
    
        public virtual ObjectResult<uspIntervalListCommand_Result> uspIntervalListCommand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspIntervalListCommand_Result>("uspIntervalListCommand");
        }
    
        public virtual int uspIsGameMaster1(Nullable<long> userNo, ObjectParameter isGameMaster, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsGameMaster1", userNoParameter, isGameMaster, symNo, rv);
        }
    
        public virtual ObjectResult<uspListAccessibleServerInformation_Result> uspListAccessibleServerInformation(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListAccessibleServerInformation_Result>("uspListAccessibleServerInformation", userNoParameter);
        }
    
        public virtual ObjectResult<uspListAdminToolCommand_Result> uspListAdminToolCommand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListAdminToolCommand_Result>("uspListAdminToolCommand");
        }
    
        public virtual ObjectResult<uspListBlockedHistory_Result> uspListBlockedHistory(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListBlockedHistory_Result>("uspListBlockedHistory", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListBlockType_Result> uspListBlockType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListBlockType_Result>("uspListBlockType");
        }
    
        public virtual ObjectResult<uspListCommandInfoByWebAdminTool_Result> uspListCommandInfoByWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListCommandInfoByWebAdminTool_Result>("uspListCommandInfoByWebAdminTool", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListContentsOptionsLog_Result> uspListContentsOptionsLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListContentsOptionsLog_Result>("uspListContentsOptionsLog");
        }
    
        public virtual ObjectResult<uspListGmCommandType_Result> uspListGmCommandType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGmCommandType_Result>("uspListGmCommandType");
        }
    
        public virtual ObjectResult<uspListOperationMention_Result> uspListOperationMention()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListOperationMention_Result>("uspListOperationMention");
        }
    
        public virtual ObjectResult<uspListPS4CashInfoWorldWithAdmintool_Result> uspListPS4CashInfoWorldWithAdmintool(string userId, Nullable<byte> nationType)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPS4CashInfoWorldWithAdmintool_Result>("uspListPS4CashInfoWorldWithAdmintool", userIdParameter, nationTypeParameter);
        }
    
        public virtual ObjectResult<uspListPS4CashProductRefundInfo_Result> uspListPS4CashProductRefundInfo(string userId, Nullable<byte> nationType)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPS4CashProductRefundInfo_Result>("uspListPS4CashProductRefundInfo", userIdParameter, nationTypeParameter);
        }
    
        public virtual ObjectResult<uspListPS4InventoryHistory_Result> uspListPS4InventoryHistory(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPS4InventoryHistory_Result>("uspListPS4InventoryHistory", userIdParameter, startDateParameter, endDateParameter, symNo);
        }
    
        public virtual ObjectResult<uspListPS4InventoryHistoryWithProductId_Result> uspListPS4InventoryHistoryWithProductId(string userId, string entitlementId, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var entitlementIdParameter = entitlementId != null ?
                new ObjectParameter("entitlementId", entitlementId) :
                new ObjectParameter("entitlementId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPS4InventoryHistoryWithProductId_Result>("uspListPS4InventoryHistoryWithProductId", userIdParameter, entitlementIdParameter, symNo);
        }
    
        public virtual ObjectResult<uspListRole1_Result> uspListRole1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRole1_Result>("uspListRole1");
        }
    
        public virtual ObjectResult<uspListRoleGroupMember_Result> uspListRoleGroupMember(Nullable<byte> roleGroupNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroupMember_Result>("uspListRoleGroupMember", roleGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListRoleGroupMemberByUserNickname_Result> uspListRoleGroupMemberByUserNickname(string userNickname)
        {
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroupMemberByUserNickname_Result>("uspListRoleGroupMemberByUserNickname", userNicknameParameter);
        }
    
        public virtual ObjectResult<uspListRoleGroupMemberLoginIpOasis_Result> uspListRoleGroupMemberLoginIpOasis(Nullable<byte> whereType, Nullable<long> whereNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroupMemberLoginIpOasis_Result>("uspListRoleGroupMemberLoginIpOasis", whereTypeParameter, whereNoParameter);
        }
    
        public virtual int uspListRoleGroupMemberOasis(Nullable<byte> whereType, Nullable<byte> roleGroupNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListRoleGroupMemberOasis", whereTypeParameter, roleGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListRoleGroupName_Result> uspListRoleGroupName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroupName_Result>("uspListRoleGroupName");
        }
    
        public virtual ObjectResult<uspListRoleGroupNameOasis_Result> uspListRoleGroupNameOasis(Nullable<byte> whereType, Nullable<long> whereNo, Nullable<byte> roleNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroupNameOasis_Result>("uspListRoleGroupNameOasis", whereTypeParameter, whereNoParameter, roleNoParameter);
        }
    
        public virtual ObjectResult<uspListRoleGroupOasis_Result> uspListRoleGroupOasis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleGroupOasis_Result>("uspListRoleGroupOasis");
        }
    
        public virtual ObjectResult<Nullable<byte>> uspListRoleInGroup(Nullable<long> roleGroupNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspListRoleInGroup", roleGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListRoleInGroupOasis_Result> uspListRoleInGroupOasis(Nullable<long> roleGroupNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleInGroupOasis_Result>("uspListRoleInGroupOasis", roleGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListRoleInGroupWithAdmintool_Result> uspListRoleInGroupWithAdmintool(Nullable<long> roleGroupNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleInGroupWithAdmintool_Result>("uspListRoleInGroupWithAdmintool", roleGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListRoleOasis_Result> uspListRoleOasis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListRoleOasis_Result>("uspListRoleOasis");
        }
    
        public virtual ObjectResult<uspListServerChannelChatInformation_Result> uspListServerChannelChatInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerChannelChatInformation_Result>("uspListServerChannelChatInformation");
        }
    
        public virtual ObjectResult<uspListServerDataCRC_Result> uspListServerDataCRC()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerDataCRC_Result>("uspListServerDataCRC");
        }
    
        public virtual ObjectResult<uspListServerFamilyInformation_Result> uspListServerFamilyInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerFamilyInformation_Result>("uspListServerFamilyInformation");
        }
    
        public virtual ObjectResult<uspListServerGroup_Result> uspListServerGroup(string serverGroup)
        {
            var serverGroupParameter = serverGroup != null ?
                new ObjectParameter("serverGroup", serverGroup) :
                new ObjectParameter("serverGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerGroup_Result>("uspListServerGroup", serverGroupParameter);
        }
    
        public virtual ObjectResult<uspListServerInfomation_Result> uspListServerInfomation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerInfomation_Result>("uspListServerInfomation");
        }
    
        public virtual ObjectResult<uspListServerInfoOasis_Result> uspListServerInfoOasis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerInfoOasis_Result>("uspListServerInfoOasis");
        }
    
        public virtual ObjectResult<uspListServerInformationPreset_Result> uspListServerInformationPreset()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerInformationPreset_Result>("uspListServerInformationPreset");
        }
    
        public virtual ObjectResult<uspListServerInstanceFieldInformation_Result> uspListServerInstanceFieldInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerInstanceFieldInformation_Result>("uspListServerInstanceFieldInformation");
        }
    
        public virtual ObjectResult<uspListServerMovableTime_Result> uspListServerMovableTime(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServerMovableTime_Result>("uspListServerMovableTime", userNoParameter);
        }
    
        public virtual ObjectResult<uspListTicket_Result> uspListTicket(string gmUserNickname, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var gmUserNicknameParameter = gmUserNickname != null ?
                new ObjectParameter("gmUserNickname", gmUserNickname) :
                new ObjectParameter("gmUserNickname", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListTicket_Result>("uspListTicket", gmUserNicknameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListTicket_v3_Result> uspListTicket_v3(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<byte> ticketState, Nullable<byte> searchType, Nullable<long> searchNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var ticketStateParameter = ticketState.HasValue ?
                new ObjectParameter("ticketState", ticketState) :
                new ObjectParameter("ticketState", typeof(byte));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("searchType", searchType) :
                new ObjectParameter("searchType", typeof(byte));
    
            var searchNoParameter = searchNo.HasValue ?
                new ObjectParameter("searchNo", searchNo) :
                new ObjectParameter("searchNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListTicket_v3_Result>("uspListTicket_v3", startDateParameter, endDateParameter, ticketStateParameter, searchTypeParameter, searchNoParameter);
        }
    
        public virtual ObjectResult<uspListUserOnTheSecondDay_Result> uspListUserOnTheSecondDay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserOnTheSecondDay_Result>("uspListUserOnTheSecondDay");
        }
    
        public virtual ObjectResult<uspListValidServerInformation_Result> uspListValidServerInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListValidServerInformation_Result>("uspListValidServerInformation");
        }
    
        public virtual ObjectResult<uspListWorldTradeMarketCommand_Result> uspListWorldTradeMarketCommand(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWorldTradeMarketCommand_Result>("uspListWorldTradeMarketCommand", symNo, rv);
        }
    
        public virtual ObjectResult<uspListXboxCashInfoWorldWithAdmintool_Result> uspListXboxCashInfoWorldWithAdmintool(string userId, Nullable<byte> nationType, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListXboxCashInfoWorldWithAdmintool_Result>("uspListXboxCashInfoWorldWithAdmintool", userIdParameter, nationTypeParameter, symNo);
        }
    
        public virtual ObjectResult<uspListXboxCashProductRefundInfo_Result> uspListXboxCashProductRefundInfo(string userId, Nullable<byte> nationType, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var nationTypeParameter = nationType.HasValue ?
                new ObjectParameter("nationType", nationType) :
                new ObjectParameter("nationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListXboxCashProductRefundInfo_Result>("uspListXboxCashProductRefundInfo", userIdParameter, nationTypeParameter, symNo);
        }
    
        public virtual int uspListXboxInventoryHistory(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListXboxInventoryHistory", userIdParameter, startDateParameter, endDateParameter, symNo);
        }
    
        public virtual int uspListXboxInventoryHistoryWithProductId(string userId, string legacyProductId, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var legacyProductIdParameter = legacyProductId != null ?
                new ObjectParameter("legacyProductId", legacyProductId) :
                new ObjectParameter("legacyProductId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListXboxInventoryHistoryWithProductId", userIdParameter, legacyProductIdParameter, symNo);
        }
    
        public virtual ObjectResult<uspLoadListServerSetting_Result> uspLoadListServerSetting(string savePresetName)
        {
            var savePresetNameParameter = savePresetName != null ?
                new ObjectParameter("savePresetName", savePresetName) :
                new ObjectParameter("savePresetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoadListServerSetting_Result>("uspLoadListServerSetting", savePresetNameParameter);
        }
    
        public virtual ObjectResult<string> usploadSaveList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usploadSaveList");
        }
    
        public virtual int uspPasswordReset(string userId, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPasswordReset", userIdParameter, symNo);
        }
    
        public virtual int uspPreventReturnUser(Nullable<long> userNo, Nullable<System.DateTime> lastLogoutTime, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var lastLogoutTimeParameter = lastLogoutTime.HasValue ?
                new ObjectParameter("lastLogoutTime", lastLogoutTime) :
                new ObjectParameter("lastLogoutTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPreventReturnUser", userNoParameter, lastLogoutTimeParameter, symNo);
        }
    
        public virtual int uspProcessTicket(Nullable<long> ticketNo, Nullable<byte> ticketState, Nullable<long> approvedUserNo, ObjectParameter symNo)
        {
            var ticketNoParameter = ticketNo.HasValue ?
                new ObjectParameter("ticketNo", ticketNo) :
                new ObjectParameter("ticketNo", typeof(long));
    
            var ticketStateParameter = ticketState.HasValue ?
                new ObjectParameter("ticketState", ticketState) :
                new ObjectParameter("ticketState", typeof(byte));
    
            var approvedUserNoParameter = approvedUserNo.HasValue ?
                new ObjectParameter("approvedUserNo", approvedUserNo) :
                new ObjectParameter("approvedUserNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessTicket", ticketNoParameter, ticketStateParameter, approvedUserNoParameter, symNo);
        }
    
        public virtual int uspRecreateType(string typeName, string typeQuery)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("typeName", typeName) :
                new ObjectParameter("typeName", typeof(string));
    
            var typeQueryParameter = typeQuery != null ?
                new ObjectParameter("typeQuery", typeQuery) :
                new ObjectParameter("typeQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRecreateType", typeNameParameter, typeQueryParameter);
        }
    
        public virtual int uspRemovePassTicket(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemovePassTicket", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroup1(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroup1", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupMember1(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupMember1", userNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupMemberLoginIpOasis(Nullable<byte> whereType, Nullable<long> whereNo, string ipAddress, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupMemberLoginIpOasis", whereTypeParameter, whereNoParameter, ipAddressParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupMemberOasis(Nullable<byte> whereType, Nullable<long> whereNo, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupMemberOasis", whereTypeParameter, whereNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupNameOasis(Nullable<byte> roleGroupNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupNameOasis", roleGroupNoParameter, symNo);
        }
    
        public virtual int uspRemoveRoleGroupOasis(Nullable<byte> roleGroupNo, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveRoleGroupOasis", roleGroupNoParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspRenameRoleOasis(Nullable<byte> roleNo, string newRoleName, ObjectParameter symNo)
        {
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            var newRoleNameParameter = newRoleName != null ?
                new ObjectParameter("newRoleName", newRoleName) :
                new ObjectParameter("newRoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRenameRoleOasis", roleNoParameter, newRoleNameParameter, symNo);
        }
    
        public virtual int uspResetUserPasswordFailedCount(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspResetUserPasswordFailedCount", userNoParameter, symNo);
        }
    
        public virtual int uspRestoreCharacterInWorld(Nullable<long> characterNo, ObjectParameter symNo)
        {
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRestoreCharacterInWorld", characterNoParameter, symNo);
        }
    
        public virtual int uspSaveServerSetting(string savePresetName, Nullable<short> serverNo, Nullable<bool> isShowExpEvent, Nullable<bool> isShowDropEvent, Nullable<int> battleExp, Nullable<int> battleDrop, string battleExpTooltipText, Nullable<int> skillExp, Nullable<int> vehicleExp, Nullable<int> lifeExp1, Nullable<int> lifeDrop1, Nullable<int> lifeExp2, Nullable<int> lifeDrop2, Nullable<int> lifeExp3, Nullable<int> lifeDrop3, Nullable<int> lifeExp4, Nullable<int> lifeDrop4, Nullable<int> lifeExp5, Nullable<int> lifeDrop5, Nullable<int> lifeExp6, Nullable<int> lifeDrop6, Nullable<int> lifeExp7, Nullable<int> lifeDrop7, Nullable<int> lifeExp8, Nullable<int> lifeDrop8, Nullable<int> lifeExp9, Nullable<int> lifeDrop9, Nullable<int> lifeExp10, Nullable<int> lifeDrop10, Nullable<int> lifeExp11, Nullable<int> lifeDrop11, Nullable<int> lifeExp12, Nullable<int> lifeDrop12, Nullable<int> lifeExp13, Nullable<int> lifeDrop13, Nullable<int> lifeExp14, Nullable<int> lifeDrop14, Nullable<int> lifeExp15, Nullable<int> lifeDrop15, ObjectParameter symNo)
        {
            var savePresetNameParameter = savePresetName != null ?
                new ObjectParameter("savePresetName", savePresetName) :
                new ObjectParameter("savePresetName", typeof(string));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var isShowExpEventParameter = isShowExpEvent.HasValue ?
                new ObjectParameter("isShowExpEvent", isShowExpEvent) :
                new ObjectParameter("isShowExpEvent", typeof(bool));
    
            var isShowDropEventParameter = isShowDropEvent.HasValue ?
                new ObjectParameter("isShowDropEvent", isShowDropEvent) :
                new ObjectParameter("isShowDropEvent", typeof(bool));
    
            var battleExpParameter = battleExp.HasValue ?
                new ObjectParameter("battleExp", battleExp) :
                new ObjectParameter("battleExp", typeof(int));
    
            var battleDropParameter = battleDrop.HasValue ?
                new ObjectParameter("battleDrop", battleDrop) :
                new ObjectParameter("battleDrop", typeof(int));
    
            var battleExpTooltipTextParameter = battleExpTooltipText != null ?
                new ObjectParameter("battleExpTooltipText", battleExpTooltipText) :
                new ObjectParameter("battleExpTooltipText", typeof(string));
    
            var skillExpParameter = skillExp.HasValue ?
                new ObjectParameter("skillExp", skillExp) :
                new ObjectParameter("skillExp", typeof(int));
    
            var vehicleExpParameter = vehicleExp.HasValue ?
                new ObjectParameter("vehicleExp", vehicleExp) :
                new ObjectParameter("vehicleExp", typeof(int));
    
            var lifeExp1Parameter = lifeExp1.HasValue ?
                new ObjectParameter("lifeExp1", lifeExp1) :
                new ObjectParameter("lifeExp1", typeof(int));
    
            var lifeDrop1Parameter = lifeDrop1.HasValue ?
                new ObjectParameter("lifeDrop1", lifeDrop1) :
                new ObjectParameter("lifeDrop1", typeof(int));
    
            var lifeExp2Parameter = lifeExp2.HasValue ?
                new ObjectParameter("lifeExp2", lifeExp2) :
                new ObjectParameter("lifeExp2", typeof(int));
    
            var lifeDrop2Parameter = lifeDrop2.HasValue ?
                new ObjectParameter("lifeDrop2", lifeDrop2) :
                new ObjectParameter("lifeDrop2", typeof(int));
    
            var lifeExp3Parameter = lifeExp3.HasValue ?
                new ObjectParameter("lifeExp3", lifeExp3) :
                new ObjectParameter("lifeExp3", typeof(int));
    
            var lifeDrop3Parameter = lifeDrop3.HasValue ?
                new ObjectParameter("lifeDrop3", lifeDrop3) :
                new ObjectParameter("lifeDrop3", typeof(int));
    
            var lifeExp4Parameter = lifeExp4.HasValue ?
                new ObjectParameter("lifeExp4", lifeExp4) :
                new ObjectParameter("lifeExp4", typeof(int));
    
            var lifeDrop4Parameter = lifeDrop4.HasValue ?
                new ObjectParameter("lifeDrop4", lifeDrop4) :
                new ObjectParameter("lifeDrop4", typeof(int));
    
            var lifeExp5Parameter = lifeExp5.HasValue ?
                new ObjectParameter("lifeExp5", lifeExp5) :
                new ObjectParameter("lifeExp5", typeof(int));
    
            var lifeDrop5Parameter = lifeDrop5.HasValue ?
                new ObjectParameter("lifeDrop5", lifeDrop5) :
                new ObjectParameter("lifeDrop5", typeof(int));
    
            var lifeExp6Parameter = lifeExp6.HasValue ?
                new ObjectParameter("lifeExp6", lifeExp6) :
                new ObjectParameter("lifeExp6", typeof(int));
    
            var lifeDrop6Parameter = lifeDrop6.HasValue ?
                new ObjectParameter("lifeDrop6", lifeDrop6) :
                new ObjectParameter("lifeDrop6", typeof(int));
    
            var lifeExp7Parameter = lifeExp7.HasValue ?
                new ObjectParameter("lifeExp7", lifeExp7) :
                new ObjectParameter("lifeExp7", typeof(int));
    
            var lifeDrop7Parameter = lifeDrop7.HasValue ?
                new ObjectParameter("lifeDrop7", lifeDrop7) :
                new ObjectParameter("lifeDrop7", typeof(int));
    
            var lifeExp8Parameter = lifeExp8.HasValue ?
                new ObjectParameter("lifeExp8", lifeExp8) :
                new ObjectParameter("lifeExp8", typeof(int));
    
            var lifeDrop8Parameter = lifeDrop8.HasValue ?
                new ObjectParameter("lifeDrop8", lifeDrop8) :
                new ObjectParameter("lifeDrop8", typeof(int));
    
            var lifeExp9Parameter = lifeExp9.HasValue ?
                new ObjectParameter("lifeExp9", lifeExp9) :
                new ObjectParameter("lifeExp9", typeof(int));
    
            var lifeDrop9Parameter = lifeDrop9.HasValue ?
                new ObjectParameter("lifeDrop9", lifeDrop9) :
                new ObjectParameter("lifeDrop9", typeof(int));
    
            var lifeExp10Parameter = lifeExp10.HasValue ?
                new ObjectParameter("lifeExp10", lifeExp10) :
                new ObjectParameter("lifeExp10", typeof(int));
    
            var lifeDrop10Parameter = lifeDrop10.HasValue ?
                new ObjectParameter("lifeDrop10", lifeDrop10) :
                new ObjectParameter("lifeDrop10", typeof(int));
    
            var lifeExp11Parameter = lifeExp11.HasValue ?
                new ObjectParameter("lifeExp11", lifeExp11) :
                new ObjectParameter("lifeExp11", typeof(int));
    
            var lifeDrop11Parameter = lifeDrop11.HasValue ?
                new ObjectParameter("lifeDrop11", lifeDrop11) :
                new ObjectParameter("lifeDrop11", typeof(int));
    
            var lifeExp12Parameter = lifeExp12.HasValue ?
                new ObjectParameter("lifeExp12", lifeExp12) :
                new ObjectParameter("lifeExp12", typeof(int));
    
            var lifeDrop12Parameter = lifeDrop12.HasValue ?
                new ObjectParameter("lifeDrop12", lifeDrop12) :
                new ObjectParameter("lifeDrop12", typeof(int));
    
            var lifeExp13Parameter = lifeExp13.HasValue ?
                new ObjectParameter("lifeExp13", lifeExp13) :
                new ObjectParameter("lifeExp13", typeof(int));
    
            var lifeDrop13Parameter = lifeDrop13.HasValue ?
                new ObjectParameter("lifeDrop13", lifeDrop13) :
                new ObjectParameter("lifeDrop13", typeof(int));
    
            var lifeExp14Parameter = lifeExp14.HasValue ?
                new ObjectParameter("lifeExp14", lifeExp14) :
                new ObjectParameter("lifeExp14", typeof(int));
    
            var lifeDrop14Parameter = lifeDrop14.HasValue ?
                new ObjectParameter("lifeDrop14", lifeDrop14) :
                new ObjectParameter("lifeDrop14", typeof(int));
    
            var lifeExp15Parameter = lifeExp15.HasValue ?
                new ObjectParameter("lifeExp15", lifeExp15) :
                new ObjectParameter("lifeExp15", typeof(int));
    
            var lifeDrop15Parameter = lifeDrop15.HasValue ?
                new ObjectParameter("lifeDrop15", lifeDrop15) :
                new ObjectParameter("lifeDrop15", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveServerSetting", savePresetNameParameter, serverNoParameter, isShowExpEventParameter, isShowDropEventParameter, battleExpParameter, battleDropParameter, battleExpTooltipTextParameter, skillExpParameter, vehicleExpParameter, lifeExp1Parameter, lifeDrop1Parameter, lifeExp2Parameter, lifeDrop2Parameter, lifeExp3Parameter, lifeDrop3Parameter, lifeExp4Parameter, lifeDrop4Parameter, lifeExp5Parameter, lifeDrop5Parameter, lifeExp6Parameter, lifeDrop6Parameter, lifeExp7Parameter, lifeDrop7Parameter, lifeExp8Parameter, lifeDrop8Parameter, lifeExp9Parameter, lifeDrop9Parameter, lifeExp10Parameter, lifeDrop10Parameter, lifeExp11Parameter, lifeDrop11Parameter, lifeExp12Parameter, lifeDrop12Parameter, lifeExp13Parameter, lifeDrop13Parameter, lifeExp14Parameter, lifeDrop14Parameter, lifeExp15Parameter, lifeDrop15Parameter, symNo);
        }
    
        public virtual ObjectResult<uspSearchUniqueNameByName_Result> uspSearchUniqueNameByName(Nullable<int> type, string name)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSearchUniqueNameByName_Result>("uspSearchUniqueNameByName", typeParameter, nameParameter);
        }
    
        public virtual int uspSetExtraTimeRoleGroupMemberOasis(Nullable<byte> whereType, Nullable<long> whereNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetExtraTimeRoleGroupMemberOasis", whereTypeParameter, whereNoParameter);
        }
    
        public virtual int uspSetNewOrReturnUser(Nullable<long> userNo, Nullable<byte> speedServerAdmission, Nullable<System.DateTime> expirationDate, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var speedServerAdmissionParameter = speedServerAdmission.HasValue ?
                new ObjectParameter("speedServerAdmission", speedServerAdmission) :
                new ObjectParameter("speedServerAdmission", typeof(byte));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("expirationDate", expirationDate) :
                new ObjectParameter("expirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetNewOrReturnUser", userNoParameter, speedServerAdmissionParameter, expirationDateParameter, symNo);
        }
    
        public virtual int uspSetProhibitedWord(string prohibitedWord, Nullable<byte> operationType, ObjectParameter symNo)
        {
            var prohibitedWordParameter = prohibitedWord != null ?
                new ObjectParameter("prohibitedWord", prohibitedWord) :
                new ObjectParameter("prohibitedWord", typeof(string));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("operationType", operationType) :
                new ObjectParameter("operationType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetProhibitedWord", prohibitedWordParameter, operationTypeParameter, symNo);
        }
    
        public virtual int uspSetRoleGroupMemberPassword(Nullable<long> userNo, string password, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetRoleGroupMemberPassword", userNoParameter, passwordParameter, symNo);
        }
    
        public virtual int uspSetRoleGroupMemberPasswordOasis(Nullable<byte> whereType, Nullable<long> whereNo, string password, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetRoleGroupMemberPasswordOasis", whereTypeParameter, whereNoParameter, passwordParameter, symNo);
        }
    
        public virtual int uspSetServerSequentialCheck(Nullable<short> serverNo, ObjectParameter symNo)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetServerSequentialCheck", serverNoParameter, symNo);
        }
    
        public virtual int uspSetWorldTradeMarketCommandResult(Nullable<long> commandNo, Nullable<byte> status, ObjectParameter symNo, ObjectParameter rv)
        {
            var commandNoParameter = commandNo.HasValue ?
                new ObjectParameter("commandNo", commandNo) :
                new ObjectParameter("commandNo", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetWorldTradeMarketCommandResult", commandNoParameter, statusParameter, symNo, rv);
        }
    
        public virtual int uspShaExecNameChange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspShaExecNameChange");
        }
    
        public virtual int uspSubmitTicket(Nullable<short> worldNo, string characterName, string userId, Nullable<byte> requestType, string requestList, string reason, Nullable<long> gmUserNo, Nullable<byte> priority, ObjectParameter symNo)
        {
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("requestType", requestType) :
                new ObjectParameter("requestType", typeof(byte));
    
            var requestListParameter = requestList != null ?
                new ObjectParameter("requestList", requestList) :
                new ObjectParameter("requestList", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var gmUserNoParameter = gmUserNo.HasValue ?
                new ObjectParameter("gmUserNo", gmUserNo) :
                new ObjectParameter("gmUserNo", typeof(long));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSubmitTicket", worldNoParameter, characterNameParameter, userIdParameter, requestTypeParameter, requestListParameter, reasonParameter, gmUserNoParameter, priorityParameter, symNo);
        }
    
        public virtual int uspSwapValidServerInformation(Nullable<short> type, Nullable<short> targetA, Nullable<short> targetB, ObjectParameter symNo)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(short));
    
            var targetAParameter = targetA.HasValue ?
                new ObjectParameter("targetA", targetA) :
                new ObjectParameter("targetA", typeof(short));
    
            var targetBParameter = targetB.HasValue ?
                new ObjectParameter("targetB", targetB) :
                new ObjectParameter("targetB", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSwapValidServerInformation", typeParameter, targetAParameter, targetBParameter, symNo);
        }
    
        public virtual int uspUpdateAccessibleServer1(Nullable<short> serverNo)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAccessibleServer1", serverNoParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> uspUpdateBlockType(Nullable<int> blockCode, Nullable<long> duration, string blockReason, string memo)
        {
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(long));
    
            var blockReasonParameter = blockReason != null ?
                new ObjectParameter("blockReason", blockReason) :
                new ObjectParameter("blockReason", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("uspUpdateBlockType", blockCodeParameter, durationParameter, blockReasonParameter, memoParameter);
        }
    
        public virtual int uspUpdateBlockUserForPublisher(Nullable<long> userNo, string characterName, Nullable<int> blockType, Nullable<int> blockCode, string operationMemo, Nullable<int> blockDUration, Nullable<int> serverNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var blockTypeParameter = blockType.HasValue ?
                new ObjectParameter("blockType", blockType) :
                new ObjectParameter("blockType", typeof(int));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var operationMemoParameter = operationMemo != null ?
                new ObjectParameter("operationMemo", operationMemo) :
                new ObjectParameter("operationMemo", typeof(string));
    
            var blockDUrationParameter = blockDUration.HasValue ?
                new ObjectParameter("blockDUration", blockDUration) :
                new ObjectParameter("blockDUration", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateBlockUserForPublisher", userNoParameter, characterNameParameter, blockTypeParameter, blockCodeParameter, operationMemoParameter, blockDUrationParameter, serverNoParameter, symNo);
        }
    
        public virtual int uspUpdateCharacterName(Nullable<long> userNo, string newCharacterName, string oldCharacterName, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var newCharacterNameParameter = newCharacterName != null ?
                new ObjectParameter("newCharacterName", newCharacterName) :
                new ObjectParameter("newCharacterName", typeof(string));
    
            var oldCharacterNameParameter = oldCharacterName != null ?
                new ObjectParameter("oldCharacterName", oldCharacterName) :
                new ObjectParameter("oldCharacterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateCharacterName", userNoParameter, newCharacterNameParameter, oldCharacterNameParameter, symNo);
        }
    
        public virtual int uspUpdateCharacterNameInWorld(Nullable<long> userNo, string newCharacterName, string oldCharacterName, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var newCharacterNameParameter = newCharacterName != null ?
                new ObjectParameter("newCharacterName", newCharacterName) :
                new ObjectParameter("newCharacterName", typeof(string));
    
            var oldCharacterNameParameter = oldCharacterName != null ?
                new ObjectParameter("oldCharacterName", oldCharacterName) :
                new ObjectParameter("oldCharacterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateCharacterNameInWorld", userNoParameter, newCharacterNameParameter, oldCharacterNameParameter, symNo);
        }
    
        public virtual int uspUpdateCheckBlockUserForPublisher(Nullable<long> userNo, Nullable<int> blockType, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var blockTypeParameter = blockType.HasValue ?
                new ObjectParameter("blockType", blockType) :
                new ObjectParameter("blockType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateCheckBlockUserForPublisher", userNoParameter, blockTypeParameter, symNo);
        }
    
        public virtual int uspUpdateDelCharacterNameWorld(Nullable<long> characterNo, Nullable<long> userNo, string bfCharactername, string afCharacterName, ObjectParameter symNo)
        {
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var bfCharacternameParameter = bfCharactername != null ?
                new ObjectParameter("bfCharactername", bfCharactername) :
                new ObjectParameter("bfCharactername", typeof(string));
    
            var afCharacterNameParameter = afCharacterName != null ?
                new ObjectParameter("afCharacterName", afCharacterName) :
                new ObjectParameter("afCharacterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDelCharacterNameWorld", characterNoParameter, userNoParameter, bfCharacternameParameter, afCharacterNameParameter, symNo);
        }
    
        public virtual int uspUpdateOperationTicket(Nullable<byte> ticketState, Nullable<long> ticketNo, string reason, Nullable<long> approvedUserNo)
        {
            var ticketStateParameter = ticketState.HasValue ?
                new ObjectParameter("ticketState", ticketState) :
                new ObjectParameter("ticketState", typeof(byte));
    
            var ticketNoParameter = ticketNo.HasValue ?
                new ObjectParameter("ticketNo", ticketNo) :
                new ObjectParameter("ticketNo", typeof(long));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var approvedUserNoParameter = approvedUserNo.HasValue ?
                new ObjectParameter("approvedUserNo", approvedUserNo) :
                new ObjectParameter("approvedUserNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateOperationTicket", ticketStateParameter, ticketNoParameter, reasonParameter, approvedUserNoParameter);
        }
    
        public virtual int uspUpdatePS4CashProductRefundInfo(Nullable<long> refundNo, Nullable<byte> refundState, ObjectParameter useCount, ObjectParameter consumeCount)
        {
            var refundNoParameter = refundNo.HasValue ?
                new ObjectParameter("refundNo", refundNo) :
                new ObjectParameter("refundNo", typeof(long));
    
            var refundStateParameter = refundState.HasValue ?
                new ObjectParameter("refundState", refundState) :
                new ObjectParameter("refundState", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePS4CashProductRefundInfo", refundNoParameter, refundStateParameter, useCount, consumeCount);
        }
    
        public virtual int uspUpdateRoleGroupGrade(Nullable<long> userNo, Nullable<byte> roleGroupNo, Nullable<byte> roleGroupGrade, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleGroupGradeParameter = roleGroupGrade.HasValue ?
                new ObjectParameter("roleGroupGrade", roleGroupGrade) :
                new ObjectParameter("roleGroupGrade", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateRoleGroupGrade", userNoParameter, roleGroupNoParameter, roleGroupGradeParameter, symNo);
        }
    
        public virtual ObjectResult<uspUpdateRoleGroupMemberOasis_Result> uspUpdateRoleGroupMemberOasis(Nullable<byte> whereType, Nullable<long> whereNo, Nullable<byte> roleGroupNo, Nullable<byte> loginAttemptCount, string roleGroupMemberMemo, ObjectParameter symNo)
        {
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var loginAttemptCountParameter = loginAttemptCount.HasValue ?
                new ObjectParameter("loginAttemptCount", loginAttemptCount) :
                new ObjectParameter("loginAttemptCount", typeof(byte));
    
            var roleGroupMemberMemoParameter = roleGroupMemberMemo != null ?
                new ObjectParameter("roleGroupMemberMemo", roleGroupMemberMemo) :
                new ObjectParameter("roleGroupMemberMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdateRoleGroupMemberOasis_Result>("uspUpdateRoleGroupMemberOasis", whereTypeParameter, whereNoParameter, roleGroupNoParameter, loginAttemptCountParameter, roleGroupMemberMemoParameter, symNo);
        }
    
        public virtual ObjectResult<uspUpdateRoleGroupMemberWithWebAdminTool_Result> uspUpdateRoleGroupMemberWithWebAdminTool(Nullable<long> userNo, Nullable<byte> roleGroupNo, string macAddress, string ipAddress, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdateRoleGroupMemberWithWebAdminTool_Result>("uspUpdateRoleGroupMemberWithWebAdminTool", userNoParameter, roleGroupNoParameter, macAddressParameter, ipAddressParameter, symNo);
        }
    
        public virtual int uspUpdateRoleGroupNameOasis(Nullable<byte> roleGroupNo, string roleGroupName, string roleGroupMemo, Nullable<byte> roleGroupGrade, ObjectParameter symNo)
        {
            var roleGroupNoParameter = roleGroupNo.HasValue ?
                new ObjectParameter("roleGroupNo", roleGroupNo) :
                new ObjectParameter("roleGroupNo", typeof(byte));
    
            var roleGroupNameParameter = roleGroupName != null ?
                new ObjectParameter("roleGroupName", roleGroupName) :
                new ObjectParameter("roleGroupName", typeof(string));
    
            var roleGroupMemoParameter = roleGroupMemo != null ?
                new ObjectParameter("roleGroupMemo", roleGroupMemo) :
                new ObjectParameter("roleGroupMemo", typeof(string));
    
            var roleGroupGradeParameter = roleGroupGrade.HasValue ?
                new ObjectParameter("roleGroupGrade", roleGroupGrade) :
                new ObjectParameter("roleGroupGrade", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateRoleGroupNameOasis", roleGroupNoParameter, roleGroupNameParameter, roleGroupMemoParameter, roleGroupGradeParameter, symNo);
        }
    
        public virtual int uspUpdateServerChannelChatInformation(Nullable<int> orderNo, Nullable<short> serverNo, Nullable<long> roomNo, string roomName, string roomDesc, Nullable<short> maxMemberCount)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var roomNoParameter = roomNo.HasValue ?
                new ObjectParameter("roomNo", roomNo) :
                new ObjectParameter("roomNo", typeof(long));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("roomName", roomName) :
                new ObjectParameter("roomName", typeof(string));
    
            var roomDescParameter = roomDesc != null ?
                new ObjectParameter("roomDesc", roomDesc) :
                new ObjectParameter("roomDesc", typeof(string));
    
            var maxMemberCountParameter = maxMemberCount.HasValue ?
                new ObjectParameter("maxMemberCount", maxMemberCount) :
                new ObjectParameter("maxMemberCount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateServerChannelChatInformation", orderNoParameter, serverNoParameter, roomNoParameter, roomNameParameter, roomDescParameter, maxMemberCountParameter);
        }
    
        public virtual int uspUpdateServerFamilyInformation(Nullable<bool> isValid, Nullable<short> fromServerNo, Nullable<short> toServerNo)
        {
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("isValid", isValid) :
                new ObjectParameter("isValid", typeof(bool));
    
            var fromServerNoParameter = fromServerNo.HasValue ?
                new ObjectParameter("fromServerNo", fromServerNo) :
                new ObjectParameter("fromServerNo", typeof(short));
    
            var toServerNoParameter = toServerNo.HasValue ?
                new ObjectParameter("toServerNo", toServerNo) :
                new ObjectParameter("toServerNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateServerFamilyInformation", isValidParameter, fromServerNoParameter, toServerNoParameter);
        }
    
        public virtual int uspUpdateServerInformationPreset(string presetName, Nullable<short> serverType, Nullable<short> startSiegeTerritory, Nullable<bool> doImperialDelivery, Nullable<bool> doImperialProductDelivery, Nullable<bool> dontPvPTendencyDecrease, Nullable<bool> doHorseRaceMatch, Nullable<bool> fixedCharge, Nullable<bool> isLimitedLocalWar, Nullable<bool> isSpeedChannel, Nullable<bool> doCompetitionArsha, Nullable<bool> isBalanceChannel, Nullable<short> isSavageDefence, Nullable<bool> isPcroomChannel, Nullable<bool> isSteamChannel, Nullable<bool> isPremiumChannel, Nullable<short> isGuildBattleChannel, Nullable<bool> isCantPvPChannel, Nullable<bool> isFixedBossSpawn, Nullable<bool> startNationSiege, Nullable<byte> servicePlatformType, Nullable<bool> isSeasonChannel, Nullable<bool> isSeasonNewbieChannel, Nullable<bool> isHadumChannel, Nullable<bool> isEventChannel, Nullable<bool> isSpareMachine)
        {
            var presetNameParameter = presetName != null ?
                new ObjectParameter("presetName", presetName) :
                new ObjectParameter("presetName", typeof(string));
    
            var serverTypeParameter = serverType.HasValue ?
                new ObjectParameter("serverType", serverType) :
                new ObjectParameter("serverType", typeof(short));
    
            var startSiegeTerritoryParameter = startSiegeTerritory.HasValue ?
                new ObjectParameter("startSiegeTerritory", startSiegeTerritory) :
                new ObjectParameter("startSiegeTerritory", typeof(short));
    
            var doImperialDeliveryParameter = doImperialDelivery.HasValue ?
                new ObjectParameter("doImperialDelivery", doImperialDelivery) :
                new ObjectParameter("doImperialDelivery", typeof(bool));
    
            var doImperialProductDeliveryParameter = doImperialProductDelivery.HasValue ?
                new ObjectParameter("doImperialProductDelivery", doImperialProductDelivery) :
                new ObjectParameter("doImperialProductDelivery", typeof(bool));
    
            var dontPvPTendencyDecreaseParameter = dontPvPTendencyDecrease.HasValue ?
                new ObjectParameter("dontPvPTendencyDecrease", dontPvPTendencyDecrease) :
                new ObjectParameter("dontPvPTendencyDecrease", typeof(bool));
    
            var doHorseRaceMatchParameter = doHorseRaceMatch.HasValue ?
                new ObjectParameter("doHorseRaceMatch", doHorseRaceMatch) :
                new ObjectParameter("doHorseRaceMatch", typeof(bool));
    
            var fixedChargeParameter = fixedCharge.HasValue ?
                new ObjectParameter("fixedCharge", fixedCharge) :
                new ObjectParameter("fixedCharge", typeof(bool));
    
            var isLimitedLocalWarParameter = isLimitedLocalWar.HasValue ?
                new ObjectParameter("isLimitedLocalWar", isLimitedLocalWar) :
                new ObjectParameter("isLimitedLocalWar", typeof(bool));
    
            var isSpeedChannelParameter = isSpeedChannel.HasValue ?
                new ObjectParameter("isSpeedChannel", isSpeedChannel) :
                new ObjectParameter("isSpeedChannel", typeof(bool));
    
            var doCompetitionArshaParameter = doCompetitionArsha.HasValue ?
                new ObjectParameter("doCompetitionArsha", doCompetitionArsha) :
                new ObjectParameter("doCompetitionArsha", typeof(bool));
    
            var isBalanceChannelParameter = isBalanceChannel.HasValue ?
                new ObjectParameter("isBalanceChannel", isBalanceChannel) :
                new ObjectParameter("isBalanceChannel", typeof(bool));
    
            var isSavageDefenceParameter = isSavageDefence.HasValue ?
                new ObjectParameter("isSavageDefence", isSavageDefence) :
                new ObjectParameter("isSavageDefence", typeof(short));
    
            var isPcroomChannelParameter = isPcroomChannel.HasValue ?
                new ObjectParameter("isPcroomChannel", isPcroomChannel) :
                new ObjectParameter("isPcroomChannel", typeof(bool));
    
            var isSteamChannelParameter = isSteamChannel.HasValue ?
                new ObjectParameter("isSteamChannel", isSteamChannel) :
                new ObjectParameter("isSteamChannel", typeof(bool));
    
            var isPremiumChannelParameter = isPremiumChannel.HasValue ?
                new ObjectParameter("isPremiumChannel", isPremiumChannel) :
                new ObjectParameter("isPremiumChannel", typeof(bool));
    
            var isGuildBattleChannelParameter = isGuildBattleChannel.HasValue ?
                new ObjectParameter("isGuildBattleChannel", isGuildBattleChannel) :
                new ObjectParameter("isGuildBattleChannel", typeof(short));
    
            var isCantPvPChannelParameter = isCantPvPChannel.HasValue ?
                new ObjectParameter("isCantPvPChannel", isCantPvPChannel) :
                new ObjectParameter("isCantPvPChannel", typeof(bool));
    
            var isFixedBossSpawnParameter = isFixedBossSpawn.HasValue ?
                new ObjectParameter("isFixedBossSpawn", isFixedBossSpawn) :
                new ObjectParameter("isFixedBossSpawn", typeof(bool));
    
            var startNationSiegeParameter = startNationSiege.HasValue ?
                new ObjectParameter("startNationSiege", startNationSiege) :
                new ObjectParameter("startNationSiege", typeof(bool));
    
            var servicePlatformTypeParameter = servicePlatformType.HasValue ?
                new ObjectParameter("servicePlatformType", servicePlatformType) :
                new ObjectParameter("servicePlatformType", typeof(byte));
    
            var isSeasonChannelParameter = isSeasonChannel.HasValue ?
                new ObjectParameter("isSeasonChannel", isSeasonChannel) :
                new ObjectParameter("isSeasonChannel", typeof(bool));
    
            var isSeasonNewbieChannelParameter = isSeasonNewbieChannel.HasValue ?
                new ObjectParameter("isSeasonNewbieChannel", isSeasonNewbieChannel) :
                new ObjectParameter("isSeasonNewbieChannel", typeof(bool));
    
            var isHadumChannelParameter = isHadumChannel.HasValue ?
                new ObjectParameter("isHadumChannel", isHadumChannel) :
                new ObjectParameter("isHadumChannel", typeof(bool));
    
            var isEventChannelParameter = isEventChannel.HasValue ?
                new ObjectParameter("isEventChannel", isEventChannel) :
                new ObjectParameter("isEventChannel", typeof(bool));
    
            var isSpareMachineParameter = isSpareMachine.HasValue ?
                new ObjectParameter("isSpareMachine", isSpareMachine) :
                new ObjectParameter("isSpareMachine", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateServerInformationPreset", presetNameParameter, serverTypeParameter, startSiegeTerritoryParameter, doImperialDeliveryParameter, doImperialProductDeliveryParameter, dontPvPTendencyDecreaseParameter, doHorseRaceMatchParameter, fixedChargeParameter, isLimitedLocalWarParameter, isSpeedChannelParameter, doCompetitionArshaParameter, isBalanceChannelParameter, isSavageDefenceParameter, isPcroomChannelParameter, isSteamChannelParameter, isPremiumChannelParameter, isGuildBattleChannelParameter, isCantPvPChannelParameter, isFixedBossSpawnParameter, startNationSiegeParameter, servicePlatformTypeParameter, isSeasonChannelParameter, isSeasonNewbieChannelParameter, isHadumChannelParameter, isEventChannelParameter, isSpareMachineParameter);
        }
    
        public virtual int uspUpdateServerInstanceFieldInformation(Nullable<short> serverNo, Nullable<short> instanceFieldType, Nullable<short> instanceFieldMode, Nullable<short> instanceFieldMapKey, Nullable<short> count)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var instanceFieldTypeParameter = instanceFieldType.HasValue ?
                new ObjectParameter("instanceFieldType", instanceFieldType) :
                new ObjectParameter("instanceFieldType", typeof(short));
    
            var instanceFieldModeParameter = instanceFieldMode.HasValue ?
                new ObjectParameter("instanceFieldMode", instanceFieldMode) :
                new ObjectParameter("instanceFieldMode", typeof(short));
    
            var instanceFieldMapKeyParameter = instanceFieldMapKey.HasValue ?
                new ObjectParameter("instanceFieldMapKey", instanceFieldMapKey) :
                new ObjectParameter("instanceFieldMapKey", typeof(short));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateServerInstanceFieldInformation", serverNoParameter, instanceFieldTypeParameter, instanceFieldModeParameter, instanceFieldMapKeyParameter, countParameter);
        }
    
        public virtual int uspUpdateTicketState_v3(Nullable<long> ticketNo, Nullable<byte> ticketState, Nullable<byte> whereType, Nullable<long> whereNo, string reason, ObjectParameter symNo)
        {
            var ticketNoParameter = ticketNo.HasValue ?
                new ObjectParameter("ticketNo", ticketNo) :
                new ObjectParameter("ticketNo", typeof(long));
    
            var ticketStateParameter = ticketState.HasValue ?
                new ObjectParameter("ticketState", ticketState) :
                new ObjectParameter("ticketState", typeof(byte));
    
            var whereTypeParameter = whereType.HasValue ?
                new ObjectParameter("whereType", whereType) :
                new ObjectParameter("whereType", typeof(byte));
    
            var whereNoParameter = whereNo.HasValue ?
                new ObjectParameter("whereNo", whereNo) :
                new ObjectParameter("whereNo", typeof(long));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTicketState_v3", ticketNoParameter, ticketStateParameter, whereTypeParameter, whereNoParameter, reasonParameter, symNo);
        }
    
        public virtual int uspUpdateUserNickname(Nullable<long> userNo, string newUserNickname, string oldUserNickname, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var newUserNicknameParameter = newUserNickname != null ?
                new ObjectParameter("newUserNickname", newUserNickname) :
                new ObjectParameter("newUserNickname", typeof(string));
    
            var oldUserNicknameParameter = oldUserNickname != null ?
                new ObjectParameter("oldUserNickname", oldUserNickname) :
                new ObjectParameter("oldUserNickname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUserNickname", userNoParameter, newUserNicknameParameter, oldUserNicknameParameter, symNo);
        }
    
        public virtual int uspUpdateUserNicknameInWorld(Nullable<long> userNo, string newUserNickname, string oldUserNickname, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var newUserNicknameParameter = newUserNickname != null ?
                new ObjectParameter("newUserNickname", newUserNickname) :
                new ObjectParameter("newUserNickname", typeof(string));
    
            var oldUserNicknameParameter = oldUserNickname != null ?
                new ObjectParameter("oldUserNickname", oldUserNickname) :
                new ObjectParameter("oldUserNickname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUserNicknameInWorld", userNoParameter, newUserNicknameParameter, oldUserNicknameParameter, symNo);
        }
    
        public virtual int uspUpdateUserRoleByUserId(string userId, Nullable<byte> roleNo, ObjectParameter symNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var roleNoParameter = roleNo.HasValue ?
                new ObjectParameter("roleNo", roleNo) :
                new ObjectParameter("roleNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUserRoleByUserId", userIdParameter, roleNoParameter, symNo);
        }
    
        public virtual int uspUpdateValidServerInformation(Nullable<short> targetNo, Nullable<short> serverNo, string serverId, string serverName, Nullable<short> serverType, string mainIP, string publicIP, Nullable<short> worldNo, string fieldDsn, string logDsn, Nullable<short> startSiegeTerritory, Nullable<bool> doImperialDelivery, Nullable<bool> doImperialProductDelivery, Nullable<bool> dontPvPTendencyDecrease, Nullable<bool> doHorseRaceMatch, Nullable<short> serverGroupNo, Nullable<bool> fixedCharge, Nullable<bool> isLimitedLocalWar, Nullable<bool> isSpeedChannel, Nullable<bool> doCompetitionArsha, Nullable<bool> isBalanceChannel, Nullable<short> isSavageDefence, Nullable<bool> isPcroomChannel, Nullable<bool> isSteamChannel, Nullable<bool> isPremiumChannel, Nullable<short> isGuildBattleChannel, Nullable<bool> isCantPvPChannel, Nullable<bool> isFixedBossSpawn, Nullable<bool> startNationSiege, string isInstanceFieldMainServer, Nullable<byte> servicePlatformType, Nullable<bool> isSeasonChannel, Nullable<bool> isSeasonNewbieChannel, Nullable<bool> isHadumChannel, Nullable<bool> isEventChannel, Nullable<bool> isSpareMachine, string macAddress, Nullable<bool> isSequentialCheck)
        {
            var targetNoParameter = targetNo.HasValue ?
                new ObjectParameter("targetNo", targetNo) :
                new ObjectParameter("targetNo", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var serverIdParameter = serverId != null ?
                new ObjectParameter("serverId", serverId) :
                new ObjectParameter("serverId", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("serverName", serverName) :
                new ObjectParameter("serverName", typeof(string));
    
            var serverTypeParameter = serverType.HasValue ?
                new ObjectParameter("serverType", serverType) :
                new ObjectParameter("serverType", typeof(short));
    
            var mainIPParameter = mainIP != null ?
                new ObjectParameter("mainIP", mainIP) :
                new ObjectParameter("mainIP", typeof(string));
    
            var publicIPParameter = publicIP != null ?
                new ObjectParameter("publicIP", publicIP) :
                new ObjectParameter("publicIP", typeof(string));
    
            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(short));
    
            var fieldDsnParameter = fieldDsn != null ?
                new ObjectParameter("fieldDsn", fieldDsn) :
                new ObjectParameter("fieldDsn", typeof(string));
    
            var logDsnParameter = logDsn != null ?
                new ObjectParameter("logDsn", logDsn) :
                new ObjectParameter("logDsn", typeof(string));
    
            var startSiegeTerritoryParameter = startSiegeTerritory.HasValue ?
                new ObjectParameter("startSiegeTerritory", startSiegeTerritory) :
                new ObjectParameter("startSiegeTerritory", typeof(short));
    
            var doImperialDeliveryParameter = doImperialDelivery.HasValue ?
                new ObjectParameter("doImperialDelivery", doImperialDelivery) :
                new ObjectParameter("doImperialDelivery", typeof(bool));
    
            var doImperialProductDeliveryParameter = doImperialProductDelivery.HasValue ?
                new ObjectParameter("doImperialProductDelivery", doImperialProductDelivery) :
                new ObjectParameter("doImperialProductDelivery", typeof(bool));
    
            var dontPvPTendencyDecreaseParameter = dontPvPTendencyDecrease.HasValue ?
                new ObjectParameter("dontPvPTendencyDecrease", dontPvPTendencyDecrease) :
                new ObjectParameter("dontPvPTendencyDecrease", typeof(bool));
    
            var doHorseRaceMatchParameter = doHorseRaceMatch.HasValue ?
                new ObjectParameter("doHorseRaceMatch", doHorseRaceMatch) :
                new ObjectParameter("doHorseRaceMatch", typeof(bool));
    
            var serverGroupNoParameter = serverGroupNo.HasValue ?
                new ObjectParameter("serverGroupNo", serverGroupNo) :
                new ObjectParameter("serverGroupNo", typeof(short));
    
            var fixedChargeParameter = fixedCharge.HasValue ?
                new ObjectParameter("fixedCharge", fixedCharge) :
                new ObjectParameter("fixedCharge", typeof(bool));
    
            var isLimitedLocalWarParameter = isLimitedLocalWar.HasValue ?
                new ObjectParameter("isLimitedLocalWar", isLimitedLocalWar) :
                new ObjectParameter("isLimitedLocalWar", typeof(bool));
    
            var isSpeedChannelParameter = isSpeedChannel.HasValue ?
                new ObjectParameter("isSpeedChannel", isSpeedChannel) :
                new ObjectParameter("isSpeedChannel", typeof(bool));
    
            var doCompetitionArshaParameter = doCompetitionArsha.HasValue ?
                new ObjectParameter("doCompetitionArsha", doCompetitionArsha) :
                new ObjectParameter("doCompetitionArsha", typeof(bool));
    
            var isBalanceChannelParameter = isBalanceChannel.HasValue ?
                new ObjectParameter("isBalanceChannel", isBalanceChannel) :
                new ObjectParameter("isBalanceChannel", typeof(bool));
    
            var isSavageDefenceParameter = isSavageDefence.HasValue ?
                new ObjectParameter("isSavageDefence", isSavageDefence) :
                new ObjectParameter("isSavageDefence", typeof(short));
    
            var isPcroomChannelParameter = isPcroomChannel.HasValue ?
                new ObjectParameter("isPcroomChannel", isPcroomChannel) :
                new ObjectParameter("isPcroomChannel", typeof(bool));
    
            var isSteamChannelParameter = isSteamChannel.HasValue ?
                new ObjectParameter("isSteamChannel", isSteamChannel) :
                new ObjectParameter("isSteamChannel", typeof(bool));
    
            var isPremiumChannelParameter = isPremiumChannel.HasValue ?
                new ObjectParameter("isPremiumChannel", isPremiumChannel) :
                new ObjectParameter("isPremiumChannel", typeof(bool));
    
            var isGuildBattleChannelParameter = isGuildBattleChannel.HasValue ?
                new ObjectParameter("isGuildBattleChannel", isGuildBattleChannel) :
                new ObjectParameter("isGuildBattleChannel", typeof(short));
    
            var isCantPvPChannelParameter = isCantPvPChannel.HasValue ?
                new ObjectParameter("isCantPvPChannel", isCantPvPChannel) :
                new ObjectParameter("isCantPvPChannel", typeof(bool));
    
            var isFixedBossSpawnParameter = isFixedBossSpawn.HasValue ?
                new ObjectParameter("isFixedBossSpawn", isFixedBossSpawn) :
                new ObjectParameter("isFixedBossSpawn", typeof(bool));
    
            var startNationSiegeParameter = startNationSiege.HasValue ?
                new ObjectParameter("startNationSiege", startNationSiege) :
                new ObjectParameter("startNationSiege", typeof(bool));
    
            var isInstanceFieldMainServerParameter = isInstanceFieldMainServer != null ?
                new ObjectParameter("isInstanceFieldMainServer", isInstanceFieldMainServer) :
                new ObjectParameter("isInstanceFieldMainServer", typeof(string));
    
            var servicePlatformTypeParameter = servicePlatformType.HasValue ?
                new ObjectParameter("servicePlatformType", servicePlatformType) :
                new ObjectParameter("servicePlatformType", typeof(byte));
    
            var isSeasonChannelParameter = isSeasonChannel.HasValue ?
                new ObjectParameter("isSeasonChannel", isSeasonChannel) :
                new ObjectParameter("isSeasonChannel", typeof(bool));
    
            var isSeasonNewbieChannelParameter = isSeasonNewbieChannel.HasValue ?
                new ObjectParameter("isSeasonNewbieChannel", isSeasonNewbieChannel) :
                new ObjectParameter("isSeasonNewbieChannel", typeof(bool));
    
            var isHadumChannelParameter = isHadumChannel.HasValue ?
                new ObjectParameter("isHadumChannel", isHadumChannel) :
                new ObjectParameter("isHadumChannel", typeof(bool));
    
            var isEventChannelParameter = isEventChannel.HasValue ?
                new ObjectParameter("isEventChannel", isEventChannel) :
                new ObjectParameter("isEventChannel", typeof(bool));
    
            var isSpareMachineParameter = isSpareMachine.HasValue ?
                new ObjectParameter("isSpareMachine", isSpareMachine) :
                new ObjectParameter("isSpareMachine", typeof(bool));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var isSequentialCheckParameter = isSequentialCheck.HasValue ?
                new ObjectParameter("isSequentialCheck", isSequentialCheck) :
                new ObjectParameter("isSequentialCheck", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateValidServerInformation", targetNoParameter, serverNoParameter, serverIdParameter, serverNameParameter, serverTypeParameter, mainIPParameter, publicIPParameter, worldNoParameter, fieldDsnParameter, logDsnParameter, startSiegeTerritoryParameter, doImperialDeliveryParameter, doImperialProductDeliveryParameter, dontPvPTendencyDecreaseParameter, doHorseRaceMatchParameter, serverGroupNoParameter, fixedChargeParameter, isLimitedLocalWarParameter, isSpeedChannelParameter, doCompetitionArshaParameter, isBalanceChannelParameter, isSavageDefenceParameter, isPcroomChannelParameter, isSteamChannelParameter, isPremiumChannelParameter, isGuildBattleChannelParameter, isCantPvPChannelParameter, isFixedBossSpawnParameter, startNationSiegeParameter, isInstanceFieldMainServerParameter, servicePlatformTypeParameter, isSeasonChannelParameter, isSeasonNewbieChannelParameter, isHadumChannelParameter, isEventChannelParameter, isSpareMachineParameter, macAddressParameter, isSequentialCheckParameter);
        }
    
        public virtual int uspUpdateXboxCashProductRefundInfo(Nullable<long> refundNo, Nullable<byte> refundState, ObjectParameter productCount, ObjectParameter consumeCount, ObjectParameter symNo)
        {
            var refundNoParameter = refundNo.HasValue ?
                new ObjectParameter("refundNo", refundNo) :
                new ObjectParameter("refundNo", typeof(long));
    
            var refundStateParameter = refundState.HasValue ?
                new ObjectParameter("refundState", refundState) :
                new ObjectParameter("refundState", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateXboxCashProductRefundInfo", refundNoParameter, refundStateParameter, productCount, consumeCount, symNo);
        }
    
        public virtual int uspUserCacheDelete(Nullable<long> userNo, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUserCacheDelete", userNoParameter, symNo);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckConnected(Nullable<long> accountNo, ObjectParameter resultCode)
        {
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckConnected", accountNoParameter, resultCode);
        }
    
        public virtual int uspCheckSecondPwd(Nullable<long> userNo, string secondPW, ObjectParameter resultCode)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var secondPWParameter = secondPW != null ?
                new ObjectParameter("secondPW", secondPW) :
                new ObjectParameter("secondPW", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckSecondPwd", userNoParameter, secondPWParameter, resultCode);
        }
    
        public virtual ObjectResult<uspGetFoolsDayEvent_Result> uspGetFoolsDayEvent(ObjectParameter resultCode, ObjectParameter resultMsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetFoolsDayEvent_Result>("uspGetFoolsDayEvent", resultCode, resultMsg);
        }
    
        public virtual int uspGetGM(Nullable<long> userNo, ObjectParameter isGM)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetGM", userNoParameter, isGM);
        }
    
        public virtual int uspGetUserBlockForWeb(Nullable<long> userNo, ObjectParameter resultCode)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUserBlockForWeb", userNoParameter, resultCode);
        }
    
        public virtual int uspGetUserExist(string userId, ObjectParameter userNo, ObjectParameter resultCode, ObjectParameter resultMsg)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUserExist", userIdParameter, userNo, resultCode, resultMsg);
        }
    
        public virtual int uspGetUserId1(Nullable<long> userNo, ObjectParameter userId, ObjectParameter resultCode, ObjectParameter resultMsg)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUserId1", userNoParameter, userId, resultCode, resultMsg);
        }
    
        public virtual ObjectResult<uspGetUserInformation_Result> uspGetUserInformation(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserInformation_Result>("uspGetUserInformation", userNoParameter);
        }
    
        public virtual ObjectResult<uspGetUserInformation4SHA_Result> uspGetUserInformation4SHA(Nullable<long> userNo, ObjectParameter resultCode, ObjectParameter resultMsg)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserInformation4SHA_Result>("uspGetUserInformation4SHA", userNoParameter, resultCode, resultMsg);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetWebAuthenticKeyCryptString(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetWebAuthenticKeyCryptString", userNoParameter);
        }
    
        public virtual int uspInsertTransferAccountUser(Nullable<long> userNo, ObjectParameter resultCode)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertTransferAccountUser", userNoParameter, resultCode);
        }
    
        public virtual int uspIsGameMaster2(Nullable<long> userNo, ObjectParameter isGameMaster, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsGameMaster2", userNoParameter, isGameMaster, symNo, rv);
        }
    
        public virtual int uspSetAdult_XXX(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetAdult_XXX", userNoParameter);
        }
    
        public virtual int uspSetUserId_XXX(Nullable<long> userNo, Nullable<long> accountNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetUserId_XXX", userNoParameter, accountNoParameter);
        }
    
        public virtual int uspUpdateInitPassword(string userId, ObjectParameter resultCode)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateInitPassword", userIdParameter, resultCode);
        }
    
        public virtual ObjectResult<Nullable<int>> uspBlockIPForDaum(string startIP, string endIP, Nullable<int> blockCode, string blockMemo)
        {
            var startIPParameter = startIP != null ?
                new ObjectParameter("startIP", startIP) :
                new ObjectParameter("startIP", typeof(string));
    
            var endIPParameter = endIP != null ?
                new ObjectParameter("endIP", endIP) :
                new ObjectParameter("endIP", typeof(string));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspBlockIPForDaum", startIPParameter, endIPParameter, blockCodeParameter, blockMemoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspBlockUserByUserIdForDaum(string userId, Nullable<System.DateTime> blockEndTime, Nullable<int> blockCode, string blockMemo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var blockEndTimeParameter = blockEndTime.HasValue ?
                new ObjectParameter("blockEndTime", blockEndTime) :
                new ObjectParameter("blockEndTime", typeof(System.DateTime));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspBlockUserByUserIdForDaum", userIdParameter, blockEndTimeParameter, blockCodeParameter, blockMemoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteBlockedIPForDaum(string startIP, string endIP, Nullable<int> blockCode, string blockMemo)
        {
            var startIPParameter = startIP != null ?
                new ObjectParameter("startIP", startIP) :
                new ObjectParameter("startIP", typeof(string));
    
            var endIPParameter = endIP != null ?
                new ObjectParameter("endIP", endIP) :
                new ObjectParameter("endIP", typeof(string));
    
            var blockCodeParameter = blockCode.HasValue ?
                new ObjectParameter("blockCode", blockCode) :
                new ObjectParameter("blockCode", typeof(int));
    
            var blockMemoParameter = blockMemo != null ?
                new ObjectParameter("blockMemo", blockMemo) :
                new ObjectParameter("blockMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteBlockedIPForDaum", startIPParameter, endIPParameter, blockCodeParameter, blockMemoParameter);
        }
    
        public virtual ObjectResult<uspGetBlockedUserByUserIdForDaum_Result> uspGetBlockedUserByUserIdForDaum(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBlockedUserByUserIdForDaum_Result>("uspGetBlockedUserByUserIdForDaum", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInitPassword(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInitPassword", userIdParameter);
        }
    
        public virtual int uspIsGameMaster3(Nullable<long> userNo, ObjectParameter isGameMaster, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIsGameMaster3", userNoParameter, isGameMaster, symNo, rv);
        }
    
        public virtual ObjectResult<uspListBlockedUserByUserIdForDaum_Result> uspListBlockedUserByUserIdForDaum(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListBlockedUserByUserIdForDaum_Result>("uspListBlockedUserByUserIdForDaum", userIdParameter);
        }
    }
}
