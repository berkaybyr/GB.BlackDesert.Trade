//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackDesert.TradeMarket.Lib.Sql
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PF_BETA_LOGDB_000 : DbContext
    {
        public PF_BETA_LOGDB_000()
            : base("name=PF_BETA_LOGDB_000")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int uspDropConstraintCheck(string tbl, string col)
        {
            var tblParameter = tbl != null ?
                new ObjectParameter("tbl", tbl) :
                new ObjectParameter("tbl", typeof(string));
    
            var colParameter = col != null ?
                new ObjectParameter("col", col) :
                new ObjectParameter("col", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropConstraintCheck", tblParameter, colParameter);
        }
    
        public virtual int uspDropConstraintDefault(string tbl, string col)
        {
            var tblParameter = tbl != null ?
                new ObjectParameter("tbl", tbl) :
                new ObjectParameter("tbl", typeof(string));
    
            var colParameter = col != null ?
                new ObjectParameter("col", col) :
                new ObjectParameter("col", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropConstraintDefault", tblParameter, colParameter);
        }
    
        public virtual int uspDropConstraintPK(string tbl)
        {
            var tblParameter = tbl != null ?
                new ObjectParameter("tbl", tbl) :
                new ObjectParameter("tbl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDropConstraintPK", tblParameter);
        }
    
        public virtual int uspShrinkDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspShrinkDatabase");
        }
    
        public virtual int uspInMemoryToCashProductLogExMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToCashProductLogExMigration");
        }
    
        public virtual int uspInMemoryToChatLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToChatLogMigration");
        }
    
        public virtual int uspInMemoryToGuildSiegeLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToGuildSiegeLogMigration");
        }
    
        public virtual int uspInMemoryToItemLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToItemLogMigration");
        }
    
        public virtual int uspInMemoryToMiscLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToMiscLogMigration");
        }
    
        public virtual int uspInMemoryToPointResourceLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToPointResourceLogMigration");
        }
    
        public virtual int uspInMemoryToServantLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToServantLogMigration");
        }
    
        public virtual int uspInMemoryToUserLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToUserLogMigration");
        }
    
        public virtual int uspLogAuctionForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<short> reason, Nullable<long> auctionGoodsNo, Nullable<int> auctionKey, Nullable<long> price, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            var auctionGoodsNoParameter = auctionGoodsNo.HasValue ?
                new ObjectParameter("auctionGoodsNo", auctionGoodsNo) :
                new ObjectParameter("auctionGoodsNo", typeof(long));
    
            var auctionKeyParameter = auctionKey.HasValue ?
                new ObjectParameter("auctionKey", auctionKey) :
                new ObjectParameter("auctionKey", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogAuctionForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, reasonParameter, auctionGoodsNoParameter, auctionKeyParameter, priceParameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, symNo);
        }
    
        public virtual int uspLogCashProductForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string macAddress, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<double> currentPositionX, Nullable<double> currentPositionY, Nullable<double> currentPositionZ, Nullable<bool> isDoingSiege, Nullable<int> cashProductNo, string cashProductName, Nullable<long> cashCount, Nullable<long> cashBillingNo, Nullable<long> totalCash, Nullable<long> leftCash, Nullable<long> result, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("macAddress", macAddress) :
                new ObjectParameter("macAddress", typeof(string));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(double));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(double));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(double));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(int));
    
            var cashProductNameParameter = cashProductName != null ?
                new ObjectParameter("cashProductName", cashProductName) :
                new ObjectParameter("cashProductName", typeof(string));
    
            var cashCountParameter = cashCount.HasValue ?
                new ObjectParameter("cashCount", cashCount) :
                new ObjectParameter("cashCount", typeof(long));
    
            var cashBillingNoParameter = cashBillingNo.HasValue ?
                new ObjectParameter("cashBillingNo", cashBillingNo) :
                new ObjectParameter("cashBillingNo", typeof(long));
    
            var totalCashParameter = totalCash.HasValue ?
                new ObjectParameter("totalCash", totalCash) :
                new ObjectParameter("totalCash", typeof(long));
    
            var leftCashParameter = leftCash.HasValue ?
                new ObjectParameter("leftCash", leftCash) :
                new ObjectParameter("leftCash", typeof(long));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCashProductForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, macAddressParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, playMinuteOfCharacterParameter, characterTendencyParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, isDoingSiegeParameter, cashProductNoParameter, cashProductNameParameter, cashCountParameter, cashBillingNoParameter, totalCashParameter, leftCashParameter, resultParameter, symNo);
        }
    
        public virtual int uspLogCashProductInfoEx(Nullable<System.DateTime> registerDate, Nullable<int> cashProductNo, Nullable<long> cashItemCount, Nullable<long> reason, Nullable<long> userNo, Nullable<long> originalPearlCount, Nullable<long> realUsePearlCount, Nullable<byte> discountPercent, Nullable<int> useCouponKey, Nullable<int> eventCartkey, ObjectParameter symNo)
        {
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(int));
    
            var cashItemCountParameter = cashItemCount.HasValue ?
                new ObjectParameter("cashItemCount", cashItemCount) :
                new ObjectParameter("cashItemCount", typeof(long));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(long));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var originalPearlCountParameter = originalPearlCount.HasValue ?
                new ObjectParameter("originalPearlCount", originalPearlCount) :
                new ObjectParameter("originalPearlCount", typeof(long));
    
            var realUsePearlCountParameter = realUsePearlCount.HasValue ?
                new ObjectParameter("realUsePearlCount", realUsePearlCount) :
                new ObjectParameter("realUsePearlCount", typeof(long));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("discountPercent", discountPercent) :
                new ObjectParameter("discountPercent", typeof(byte));
    
            var useCouponKeyParameter = useCouponKey.HasValue ?
                new ObjectParameter("useCouponKey", useCouponKey) :
                new ObjectParameter("useCouponKey", typeof(int));
    
            var eventCartkeyParameter = eventCartkey.HasValue ?
                new ObjectParameter("eventCartkey", eventCartkey) :
                new ObjectParameter("eventCartkey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCashProductInfoEx", registerDateParameter, cashProductNoParameter, cashItemCountParameter, reasonParameter, userNoParameter, originalPearlCountParameter, realUsePearlCountParameter, discountPercentParameter, useCouponKeyParameter, eventCartkeyParameter, symNo);
        }
    
        public virtual int uspLogChatForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<byte> chatType, string chatMessage, string toCharacterName, Nullable<long> toCharacterNo, Nullable<int> characterTendency, Nullable<int> chatLinkedItemKey, Nullable<long> guildNo, string channelChatRoomName, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var chatTypeParameter = chatType.HasValue ?
                new ObjectParameter("chatType", chatType) :
                new ObjectParameter("chatType", typeof(byte));
    
            var chatMessageParameter = chatMessage != null ?
                new ObjectParameter("chatMessage", chatMessage) :
                new ObjectParameter("chatMessage", typeof(string));
    
            var toCharacterNameParameter = toCharacterName != null ?
                new ObjectParameter("toCharacterName", toCharacterName) :
                new ObjectParameter("toCharacterName", typeof(string));
    
            var toCharacterNoParameter = toCharacterNo.HasValue ?
                new ObjectParameter("toCharacterNo", toCharacterNo) :
                new ObjectParameter("toCharacterNo", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var chatLinkedItemKeyParameter = chatLinkedItemKey.HasValue ?
                new ObjectParameter("chatLinkedItemKey", chatLinkedItemKey) :
                new ObjectParameter("chatLinkedItemKey", typeof(int));
    
            var guildNoParameter = guildNo.HasValue ?
                new ObjectParameter("guildNo", guildNo) :
                new ObjectParameter("guildNo", typeof(long));
    
            var channelChatRoomNameParameter = channelChatRoomName != null ?
                new ObjectParameter("channelChatRoomName", channelChatRoomName) :
                new ObjectParameter("channelChatRoomName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogChatForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, chatTypeParameter, chatMessageParameter, toCharacterNameParameter, toCharacterNoParameter, characterTendencyParameter, chatLinkedItemKeyParameter, guildNoParameter, channelChatRoomNameParameter, symNo);
        }
    
        public virtual int uspLogCreateConstraint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCreateConstraint");
        }
    
        public virtual int uspLogCreateIndex()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCreateIndex");
        }
    
        public virtual int uspLogCreateTableNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCreateTableNew");
        }
    
        public virtual int uspLogCreateTableNewRename()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCreateTableNewRename");
        }
    
        public virtual int uspLogCreateView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogCreateView");
        }
    
        public virtual int uspLogGmCommandForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<int> gmCommandType, Nullable<long> commandParam1, Nullable<long> commandParam2, Nullable<long> commandParam3, Nullable<long> commandParam4, string commandTextParam1, Nullable<long> itemNo, Nullable<int> itemKey, Nullable<int> pushedItemKey0, Nullable<int> pushedItemKey1, Nullable<int> pushedItemKey2, Nullable<int> pushedItemKey3, Nullable<int> pushedItemKey4, Nullable<int> pushedItemKey5, Nullable<System.DateTime> expirationDate, Nullable<int> endurance, Nullable<int> maxEndurance, Nullable<byte> itemWhereType, Nullable<long> variousNo, Nullable<long> beforeCount, Nullable<long> variedCount, string peerCharacterName, Nullable<long> peerCharacterNo, Nullable<int> peerCharacterKey, Nullable<bool> peerCharacterisGm, Nullable<short> reason, Nullable<long> peerItemNo, Nullable<byte> peerItemWhereType, Nullable<long> peerVariousNo, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var gmCommandTypeParameter = gmCommandType.HasValue ?
                new ObjectParameter("gmCommandType", gmCommandType) :
                new ObjectParameter("gmCommandType", typeof(int));
    
            var commandParam1Parameter = commandParam1.HasValue ?
                new ObjectParameter("commandParam1", commandParam1) :
                new ObjectParameter("commandParam1", typeof(long));
    
            var commandParam2Parameter = commandParam2.HasValue ?
                new ObjectParameter("commandParam2", commandParam2) :
                new ObjectParameter("commandParam2", typeof(long));
    
            var commandParam3Parameter = commandParam3.HasValue ?
                new ObjectParameter("commandParam3", commandParam3) :
                new ObjectParameter("commandParam3", typeof(long));
    
            var commandParam4Parameter = commandParam4.HasValue ?
                new ObjectParameter("commandParam4", commandParam4) :
                new ObjectParameter("commandParam4", typeof(long));
    
            var commandTextParam1Parameter = commandTextParam1 != null ?
                new ObjectParameter("commandTextParam1", commandTextParam1) :
                new ObjectParameter("commandTextParam1", typeof(string));
    
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("itemNo", itemNo) :
                new ObjectParameter("itemNo", typeof(long));
    
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var pushedItemKey0Parameter = pushedItemKey0.HasValue ?
                new ObjectParameter("pushedItemKey0", pushedItemKey0) :
                new ObjectParameter("pushedItemKey0", typeof(int));
    
            var pushedItemKey1Parameter = pushedItemKey1.HasValue ?
                new ObjectParameter("pushedItemKey1", pushedItemKey1) :
                new ObjectParameter("pushedItemKey1", typeof(int));
    
            var pushedItemKey2Parameter = pushedItemKey2.HasValue ?
                new ObjectParameter("pushedItemKey2", pushedItemKey2) :
                new ObjectParameter("pushedItemKey2", typeof(int));
    
            var pushedItemKey3Parameter = pushedItemKey3.HasValue ?
                new ObjectParameter("pushedItemKey3", pushedItemKey3) :
                new ObjectParameter("pushedItemKey3", typeof(int));
    
            var pushedItemKey4Parameter = pushedItemKey4.HasValue ?
                new ObjectParameter("pushedItemKey4", pushedItemKey4) :
                new ObjectParameter("pushedItemKey4", typeof(int));
    
            var pushedItemKey5Parameter = pushedItemKey5.HasValue ?
                new ObjectParameter("pushedItemKey5", pushedItemKey5) :
                new ObjectParameter("pushedItemKey5", typeof(int));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("expirationDate", expirationDate) :
                new ObjectParameter("expirationDate", typeof(System.DateTime));
    
            var enduranceParameter = endurance.HasValue ?
                new ObjectParameter("endurance", endurance) :
                new ObjectParameter("endurance", typeof(int));
    
            var maxEnduranceParameter = maxEndurance.HasValue ?
                new ObjectParameter("maxEndurance", maxEndurance) :
                new ObjectParameter("maxEndurance", typeof(int));
    
            var itemWhereTypeParameter = itemWhereType.HasValue ?
                new ObjectParameter("itemWhereType", itemWhereType) :
                new ObjectParameter("itemWhereType", typeof(byte));
    
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var beforeCountParameter = beforeCount.HasValue ?
                new ObjectParameter("beforeCount", beforeCount) :
                new ObjectParameter("beforeCount", typeof(long));
    
            var variedCountParameter = variedCount.HasValue ?
                new ObjectParameter("variedCount", variedCount) :
                new ObjectParameter("variedCount", typeof(long));
    
            var peerCharacterNameParameter = peerCharacterName != null ?
                new ObjectParameter("peerCharacterName", peerCharacterName) :
                new ObjectParameter("peerCharacterName", typeof(string));
    
            var peerCharacterNoParameter = peerCharacterNo.HasValue ?
                new ObjectParameter("peerCharacterNo", peerCharacterNo) :
                new ObjectParameter("peerCharacterNo", typeof(long));
    
            var peerCharacterKeyParameter = peerCharacterKey.HasValue ?
                new ObjectParameter("peerCharacterKey", peerCharacterKey) :
                new ObjectParameter("peerCharacterKey", typeof(int));
    
            var peerCharacterisGmParameter = peerCharacterisGm.HasValue ?
                new ObjectParameter("peerCharacterisGm", peerCharacterisGm) :
                new ObjectParameter("peerCharacterisGm", typeof(bool));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            var peerItemNoParameter = peerItemNo.HasValue ?
                new ObjectParameter("peerItemNo", peerItemNo) :
                new ObjectParameter("peerItemNo", typeof(long));
    
            var peerItemWhereTypeParameter = peerItemWhereType.HasValue ?
                new ObjectParameter("peerItemWhereType", peerItemWhereType) :
                new ObjectParameter("peerItemWhereType", typeof(byte));
    
            var peerVariousNoParameter = peerVariousNo.HasValue ?
                new ObjectParameter("peerVariousNo", peerVariousNo) :
                new ObjectParameter("peerVariousNo", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogGmCommandForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, gmCommandTypeParameter, commandParam1Parameter, commandParam2Parameter, commandParam3Parameter, commandParam4Parameter, commandTextParam1Parameter, itemNoParameter, itemKeyParameter, pushedItemKey0Parameter, pushedItemKey1Parameter, pushedItemKey2Parameter, pushedItemKey3Parameter, pushedItemKey4Parameter, pushedItemKey5Parameter, expirationDateParameter, enduranceParameter, maxEnduranceParameter, itemWhereTypeParameter, variousNoParameter, beforeCountParameter, variedCountParameter, peerCharacterNameParameter, peerCharacterNoParameter, peerCharacterKeyParameter, peerCharacterisGmParameter, reasonParameter, peerItemNoParameter, peerItemWhereTypeParameter, peerVariousNoParameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, symNo);
        }
    
        public virtual int uspLogItemForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<double> currentPositionX, Nullable<double> currentPositionY, Nullable<double> currentPositionZ, Nullable<bool> isDoingSiege, Nullable<long> itemNo, Nullable<int> itemKey, Nullable<int> pushedItemKey0, Nullable<int> pushedItemKey1, Nullable<int> pushedItemKey2, Nullable<int> pushedItemKey3, Nullable<int> pushedItemKey4, Nullable<int> pushedItemKey5, Nullable<System.DateTime> expirationDate, Nullable<int> endurance, Nullable<int> maxEndurance, Nullable<byte> itemWhereType, Nullable<long> variousNo, Nullable<long> beforeCount, Nullable<long> variedCount, string peerCharacterName, Nullable<long> peerCharacterNo, Nullable<int> peerCharacterKey, Nullable<bool> peerCharacterisGm, Nullable<short> reason, Nullable<long> peerItemNo, Nullable<byte> peerItemWhereType, Nullable<long> peerVariousNo, Nullable<bool> isFocused, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> param5, Nullable<long> param6, string textParam1, string textParam2, Nullable<int> cashProductNo, Nullable<long> cashCount, string receivingUserId, Nullable<long> receivingUserNo, string receivingCharacterName, Nullable<long> receivingCharacterNo, Nullable<long> receivingMailNo, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(double));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(double));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(double));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("itemNo", itemNo) :
                new ObjectParameter("itemNo", typeof(long));
    
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var pushedItemKey0Parameter = pushedItemKey0.HasValue ?
                new ObjectParameter("pushedItemKey0", pushedItemKey0) :
                new ObjectParameter("pushedItemKey0", typeof(int));
    
            var pushedItemKey1Parameter = pushedItemKey1.HasValue ?
                new ObjectParameter("pushedItemKey1", pushedItemKey1) :
                new ObjectParameter("pushedItemKey1", typeof(int));
    
            var pushedItemKey2Parameter = pushedItemKey2.HasValue ?
                new ObjectParameter("pushedItemKey2", pushedItemKey2) :
                new ObjectParameter("pushedItemKey2", typeof(int));
    
            var pushedItemKey3Parameter = pushedItemKey3.HasValue ?
                new ObjectParameter("pushedItemKey3", pushedItemKey3) :
                new ObjectParameter("pushedItemKey3", typeof(int));
    
            var pushedItemKey4Parameter = pushedItemKey4.HasValue ?
                new ObjectParameter("pushedItemKey4", pushedItemKey4) :
                new ObjectParameter("pushedItemKey4", typeof(int));
    
            var pushedItemKey5Parameter = pushedItemKey5.HasValue ?
                new ObjectParameter("pushedItemKey5", pushedItemKey5) :
                new ObjectParameter("pushedItemKey5", typeof(int));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("expirationDate", expirationDate) :
                new ObjectParameter("expirationDate", typeof(System.DateTime));
    
            var enduranceParameter = endurance.HasValue ?
                new ObjectParameter("endurance", endurance) :
                new ObjectParameter("endurance", typeof(int));
    
            var maxEnduranceParameter = maxEndurance.HasValue ?
                new ObjectParameter("maxEndurance", maxEndurance) :
                new ObjectParameter("maxEndurance", typeof(int));
    
            var itemWhereTypeParameter = itemWhereType.HasValue ?
                new ObjectParameter("itemWhereType", itemWhereType) :
                new ObjectParameter("itemWhereType", typeof(byte));
    
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var beforeCountParameter = beforeCount.HasValue ?
                new ObjectParameter("beforeCount", beforeCount) :
                new ObjectParameter("beforeCount", typeof(long));
    
            var variedCountParameter = variedCount.HasValue ?
                new ObjectParameter("variedCount", variedCount) :
                new ObjectParameter("variedCount", typeof(long));
    
            var peerCharacterNameParameter = peerCharacterName != null ?
                new ObjectParameter("peerCharacterName", peerCharacterName) :
                new ObjectParameter("peerCharacterName", typeof(string));
    
            var peerCharacterNoParameter = peerCharacterNo.HasValue ?
                new ObjectParameter("peerCharacterNo", peerCharacterNo) :
                new ObjectParameter("peerCharacterNo", typeof(long));
    
            var peerCharacterKeyParameter = peerCharacterKey.HasValue ?
                new ObjectParameter("peerCharacterKey", peerCharacterKey) :
                new ObjectParameter("peerCharacterKey", typeof(int));
    
            var peerCharacterisGmParameter = peerCharacterisGm.HasValue ?
                new ObjectParameter("peerCharacterisGm", peerCharacterisGm) :
                new ObjectParameter("peerCharacterisGm", typeof(bool));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            var peerItemNoParameter = peerItemNo.HasValue ?
                new ObjectParameter("peerItemNo", peerItemNo) :
                new ObjectParameter("peerItemNo", typeof(long));
    
            var peerItemWhereTypeParameter = peerItemWhereType.HasValue ?
                new ObjectParameter("peerItemWhereType", peerItemWhereType) :
                new ObjectParameter("peerItemWhereType", typeof(byte));
    
            var peerVariousNoParameter = peerVariousNo.HasValue ?
                new ObjectParameter("peerVariousNo", peerVariousNo) :
                new ObjectParameter("peerVariousNo", typeof(long));
    
            var isFocusedParameter = isFocused.HasValue ?
                new ObjectParameter("isFocused", isFocused) :
                new ObjectParameter("isFocused", typeof(bool));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            var param5Parameter = param5.HasValue ?
                new ObjectParameter("param5", param5) :
                new ObjectParameter("param5", typeof(long));
    
            var param6Parameter = param6.HasValue ?
                new ObjectParameter("param6", param6) :
                new ObjectParameter("param6", typeof(long));
    
            var textParam1Parameter = textParam1 != null ?
                new ObjectParameter("textParam1", textParam1) :
                new ObjectParameter("textParam1", typeof(string));
    
            var textParam2Parameter = textParam2 != null ?
                new ObjectParameter("textParam2", textParam2) :
                new ObjectParameter("textParam2", typeof(string));
    
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(int));
    
            var cashCountParameter = cashCount.HasValue ?
                new ObjectParameter("cashCount", cashCount) :
                new ObjectParameter("cashCount", typeof(long));
    
            var receivingUserIdParameter = receivingUserId != null ?
                new ObjectParameter("receivingUserId", receivingUserId) :
                new ObjectParameter("receivingUserId", typeof(string));
    
            var receivingUserNoParameter = receivingUserNo.HasValue ?
                new ObjectParameter("receivingUserNo", receivingUserNo) :
                new ObjectParameter("receivingUserNo", typeof(long));
    
            var receivingCharacterNameParameter = receivingCharacterName != null ?
                new ObjectParameter("receivingCharacterName", receivingCharacterName) :
                new ObjectParameter("receivingCharacterName", typeof(string));
    
            var receivingCharacterNoParameter = receivingCharacterNo.HasValue ?
                new ObjectParameter("receivingCharacterNo", receivingCharacterNo) :
                new ObjectParameter("receivingCharacterNo", typeof(long));
    
            var receivingMailNoParameter = receivingMailNo.HasValue ?
                new ObjectParameter("receivingMailNo", receivingMailNo) :
                new ObjectParameter("receivingMailNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogItemForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, playMinuteOfCharacterParameter, characterTendencyParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, isDoingSiegeParameter, itemNoParameter, itemKeyParameter, pushedItemKey0Parameter, pushedItemKey1Parameter, pushedItemKey2Parameter, pushedItemKey3Parameter, pushedItemKey4Parameter, pushedItemKey5Parameter, expirationDateParameter, enduranceParameter, maxEnduranceParameter, itemWhereTypeParameter, variousNoParameter, beforeCountParameter, variedCountParameter, peerCharacterNameParameter, peerCharacterNoParameter, peerCharacterKeyParameter, peerCharacterisGmParameter, reasonParameter, peerItemNoParameter, peerItemWhereTypeParameter, peerVariousNoParameter, isFocusedParameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, param5Parameter, param6Parameter, textParam1Parameter, textParam2Parameter, cashProductNoParameter, cashCountParameter, receivingUserIdParameter, receivingUserNoParameter, receivingCharacterNameParameter, receivingCharacterNoParameter, receivingMailNoParameter, symNo);
        }
    
        public virtual int uspLogMiscForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<long> miscParam1, Nullable<long> miscParam2, Nullable<long> miscParam3, Nullable<long> miscParam4, Nullable<long> miscParam5, Nullable<long> miscParam6, Nullable<long> miscParam7, string textParam1, string textParam2, Nullable<short> reason, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var miscParam1Parameter = miscParam1.HasValue ?
                new ObjectParameter("miscParam1", miscParam1) :
                new ObjectParameter("miscParam1", typeof(long));
    
            var miscParam2Parameter = miscParam2.HasValue ?
                new ObjectParameter("miscParam2", miscParam2) :
                new ObjectParameter("miscParam2", typeof(long));
    
            var miscParam3Parameter = miscParam3.HasValue ?
                new ObjectParameter("miscParam3", miscParam3) :
                new ObjectParameter("miscParam3", typeof(long));
    
            var miscParam4Parameter = miscParam4.HasValue ?
                new ObjectParameter("miscParam4", miscParam4) :
                new ObjectParameter("miscParam4", typeof(long));
    
            var miscParam5Parameter = miscParam5.HasValue ?
                new ObjectParameter("miscParam5", miscParam5) :
                new ObjectParameter("miscParam5", typeof(long));
    
            var miscParam6Parameter = miscParam6.HasValue ?
                new ObjectParameter("miscParam6", miscParam6) :
                new ObjectParameter("miscParam6", typeof(long));
    
            var miscParam7Parameter = miscParam7.HasValue ?
                new ObjectParameter("miscParam7", miscParam7) :
                new ObjectParameter("miscParam7", typeof(long));
    
            var textParam1Parameter = textParam1 != null ?
                new ObjectParameter("textParam1", textParam1) :
                new ObjectParameter("textParam1", typeof(string));
    
            var textParam2Parameter = textParam2 != null ?
                new ObjectParameter("textParam2", textParam2) :
                new ObjectParameter("textParam2", typeof(string));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogMiscForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, miscParam1Parameter, miscParam2Parameter, miscParam3Parameter, miscParam4Parameter, miscParam5Parameter, miscParam6Parameter, miscParam7Parameter, textParam1Parameter, textParam2Parameter, reasonParameter, symNo);
        }
    
        public virtual int uspLogPearlProtect(string unk01, Nullable<long> unk02, string unk03, Nullable<long> unk04, Nullable<long> unk05, Nullable<long> unk06, Nullable<long> unk07, string unk08, string unk09, ObjectParameter unk10)
        {
            var unk01Parameter = unk01 != null ?
                new ObjectParameter("unk01", unk01) :
                new ObjectParameter("unk01", typeof(string));
    
            var unk02Parameter = unk02.HasValue ?
                new ObjectParameter("unk02", unk02) :
                new ObjectParameter("unk02", typeof(long));
    
            var unk03Parameter = unk03 != null ?
                new ObjectParameter("unk03", unk03) :
                new ObjectParameter("unk03", typeof(string));
    
            var unk04Parameter = unk04.HasValue ?
                new ObjectParameter("unk04", unk04) :
                new ObjectParameter("unk04", typeof(long));
    
            var unk05Parameter = unk05.HasValue ?
                new ObjectParameter("unk05", unk05) :
                new ObjectParameter("unk05", typeof(long));
    
            var unk06Parameter = unk06.HasValue ?
                new ObjectParameter("unk06", unk06) :
                new ObjectParameter("unk06", typeof(long));
    
            var unk07Parameter = unk07.HasValue ?
                new ObjectParameter("unk07", unk07) :
                new ObjectParameter("unk07", typeof(long));
    
            var unk08Parameter = unk08 != null ?
                new ObjectParameter("unk08", unk08) :
                new ObjectParameter("unk08", typeof(string));
    
            var unk09Parameter = unk09 != null ?
                new ObjectParameter("unk09", unk09) :
                new ObjectParameter("unk09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogPearlProtect", unk01Parameter, unk02Parameter, unk03Parameter, unk04Parameter, unk05Parameter, unk06Parameter, unk07Parameter, unk08Parameter, unk09Parameter, unk10);
        }
    
        public virtual int uspLogPointResourceForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<byte> resourceType, Nullable<long> variedPoint, Nullable<long> remainedPoint, Nullable<long> aquiredPoint, Nullable<short> reason, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var resourceTypeParameter = resourceType.HasValue ?
                new ObjectParameter("resourceType", resourceType) :
                new ObjectParameter("resourceType", typeof(byte));
    
            var variedPointParameter = variedPoint.HasValue ?
                new ObjectParameter("variedPoint", variedPoint) :
                new ObjectParameter("variedPoint", typeof(long));
    
            var remainedPointParameter = remainedPoint.HasValue ?
                new ObjectParameter("remainedPoint", remainedPoint) :
                new ObjectParameter("remainedPoint", typeof(long));
    
            var aquiredPointParameter = aquiredPoint.HasValue ?
                new ObjectParameter("aquiredPoint", aquiredPoint) :
                new ObjectParameter("aquiredPoint", typeof(long));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogPointResourceForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, resourceTypeParameter, variedPointParameter, remainedPointParameter, aquiredPointParameter, reasonParameter, symNo);
        }
    
        public virtual int uspLogRecycleTableOldToNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogRecycleTableOldToNew");
        }
    
        public virtual int uspLogServantForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<long> servantNo, string servantName, Nullable<int> servantLevel, Nullable<long> servantExperience, Nullable<int> servantCharacterKey, Nullable<int> servantHp, Nullable<int> servantMp, Nullable<int> regionKey, Nullable<short> servantCurrentFieldNo, Nullable<short> servantCurrentFieldIndex, Nullable<long> servantCurrentPositionX, Nullable<long> servantCurrentPositionY, Nullable<long> servantCurrentPositionZ, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<int> reason, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var servantNoParameter = servantNo.HasValue ?
                new ObjectParameter("servantNo", servantNo) :
                new ObjectParameter("servantNo", typeof(long));
    
            var servantNameParameter = servantName != null ?
                new ObjectParameter("servantName", servantName) :
                new ObjectParameter("servantName", typeof(string));
    
            var servantLevelParameter = servantLevel.HasValue ?
                new ObjectParameter("servantLevel", servantLevel) :
                new ObjectParameter("servantLevel", typeof(int));
    
            var servantExperienceParameter = servantExperience.HasValue ?
                new ObjectParameter("servantExperience", servantExperience) :
                new ObjectParameter("servantExperience", typeof(long));
    
            var servantCharacterKeyParameter = servantCharacterKey.HasValue ?
                new ObjectParameter("servantCharacterKey", servantCharacterKey) :
                new ObjectParameter("servantCharacterKey", typeof(int));
    
            var servantHpParameter = servantHp.HasValue ?
                new ObjectParameter("servantHp", servantHp) :
                new ObjectParameter("servantHp", typeof(int));
    
            var servantMpParameter = servantMp.HasValue ?
                new ObjectParameter("servantMp", servantMp) :
                new ObjectParameter("servantMp", typeof(int));
    
            var regionKeyParameter = regionKey.HasValue ?
                new ObjectParameter("regionKey", regionKey) :
                new ObjectParameter("regionKey", typeof(int));
    
            var servantCurrentFieldNoParameter = servantCurrentFieldNo.HasValue ?
                new ObjectParameter("servantCurrentFieldNo", servantCurrentFieldNo) :
                new ObjectParameter("servantCurrentFieldNo", typeof(short));
    
            var servantCurrentFieldIndexParameter = servantCurrentFieldIndex.HasValue ?
                new ObjectParameter("servantCurrentFieldIndex", servantCurrentFieldIndex) :
                new ObjectParameter("servantCurrentFieldIndex", typeof(short));
    
            var servantCurrentPositionXParameter = servantCurrentPositionX.HasValue ?
                new ObjectParameter("servantCurrentPositionX", servantCurrentPositionX) :
                new ObjectParameter("servantCurrentPositionX", typeof(long));
    
            var servantCurrentPositionYParameter = servantCurrentPositionY.HasValue ?
                new ObjectParameter("servantCurrentPositionY", servantCurrentPositionY) :
                new ObjectParameter("servantCurrentPositionY", typeof(long));
    
            var servantCurrentPositionZParameter = servantCurrentPositionZ.HasValue ?
                new ObjectParameter("servantCurrentPositionZ", servantCurrentPositionZ) :
                new ObjectParameter("servantCurrentPositionZ", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogServantForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, servantNoParameter, servantNameParameter, servantLevelParameter, servantExperienceParameter, servantCharacterKeyParameter, servantHpParameter, servantMpParameter, regionKeyParameter, servantCurrentFieldNoParameter, servantCurrentFieldIndexParameter, servantCurrentPositionXParameter, servantCurrentPositionYParameter, servantCurrentPositionZParameter, param1Parameter, param2Parameter, param3Parameter, reasonParameter, symNo);
        }
    
        public virtual int uspLogServiceForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string serviceString, Nullable<long> symNoReason, Nullable<long> serviceParam1, Nullable<long> serviceParam2, Nullable<long> serviceParam3, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var serviceStringParameter = serviceString != null ?
                new ObjectParameter("serviceString", serviceString) :
                new ObjectParameter("serviceString", typeof(string));
    
            var symNoReasonParameter = symNoReason.HasValue ?
                new ObjectParameter("symNoReason", symNoReason) :
                new ObjectParameter("symNoReason", typeof(long));
    
            var serviceParam1Parameter = serviceParam1.HasValue ?
                new ObjectParameter("serviceParam1", serviceParam1) :
                new ObjectParameter("serviceParam1", typeof(long));
    
            var serviceParam2Parameter = serviceParam2.HasValue ?
                new ObjectParameter("serviceParam2", serviceParam2) :
                new ObjectParameter("serviceParam2", typeof(long));
    
            var serviceParam3Parameter = serviceParam3.HasValue ?
                new ObjectParameter("serviceParam3", serviceParam3) :
                new ObjectParameter("serviceParam3", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogServiceForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, serviceStringParameter, symNoReasonParameter, serviceParam1Parameter, serviceParam2Parameter, serviceParam3Parameter, symNo);
        }
    
        public virtual int uspLogSiegeForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<int> regionKey, string regionName, Nullable<long> guildNo, string guildName, Nullable<long> guildParam1, Nullable<long> guildParam2, Nullable<long> guildParam3, Nullable<long> guildParam4, Nullable<long> guildParam5, Nullable<long> guildParam6, Nullable<long> guildParam7, Nullable<long> guildParam8, Nullable<short> reason, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var regionKeyParameter = regionKey.HasValue ?
                new ObjectParameter("regionKey", regionKey) :
                new ObjectParameter("regionKey", typeof(int));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("regionName", regionName) :
                new ObjectParameter("regionName", typeof(string));
    
            var guildNoParameter = guildNo.HasValue ?
                new ObjectParameter("guildNo", guildNo) :
                new ObjectParameter("guildNo", typeof(long));
    
            var guildNameParameter = guildName != null ?
                new ObjectParameter("guildName", guildName) :
                new ObjectParameter("guildName", typeof(string));
    
            var guildParam1Parameter = guildParam1.HasValue ?
                new ObjectParameter("guildParam1", guildParam1) :
                new ObjectParameter("guildParam1", typeof(long));
    
            var guildParam2Parameter = guildParam2.HasValue ?
                new ObjectParameter("guildParam2", guildParam2) :
                new ObjectParameter("guildParam2", typeof(long));
    
            var guildParam3Parameter = guildParam3.HasValue ?
                new ObjectParameter("guildParam3", guildParam3) :
                new ObjectParameter("guildParam3", typeof(long));
    
            var guildParam4Parameter = guildParam4.HasValue ?
                new ObjectParameter("guildParam4", guildParam4) :
                new ObjectParameter("guildParam4", typeof(long));
    
            var guildParam5Parameter = guildParam5.HasValue ?
                new ObjectParameter("guildParam5", guildParam5) :
                new ObjectParameter("guildParam5", typeof(long));
    
            var guildParam6Parameter = guildParam6.HasValue ?
                new ObjectParameter("guildParam6", guildParam6) :
                new ObjectParameter("guildParam6", typeof(long));
    
            var guildParam7Parameter = guildParam7.HasValue ?
                new ObjectParameter("guildParam7", guildParam7) :
                new ObjectParameter("guildParam7", typeof(long));
    
            var guildParam8Parameter = guildParam8.HasValue ?
                new ObjectParameter("guildParam8", guildParam8) :
                new ObjectParameter("guildParam8", typeof(long));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogSiegeForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, regionKeyParameter, regionNameParameter, guildNoParameter, guildNameParameter, guildParam1Parameter, guildParam2Parameter, guildParam3Parameter, guildParam4Parameter, guildParam5Parameter, guildParam6Parameter, guildParam7Parameter, guildParam8Parameter, reasonParameter, symNo);
        }
    
        public virtual int uspLogUserForOperation(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<short> reason, Nullable<long> logoutReason, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            var logoutReasonParameter = logoutReason.HasValue ?
                new ObjectParameter("logoutReason", logoutReason) :
                new ObjectParameter("logoutReason", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogUserForOperation", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, reasonParameter, logoutReasonParameter, symNo);
        }
    
        public virtual int uspUpdateTrPerformance(Nullable<long> serverNo, Nullable<System.DateTime> currentTime, Nullable<int> trId, string trName, Nullable<int> callCount, Nullable<long> totalElapsedTime, Nullable<long> slowElapsedTime, Nullable<long> lastStartTime, ObjectParameter symNo)
        {
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(long));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.DateTime));
    
            var trIdParameter = trId.HasValue ?
                new ObjectParameter("trId", trId) :
                new ObjectParameter("trId", typeof(int));
    
            var trNameParameter = trName != null ?
                new ObjectParameter("trName", trName) :
                new ObjectParameter("trName", typeof(string));
    
            var callCountParameter = callCount.HasValue ?
                new ObjectParameter("callCount", callCount) :
                new ObjectParameter("callCount", typeof(int));
    
            var totalElapsedTimeParameter = totalElapsedTime.HasValue ?
                new ObjectParameter("totalElapsedTime", totalElapsedTime) :
                new ObjectParameter("totalElapsedTime", typeof(long));
    
            var slowElapsedTimeParameter = slowElapsedTime.HasValue ?
                new ObjectParameter("slowElapsedTime", slowElapsedTime) :
                new ObjectParameter("slowElapsedTime", typeof(long));
    
            var lastStartTimeParameter = lastStartTime.HasValue ?
                new ObjectParameter("lastStartTime", lastStartTime) :
                new ObjectParameter("lastStartTime", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTrPerformance", serverNoParameter, currentTimeParameter, trIdParameter, trNameParameter, callCountParameter, totalElapsedTimeParameter, slowElapsedTimeParameter, lastStartTimeParameter, symNo);
        }
    
        public virtual int uspCheckAndAlterPartition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckAndAlterPartition");
        }
    
        public virtual int uspDeleteLogReasonGroupName(Nullable<byte> logReasonGroupNo, ObjectParameter symNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteLogReasonGroupName", logReasonGroupNoParameter, symNo);
        }
    
        public virtual int uspGetItemLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetItemLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetItemLogByUserIdWithWebAdminTool_Result> uspGetItemLogByUserIdWithWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetItemLogByUserIdWithWebAdminTool_Result>("uspGetItemLogByUserIdWithWebAdminTool", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetItemLogByUserIdWithWebAdminToolLive_Result> uspGetItemLogByUserIdWithWebAdminToolLive(string userId, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetItemLogByUserIdWithWebAdminToolLive_Result>("uspGetItemLogByUserIdWithWebAdminToolLive", userIdParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetMiscLogByCharacterNameWithWebAdminTool_Result> uspGetMiscLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMiscLogByCharacterNameWithWebAdminTool_Result>("uspGetMiscLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetMiscLogByUserIdWithWebAdminTool_Result> uspGetMiscLogByUserIdWithWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMiscLogByUserIdWithWebAdminTool_Result>("uspGetMiscLogByUserIdWithWebAdminTool", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetMiscLogByUserIdWithWebAdminToolLive_Result> uspGetMiscLogByUserIdWithWebAdminToolLive(string userId, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMiscLogByUserIdWithWebAdminToolLive_Result>("uspGetMiscLogByUserIdWithWebAdminToolLive", userIdParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspGetWebBoardGameLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetWebBoardGameLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetWebBoardGameLogByCharacterNameWithWebAdminTool_Result> uspGetWebBoardGameLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWebBoardGameLogByCharacterNameWithWebAdminTool_Result>("uspGetWebBoardGameLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetWebBoardGameLogByUserIdWithWebAdminTool_Result> uspGetWebBoardGameLogByUserIdWithWebAdminTool(string userNickname, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userNicknameParameter = userNickname != null ?
                new ObjectParameter("userNickname", userNickname) :
                new ObjectParameter("userNickname", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWebBoardGameLogByUserIdWithWebAdminTool_Result>("uspGetWebBoardGameLogByUserIdWithWebAdminTool", userNicknameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspGetWebBoardGameLogByUserNo(Nullable<long> userNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetWebBoardGameLogByUserNo", userNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetWebBoardGameLogByUserNoWithWebAdminTool_Result> uspGetWebBoardGameLogByUserNoWithWebAdminTool(Nullable<long> userNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWebBoardGameLogByUserNoWithWebAdminTool_Result>("uspGetWebBoardGameLogByUserNoWithWebAdminTool", userNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspGetWorldMarketLogByReason_Result> uspGetWorldMarketLogByReason(Nullable<int> reason, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorldMarketLogByReason_Result>("uspGetWorldMarketLogByReason", reasonParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspGetWorldMarketLogByUserNo_Result> uspGetWorldMarketLogByUserNo(Nullable<long> userNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorldMarketLogByUserNo_Result>("uspGetWorldMarketLogByUserNo", userNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspGetWorldMarketLogByUserNoLive_Result> uspGetWorldMarketLogByUserNoLive(Nullable<long> userNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorldMarketLogByUserNoLive_Result>("uspGetWorldMarketLogByUserNoLive", userNoParameter);
        }
    
        public virtual int uspInsertLogReason(Nullable<short> logReasonGroupNo, Nullable<short> logReasonNo, ObjectParameter symNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            var logReasonNoParameter = logReasonNo.HasValue ?
                new ObjectParameter("logReasonNo", logReasonNo) :
                new ObjectParameter("logReasonNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertLogReason", logReasonGroupNoParameter, logReasonNoParameter, symNo);
        }
    
        public virtual int uspInsertLogReasonGroupName(Nullable<byte> logReasonGroupNo, string logReasonGroupName, string logReasonGroupMemo, ObjectParameter symNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(byte));
    
            var logReasonGroupNameParameter = logReasonGroupName != null ?
                new ObjectParameter("logReasonGroupName", logReasonGroupName) :
                new ObjectParameter("logReasonGroupName", typeof(string));
    
            var logReasonGroupMemoParameter = logReasonGroupMemo != null ?
                new ObjectParameter("logReasonGroupMemo", logReasonGroupMemo) :
                new ObjectParameter("logReasonGroupMemo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertLogReasonGroupName", logReasonGroupNoParameter, logReasonGroupNameParameter, logReasonGroupMemoParameter, symNo);
        }
    
        public virtual int uspInsertWebAdminToolLog_v3(Nullable<long> accountNo, Nullable<long> userNo, string userIp, Nullable<int> logType, Nullable<int> reason, string executeSpName, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> param5, Nullable<long> param6, Nullable<long> param7, Nullable<long> param8, Nullable<long> param9, Nullable<long> param10, string stringParam1, string stringParam2, string stringParam3, Nullable<int> paramRv, ObjectParameter symNo)
        {
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(long));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var logTypeParameter = logType.HasValue ?
                new ObjectParameter("logType", logType) :
                new ObjectParameter("logType", typeof(int));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(int));
    
            var executeSpNameParameter = executeSpName != null ?
                new ObjectParameter("executeSpName", executeSpName) :
                new ObjectParameter("executeSpName", typeof(string));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            var param5Parameter = param5.HasValue ?
                new ObjectParameter("param5", param5) :
                new ObjectParameter("param5", typeof(long));
    
            var param6Parameter = param6.HasValue ?
                new ObjectParameter("param6", param6) :
                new ObjectParameter("param6", typeof(long));
    
            var param7Parameter = param7.HasValue ?
                new ObjectParameter("param7", param7) :
                new ObjectParameter("param7", typeof(long));
    
            var param8Parameter = param8.HasValue ?
                new ObjectParameter("param8", param8) :
                new ObjectParameter("param8", typeof(long));
    
            var param9Parameter = param9.HasValue ?
                new ObjectParameter("param9", param9) :
                new ObjectParameter("param9", typeof(long));
    
            var param10Parameter = param10.HasValue ?
                new ObjectParameter("param10", param10) :
                new ObjectParameter("param10", typeof(long));
    
            var stringParam1Parameter = stringParam1 != null ?
                new ObjectParameter("stringParam1", stringParam1) :
                new ObjectParameter("stringParam1", typeof(string));
    
            var stringParam2Parameter = stringParam2 != null ?
                new ObjectParameter("stringParam2", stringParam2) :
                new ObjectParameter("stringParam2", typeof(string));
    
            var stringParam3Parameter = stringParam3 != null ?
                new ObjectParameter("stringParam3", stringParam3) :
                new ObjectParameter("stringParam3", typeof(string));
    
            var paramRvParameter = paramRv.HasValue ?
                new ObjectParameter("paramRv", paramRv) :
                new ObjectParameter("paramRv", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWebAdminToolLog_v3", accountNoParameter, userNoParameter, userIpParameter, logTypeParameter, reasonParameter, executeSpNameParameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, param5Parameter, param6Parameter, param7Parameter, param8Parameter, param9Parameter, param10Parameter, stringParam1Parameter, stringParam2Parameter, stringParam3Parameter, paramRvParameter, symNo);
        }
    
        public virtual int uspListAuctionLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListAuctionLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListAuctionLogByReason(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListAuctionLogByReason", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListAuctionLogByReasonLive_Result> uspListAuctionLogByReasonLive(Nullable<short> logReasonGroupNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListAuctionLogByReasonLive_Result>("uspListAuctionLogByReasonLive", logReasonGroupNoParameter);
        }
    
        public virtual int uspListAuctionLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListAuctionLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListCashProductLogByCashProductNo(Nullable<int> cashProductNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListCashProductLogByCashProductNo", cashProductNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspListCashProductLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListCashProductLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListCashProductLogByCharacterNameWithWebAdminTool_Result> uspListCashProductLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListCashProductLogByCharacterNameWithWebAdminTool_Result>("uspListCashProductLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspListCashProductLogByProductNo(Nullable<long> cashProductNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListCashProductLogByProductNo", cashProductNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListCashProductLogByProductNoWithWebAdminTool_Result> uspListCashProductLogByProductNoWithWebAdminTool(Nullable<long> cashProductNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var cashProductNoParameter = cashProductNo.HasValue ?
                new ObjectParameter("cashProductNo", cashProductNo) :
                new ObjectParameter("cashProductNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListCashProductLogByProductNoWithWebAdminTool_Result>("uspListCashProductLogByProductNoWithWebAdminTool", cashProductNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspListCashProductLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListCashProductLogByUserId", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListCashProductLogByUserIdWithWebAdminTool_Result> uspListCashProductLogByUserIdWithWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListCashProductLogByUserIdWithWebAdminTool_Result>("uspListCashProductLogByUserIdWithWebAdminTool", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspListChatLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListChatLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspListChatLogByGuildNo(Nullable<long> guildNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var guildNoParameter = guildNo.HasValue ?
                new ObjectParameter("guildNo", guildNo) :
                new ObjectParameter("guildNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListChatLogByGuildNo", guildNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspListChatLogByRegDateTypeWithWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> chatType)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var chatTypeParameter = chatType.HasValue ?
                new ObjectParameter("chatType", chatType) :
                new ObjectParameter("chatType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListChatLogByRegDateTypeWithWebAdminTool", startDateParameter, endDateParameter, chatTypeParameter);
        }
    
        public virtual int uspListChatLogByRegDateWithWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListChatLogByRegDateWithWebAdminTool", startDateParameter, endDateParameter);
        }
    
        public virtual int uspListChatLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListChatLogByUserId", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspListGMCommandLogByAllUserWithWebAdminTool_Result> uspListGMCommandLogByAllUserWithWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGMCommandLogByAllUserWithWebAdminTool_Result>("uspListGMCommandLogByAllUserWithWebAdminTool", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListGMCommandLogByAllUserWithWebAdminToolLive_Result> uspListGMCommandLogByAllUserWithWebAdminToolLive(Nullable<short> logReasonGroupNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGMCommandLogByAllUserWithWebAdminToolLive_Result>("uspListGMCommandLogByAllUserWithWebAdminToolLive", logReasonGroupNoParameter);
        }
    
        public virtual int uspListGMCommandLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGMCommandLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListGMCommandLogByCharacterNameWithWebAdminTool_Result> uspListGMCommandLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGMCommandLogByCharacterNameWithWebAdminTool_Result>("uspListGMCommandLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGMCommandLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGMCommandLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListGMCommandLogByUserIdWebAdminTool_Result> uspListGMCommandLogByUserIdWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGMCommandLogByUserIdWebAdminTool_Result>("uspListGMCommandLogByUserIdWebAdminTool", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListGMCommandLogByUserIdWebAdminToolLive_Result> uspListGMCommandLogByUserIdWebAdminToolLive(string userId, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListGMCommandLogByUserIdWebAdminToolLive_Result>("uspListGMCommandLogByUserIdWebAdminToolLive", userIdParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByGuildName(string guildName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var guildNameParameter = guildName != null ?
                new ObjectParameter("guildName", guildName) :
                new ObjectParameter("guildName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByGuildName", guildNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByGuildNameWithWebAdminTool(string guildName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var guildNameParameter = guildName != null ?
                new ObjectParameter("guildName", guildName) :
                new ObjectParameter("guildName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByGuildNameWithWebAdminTool", guildNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByGuildNo(Nullable<long> guildNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var guildNoParameter = guildNo.HasValue ?
                new ObjectParameter("guildNo", guildNo) :
                new ObjectParameter("guildNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByGuildNo", guildNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByGuildNoWithWebAdminTool(Nullable<long> guildNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var guildNoParameter = guildNo.HasValue ?
                new ObjectParameter("guildNo", guildNo) :
                new ObjectParameter("guildNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByGuildNoWithWebAdminTool", guildNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByGuildNoWithWebAdminToolLive(Nullable<long> guildNo, Nullable<short> logReasonGroupNo)
        {
            var guildNoParameter = guildNo.HasValue ?
                new ObjectParameter("guildNo", guildNo) :
                new ObjectParameter("guildNo", typeof(long));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByGuildNoWithWebAdminToolLive", guildNoParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByReason(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByReason", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByReasonWithWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByReasonWithWebAdminTool", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByUserNo(Nullable<long> userNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByUserNo", userNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByUserNoWithWebAdminTool(Nullable<long> userNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByUserNoWithWebAdminTool", userNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListGuildSiegeLogByUserNoWithWebAdminToolLive(Nullable<long> userNo, Nullable<short> logReasonGroupNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListGuildSiegeLogByUserNoWithWebAdminToolLive", userNoParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListItemLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListItemLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListItemLogByCharacterNameWithWebAdminTool_Result> uspListItemLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListItemLogByCharacterNameWithWebAdminTool_Result>("uspListItemLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListItemLogByItemKey(Nullable<int> itemKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListItemLogByItemKey", itemKeyParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListItemLogByItemKeyWithWebAdminTool_Result> uspListItemLogByItemKeyWithWebAdminTool(Nullable<int> itemKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListItemLogByItemKeyWithWebAdminTool_Result>("uspListItemLogByItemKeyWithWebAdminTool", itemKeyParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListItemLogByItemKeyWithWebAdminToolLive_Result> uspListItemLogByItemKeyWithWebAdminToolLive(Nullable<int> itemKey, Nullable<short> logReasonGroupNo)
        {
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListItemLogByItemKeyWithWebAdminToolLive_Result>("uspListItemLogByItemKeyWithWebAdminToolLive", itemKeyParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListItemLogByItemNo(Nullable<long> itemNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("itemNo", itemNo) :
                new ObjectParameter("itemNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListItemLogByItemNo", itemNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListItemLogByItemNoWithWebAdminTool_Result> uspListItemLogByItemNoWithWebAdminTool(Nullable<long> itemNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("itemNo", itemNo) :
                new ObjectParameter("itemNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListItemLogByItemNoWithWebAdminTool_Result>("uspListItemLogByItemNoWithWebAdminTool", itemNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListItemLogByItemNoWithWebAdminToolLive_Result> uspListItemLogByItemNoWithWebAdminToolLive(Nullable<long> itemNo, Nullable<short> logReasonGroupNo)
        {
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("itemNo", itemNo) :
                new ObjectParameter("itemNo", typeof(long));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListItemLogByItemNoWithWebAdminToolLive_Result>("uspListItemLogByItemNoWithWebAdminToolLive", itemNoParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListItemLogByReason(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListItemLogByReason", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListItemLogByReasonWithWebAdminTool_Result> uspListItemLogByReasonWithWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListItemLogByReasonWithWebAdminTool_Result>("uspListItemLogByReasonWithWebAdminTool", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListItemLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListItemLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListLogReason_Result> uspListLogReason()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListLogReason_Result>("uspListLogReason");
        }
    
        public virtual int uspListLogReasonByGroupNo(Nullable<short> reasonGroupNo)
        {
            var reasonGroupNoParameter = reasonGroupNo.HasValue ?
                new ObjectParameter("reasonGroupNo", reasonGroupNo) :
                new ObjectParameter("reasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListLogReasonByGroupNo", reasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListLogReasonGroup_Result> uspListLogReasonGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListLogReasonGroup_Result>("uspListLogReasonGroup");
        }
    
        public virtual ObjectResult<uspListLogReasonGroupName_Result> uspListLogReasonGroupName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListLogReasonGroupName_Result>("uspListLogReasonGroupName");
        }
    
        public virtual int uspListMiscLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListMiscLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListMiscLogByReason(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListMiscLogByReason", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListMiscLogByReasonWithWebAdminTool_Result> uspListMiscLogByReasonWithWebAdminTool(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListMiscLogByReasonWithWebAdminTool_Result>("uspListMiscLogByReasonWithWebAdminTool", startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListMiscLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListMiscLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListPointResourceLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListPointResourceLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListPointResourceLogByCharacterNameWithWebAdminTool_Result> uspListPointResourceLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPointResourceLogByCharacterNameWithWebAdminTool_Result>("uspListPointResourceLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListPointResourceLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListPointResourceLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListPointResourceLogByUserIdWithWebAdminTool_Result> uspListPointResourceLogByUserIdWithWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListPointResourceLogByUserIdWithWebAdminTool_Result>("uspListPointResourceLogByUserIdWithWebAdminTool", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListServantLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListServantLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListServantLogByCharacterNameWithWebAdminTool_Result> uspListServantLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServantLogByCharacterNameWithWebAdminTool_Result>("uspListServantLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListServantLogByServantNo(Nullable<long> servantNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var servantNoParameter = servantNo.HasValue ?
                new ObjectParameter("servantNo", servantNo) :
                new ObjectParameter("servantNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListServantLogByServantNo", servantNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListServantLogByServantNoWithWebAdminTool_Result> uspListServantLogByServantNoWithWebAdminTool(Nullable<long> servantNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var servantNoParameter = servantNo.HasValue ?
                new ObjectParameter("servantNo", servantNo) :
                new ObjectParameter("servantNo", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServantLogByServantNoWithWebAdminTool_Result>("uspListServantLogByServantNoWithWebAdminTool", servantNoParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListServantLogByServantNoWithWebAdminToolLive_Result> uspListServantLogByServantNoWithWebAdminToolLive(Nullable<long> servantNo, Nullable<short> logReasonGroupNo)
        {
            var servantNoParameter = servantNo.HasValue ?
                new ObjectParameter("servantNo", servantNo) :
                new ObjectParameter("servantNo", typeof(long));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServantLogByServantNoWithWebAdminToolLive_Result>("uspListServantLogByServantNoWithWebAdminToolLive", servantNoParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListServantLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListServantLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListServantLogByUserIdWithWebAdminTool_Result> uspListServantLogByUserIdWithWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServantLogByUserIdWithWebAdminTool_Result>("uspListServantLogByUserIdWithWebAdminTool", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListServantLogByUserIdWithWebAdminToolLive_Result> uspListServantLogByUserIdWithWebAdminToolLive(string userId, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListServantLogByUserIdWithWebAdminToolLive_Result>("uspListServantLogByUserIdWithWebAdminToolLive", userIdParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListShaMiscTrioLogBygameId_Result> uspListShaMiscTrioLogBygameId(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string gameId, ObjectParameter symNo)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var gameIdParameter = gameId != null ?
                new ObjectParameter("gameId", gameId) :
                new ObjectParameter("gameId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListShaMiscTrioLogBygameId_Result>("uspListShaMiscTrioLogBygameId", startDateParameter, endDateParameter, gameIdParameter, symNo);
        }
    
        public virtual int uspListUserLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListUserLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListUserLogByCharacterNameWithWebAdminTool_Result> uspListUserLogByCharacterNameWithWebAdminTool(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserLogByCharacterNameWithWebAdminTool_Result>("uspListUserLogByCharacterNameWithWebAdminTool", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListUserLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListUserLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListUserLogByUserIdWithWebAdminTool_Result> uspListUserLogByUserIdWithWebAdminTool(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserLogByUserIdWithWebAdminTool_Result>("uspListUserLogByUserIdWithWebAdminTool", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListUserLogByUserIdWithWebAdminToolLive_Result> uspListUserLogByUserIdWithWebAdminToolLive(string userId, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserLogByUserIdWithWebAdminToolLive_Result>("uspListUserLogByUserIdWithWebAdminToolLive", userIdParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspListUserLogByUserIp(string ipAddress, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspListUserLogByUserIp", ipAddressParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListUserLogByUserIpWithWebAdminTool_Result> uspListUserLogByUserIpWithWebAdminTool(string ipAddress, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListUserLogByUserIpWithWebAdminTool_Result>("uspListUserLogByUserIpWithWebAdminTool", ipAddressParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListWebBoardGameLogByCharacterName_Result> uspListWebBoardGameLogByCharacterName(string characterName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWebBoardGameLogByCharacterName_Result>("uspListWebBoardGameLogByCharacterName", characterNameParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual ObjectResult<uspListWebBoardGameLogByUserId_Result> uspListWebBoardGameLogByUserId(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> logReasonGroupNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListWebBoardGameLogByUserId_Result>("uspListWebBoardGameLogByUserId", userIdParameter, startDateParameter, endDateParameter, logReasonGroupNoParameter);
        }
    
        public virtual int uspLogGmCommandForOperation1(Nullable<short> operationLogType, Nullable<short> serverNo, Nullable<System.DateTime> registerDate, string userId, Nullable<long> userNo, string userIp, Nullable<bool> isUserGm, Nullable<long> playMinuteOfUser, Nullable<bool> isPcRoom, Nullable<bool> isPcRoomPremium, Nullable<bool> isPvP, Nullable<bool> isGuestAccount, Nullable<byte> gameAgeGradeType, string characterName, Nullable<long> characterNo, Nullable<int> characterLevel, Nullable<long> characterExperience, Nullable<int> remainedSkillPoint, Nullable<int> aquiredSkillPoint, Nullable<short> currentFieldNo, Nullable<long> currentPositionX, Nullable<long> currentPositionY, Nullable<long> currentPositionZ, Nullable<byte> regionType, Nullable<bool> isDoingSiege, Nullable<long> playMinuteOfCharacter, Nullable<int> characterTendency, Nullable<int> gmCommandType, Nullable<long> commandParam1, Nullable<long> commandParam2, Nullable<long> commandParam3, Nullable<long> commandParam4, string commandTextParam1, Nullable<long> itemNo, Nullable<int> itemKey, Nullable<int> pushedItemKey0, Nullable<int> pushedItemKey1, Nullable<int> pushedItemKey2, Nullable<int> pushedItemKey3, Nullable<int> pushedItemKey4, Nullable<int> pushedItemKey5, Nullable<System.DateTime> expirationDate, Nullable<int> endurance, Nullable<int> maxEndurance, Nullable<byte> itemWhereType, Nullable<long> variousNo, Nullable<long> beforeCount, Nullable<long> variedCount, string peerCharacterName, Nullable<long> peerCharacterNo, Nullable<int> peerCharacterKey, Nullable<bool> peerCharacterisGm, Nullable<short> reason, Nullable<long> peerItemNo, Nullable<byte> peerItemWhereType, Nullable<long> peerVariousNo, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter symNo)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var isUserGmParameter = isUserGm.HasValue ?
                new ObjectParameter("isUserGm", isUserGm) :
                new ObjectParameter("isUserGm", typeof(bool));
    
            var playMinuteOfUserParameter = playMinuteOfUser.HasValue ?
                new ObjectParameter("playMinuteOfUser", playMinuteOfUser) :
                new ObjectParameter("playMinuteOfUser", typeof(long));
    
            var isPcRoomParameter = isPcRoom.HasValue ?
                new ObjectParameter("isPcRoom", isPcRoom) :
                new ObjectParameter("isPcRoom", typeof(bool));
    
            var isPcRoomPremiumParameter = isPcRoomPremium.HasValue ?
                new ObjectParameter("isPcRoomPremium", isPcRoomPremium) :
                new ObjectParameter("isPcRoomPremium", typeof(bool));
    
            var isPvPParameter = isPvP.HasValue ?
                new ObjectParameter("isPvP", isPvP) :
                new ObjectParameter("isPvP", typeof(bool));
    
            var isGuestAccountParameter = isGuestAccount.HasValue ?
                new ObjectParameter("isGuestAccount", isGuestAccount) :
                new ObjectParameter("isGuestAccount", typeof(bool));
    
            var gameAgeGradeTypeParameter = gameAgeGradeType.HasValue ?
                new ObjectParameter("gameAgeGradeType", gameAgeGradeType) :
                new ObjectParameter("gameAgeGradeType", typeof(byte));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var characterLevelParameter = characterLevel.HasValue ?
                new ObjectParameter("characterLevel", characterLevel) :
                new ObjectParameter("characterLevel", typeof(int));
    
            var characterExperienceParameter = characterExperience.HasValue ?
                new ObjectParameter("characterExperience", characterExperience) :
                new ObjectParameter("characterExperience", typeof(long));
    
            var remainedSkillPointParameter = remainedSkillPoint.HasValue ?
                new ObjectParameter("remainedSkillPoint", remainedSkillPoint) :
                new ObjectParameter("remainedSkillPoint", typeof(int));
    
            var aquiredSkillPointParameter = aquiredSkillPoint.HasValue ?
                new ObjectParameter("aquiredSkillPoint", aquiredSkillPoint) :
                new ObjectParameter("aquiredSkillPoint", typeof(int));
    
            var currentFieldNoParameter = currentFieldNo.HasValue ?
                new ObjectParameter("currentFieldNo", currentFieldNo) :
                new ObjectParameter("currentFieldNo", typeof(short));
    
            var currentPositionXParameter = currentPositionX.HasValue ?
                new ObjectParameter("currentPositionX", currentPositionX) :
                new ObjectParameter("currentPositionX", typeof(long));
    
            var currentPositionYParameter = currentPositionY.HasValue ?
                new ObjectParameter("currentPositionY", currentPositionY) :
                new ObjectParameter("currentPositionY", typeof(long));
    
            var currentPositionZParameter = currentPositionZ.HasValue ?
                new ObjectParameter("currentPositionZ", currentPositionZ) :
                new ObjectParameter("currentPositionZ", typeof(long));
    
            var regionTypeParameter = regionType.HasValue ?
                new ObjectParameter("regionType", regionType) :
                new ObjectParameter("regionType", typeof(byte));
    
            var isDoingSiegeParameter = isDoingSiege.HasValue ?
                new ObjectParameter("isDoingSiege", isDoingSiege) :
                new ObjectParameter("isDoingSiege", typeof(bool));
    
            var playMinuteOfCharacterParameter = playMinuteOfCharacter.HasValue ?
                new ObjectParameter("playMinuteOfCharacter", playMinuteOfCharacter) :
                new ObjectParameter("playMinuteOfCharacter", typeof(long));
    
            var characterTendencyParameter = characterTendency.HasValue ?
                new ObjectParameter("characterTendency", characterTendency) :
                new ObjectParameter("characterTendency", typeof(int));
    
            var gmCommandTypeParameter = gmCommandType.HasValue ?
                new ObjectParameter("gmCommandType", gmCommandType) :
                new ObjectParameter("gmCommandType", typeof(int));
    
            var commandParam1Parameter = commandParam1.HasValue ?
                new ObjectParameter("commandParam1", commandParam1) :
                new ObjectParameter("commandParam1", typeof(long));
    
            var commandParam2Parameter = commandParam2.HasValue ?
                new ObjectParameter("commandParam2", commandParam2) :
                new ObjectParameter("commandParam2", typeof(long));
    
            var commandParam3Parameter = commandParam3.HasValue ?
                new ObjectParameter("commandParam3", commandParam3) :
                new ObjectParameter("commandParam3", typeof(long));
    
            var commandParam4Parameter = commandParam4.HasValue ?
                new ObjectParameter("commandParam4", commandParam4) :
                new ObjectParameter("commandParam4", typeof(long));
    
            var commandTextParam1Parameter = commandTextParam1 != null ?
                new ObjectParameter("commandTextParam1", commandTextParam1) :
                new ObjectParameter("commandTextParam1", typeof(string));
    
            var itemNoParameter = itemNo.HasValue ?
                new ObjectParameter("itemNo", itemNo) :
                new ObjectParameter("itemNo", typeof(long));
    
            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));
    
            var pushedItemKey0Parameter = pushedItemKey0.HasValue ?
                new ObjectParameter("pushedItemKey0", pushedItemKey0) :
                new ObjectParameter("pushedItemKey0", typeof(int));
    
            var pushedItemKey1Parameter = pushedItemKey1.HasValue ?
                new ObjectParameter("pushedItemKey1", pushedItemKey1) :
                new ObjectParameter("pushedItemKey1", typeof(int));
    
            var pushedItemKey2Parameter = pushedItemKey2.HasValue ?
                new ObjectParameter("pushedItemKey2", pushedItemKey2) :
                new ObjectParameter("pushedItemKey2", typeof(int));
    
            var pushedItemKey3Parameter = pushedItemKey3.HasValue ?
                new ObjectParameter("pushedItemKey3", pushedItemKey3) :
                new ObjectParameter("pushedItemKey3", typeof(int));
    
            var pushedItemKey4Parameter = pushedItemKey4.HasValue ?
                new ObjectParameter("pushedItemKey4", pushedItemKey4) :
                new ObjectParameter("pushedItemKey4", typeof(int));
    
            var pushedItemKey5Parameter = pushedItemKey5.HasValue ?
                new ObjectParameter("pushedItemKey5", pushedItemKey5) :
                new ObjectParameter("pushedItemKey5", typeof(int));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("expirationDate", expirationDate) :
                new ObjectParameter("expirationDate", typeof(System.DateTime));
    
            var enduranceParameter = endurance.HasValue ?
                new ObjectParameter("endurance", endurance) :
                new ObjectParameter("endurance", typeof(int));
    
            var maxEnduranceParameter = maxEndurance.HasValue ?
                new ObjectParameter("maxEndurance", maxEndurance) :
                new ObjectParameter("maxEndurance", typeof(int));
    
            var itemWhereTypeParameter = itemWhereType.HasValue ?
                new ObjectParameter("itemWhereType", itemWhereType) :
                new ObjectParameter("itemWhereType", typeof(byte));
    
            var variousNoParameter = variousNo.HasValue ?
                new ObjectParameter("variousNo", variousNo) :
                new ObjectParameter("variousNo", typeof(long));
    
            var beforeCountParameter = beforeCount.HasValue ?
                new ObjectParameter("beforeCount", beforeCount) :
                new ObjectParameter("beforeCount", typeof(long));
    
            var variedCountParameter = variedCount.HasValue ?
                new ObjectParameter("variedCount", variedCount) :
                new ObjectParameter("variedCount", typeof(long));
    
            var peerCharacterNameParameter = peerCharacterName != null ?
                new ObjectParameter("peerCharacterName", peerCharacterName) :
                new ObjectParameter("peerCharacterName", typeof(string));
    
            var peerCharacterNoParameter = peerCharacterNo.HasValue ?
                new ObjectParameter("peerCharacterNo", peerCharacterNo) :
                new ObjectParameter("peerCharacterNo", typeof(long));
    
            var peerCharacterKeyParameter = peerCharacterKey.HasValue ?
                new ObjectParameter("peerCharacterKey", peerCharacterKey) :
                new ObjectParameter("peerCharacterKey", typeof(int));
    
            var peerCharacterisGmParameter = peerCharacterisGm.HasValue ?
                new ObjectParameter("peerCharacterisGm", peerCharacterisGm) :
                new ObjectParameter("peerCharacterisGm", typeof(bool));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            var peerItemNoParameter = peerItemNo.HasValue ?
                new ObjectParameter("peerItemNo", peerItemNo) :
                new ObjectParameter("peerItemNo", typeof(long));
    
            var peerItemWhereTypeParameter = peerItemWhereType.HasValue ?
                new ObjectParameter("peerItemWhereType", peerItemWhereType) :
                new ObjectParameter("peerItemWhereType", typeof(byte));
    
            var peerVariousNoParameter = peerVariousNo.HasValue ?
                new ObjectParameter("peerVariousNo", peerVariousNo) :
                new ObjectParameter("peerVariousNo", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogGmCommandForOperation1", operationLogTypeParameter, serverNoParameter, registerDateParameter, userIdParameter, userNoParameter, userIpParameter, isUserGmParameter, playMinuteOfUserParameter, isPcRoomParameter, isPcRoomPremiumParameter, isPvPParameter, isGuestAccountParameter, gameAgeGradeTypeParameter, characterNameParameter, characterNoParameter, characterLevelParameter, characterExperienceParameter, remainedSkillPointParameter, aquiredSkillPointParameter, currentFieldNoParameter, currentPositionXParameter, currentPositionYParameter, currentPositionZParameter, regionTypeParameter, isDoingSiegeParameter, playMinuteOfCharacterParameter, characterTendencyParameter, gmCommandTypeParameter, commandParam1Parameter, commandParam2Parameter, commandParam3Parameter, commandParam4Parameter, commandTextParam1Parameter, itemNoParameter, itemKeyParameter, pushedItemKey0Parameter, pushedItemKey1Parameter, pushedItemKey2Parameter, pushedItemKey3Parameter, pushedItemKey4Parameter, pushedItemKey5Parameter, expirationDateParameter, enduranceParameter, maxEnduranceParameter, itemWhereTypeParameter, variousNoParameter, beforeCountParameter, variedCountParameter, peerCharacterNameParameter, peerCharacterNoParameter, peerCharacterKeyParameter, peerCharacterisGmParameter, reasonParameter, peerItemNoParameter, peerItemWhereTypeParameter, peerVariousNoParameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, symNo);
        }
    
        public virtual int uspRemoveLogReason(Nullable<short> logReasonGroupNo, Nullable<short> logReasonNo, ObjectParameter symNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            var logReasonNoParameter = logReasonNo.HasValue ?
                new ObjectParameter("logReasonNo", logReasonNo) :
                new ObjectParameter("logReasonNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveLogReason", logReasonGroupNoParameter, logReasonNoParameter, symNo);
        }
    
        public virtual int uspRemoveLogReasonGroup(Nullable<short> logReasonGroupNo, ObjectParameter symNo)
        {
            var logReasonGroupNoParameter = logReasonGroupNo.HasValue ?
                new ObjectParameter("logReasonGroupNo", logReasonGroupNo) :
                new ObjectParameter("logReasonGroupNo", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveLogReasonGroup", logReasonGroupNoParameter, symNo);
        }
    
        public virtual int uspInMemoryToWebBoardGameLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToWebBoardGameLogMigration");
        }
    
        public virtual int uspInMemoryToWorldMarketLogMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInMemoryToWorldMarketLogMigration");
        }
    
        public virtual int uspLogWebBoardGameForOperation(Nullable<byte> logType, Nullable<short> operationLogType, Nullable<short> serverNo, string userId, Nullable<long> userNo, string userIp, string characterName, Nullable<long> characterNo, Nullable<short> reason, Nullable<byte> diceValue, Nullable<byte> startPosition, Nullable<byte> dicePosition, Nullable<byte> nowPosition, Nullable<int> finishCount, Nullable<byte> todayCount, Nullable<byte> prizeType, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, ObjectParameter symNo)
        {
            var logTypeParameter = logType.HasValue ?
                new ObjectParameter("logType", logType) :
                new ObjectParameter("logType", typeof(byte));
    
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(short));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("userIp", userIp) :
                new ObjectParameter("userIp", typeof(string));
    
            var characterNameParameter = characterName != null ?
                new ObjectParameter("characterName", characterName) :
                new ObjectParameter("characterName", typeof(string));
    
            var characterNoParameter = characterNo.HasValue ?
                new ObjectParameter("characterNo", characterNo) :
                new ObjectParameter("characterNo", typeof(long));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            var diceValueParameter = diceValue.HasValue ?
                new ObjectParameter("diceValue", diceValue) :
                new ObjectParameter("diceValue", typeof(byte));
    
            var startPositionParameter = startPosition.HasValue ?
                new ObjectParameter("startPosition", startPosition) :
                new ObjectParameter("startPosition", typeof(byte));
    
            var dicePositionParameter = dicePosition.HasValue ?
                new ObjectParameter("dicePosition", dicePosition) :
                new ObjectParameter("dicePosition", typeof(byte));
    
            var nowPositionParameter = nowPosition.HasValue ?
                new ObjectParameter("nowPosition", nowPosition) :
                new ObjectParameter("nowPosition", typeof(byte));
    
            var finishCountParameter = finishCount.HasValue ?
                new ObjectParameter("finishCount", finishCount) :
                new ObjectParameter("finishCount", typeof(int));
    
            var todayCountParameter = todayCount.HasValue ?
                new ObjectParameter("todayCount", todayCount) :
                new ObjectParameter("todayCount", typeof(byte));
    
            var prizeTypeParameter = prizeType.HasValue ?
                new ObjectParameter("prizeType", prizeType) :
                new ObjectParameter("prizeType", typeof(byte));
    
            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogWebBoardGameForOperation", logTypeParameter, operationLogTypeParameter, serverNoParameter, userIdParameter, userNoParameter, userIpParameter, characterNameParameter, characterNoParameter, reasonParameter, diceValueParameter, startPositionParameter, dicePositionParameter, nowPositionParameter, finishCountParameter, todayCountParameter, prizeTypeParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, symNo);
        }
    
        public virtual int uspLogWorldMarketForOperation(Nullable<short> operationLogType, Nullable<System.DateTime> registerDate, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType1, Nullable<int> mainKey1, Nullable<int> subKey1, Nullable<long> count1, Nullable<long> beforeCount1, Nullable<long> afterCount1, Nullable<int> keyType2, Nullable<int> mainKey2, Nullable<int> subKey2, Nullable<long> count2, Nullable<long> beforeCount2, Nullable<long> afterCount2, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> param5, Nullable<long> param6, Nullable<long> param7, Nullable<long> param8, Nullable<long> param9, Nullable<long> param10, Nullable<long> param11, Nullable<long> param12, string textParam1, string textParam2, Nullable<short> reason, ObjectParameter symNo, ObjectParameter rv)
        {
            var operationLogTypeParameter = operationLogType.HasValue ?
                new ObjectParameter("operationLogType", operationLogType) :
                new ObjectParameter("operationLogType", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("registerDate", registerDate) :
                new ObjectParameter("registerDate", typeof(System.DateTime));
    
            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));
    
            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));
    
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));
    
            var keyType1Parameter = keyType1.HasValue ?
                new ObjectParameter("keyType1", keyType1) :
                new ObjectParameter("keyType1", typeof(int));
    
            var mainKey1Parameter = mainKey1.HasValue ?
                new ObjectParameter("mainKey1", mainKey1) :
                new ObjectParameter("mainKey1", typeof(int));
    
            var subKey1Parameter = subKey1.HasValue ?
                new ObjectParameter("subKey1", subKey1) :
                new ObjectParameter("subKey1", typeof(int));
    
            var count1Parameter = count1.HasValue ?
                new ObjectParameter("count1", count1) :
                new ObjectParameter("count1", typeof(long));
    
            var beforeCount1Parameter = beforeCount1.HasValue ?
                new ObjectParameter("beforeCount1", beforeCount1) :
                new ObjectParameter("beforeCount1", typeof(long));
    
            var afterCount1Parameter = afterCount1.HasValue ?
                new ObjectParameter("afterCount1", afterCount1) :
                new ObjectParameter("afterCount1", typeof(long));
    
            var keyType2Parameter = keyType2.HasValue ?
                new ObjectParameter("keyType2", keyType2) :
                new ObjectParameter("keyType2", typeof(int));
    
            var mainKey2Parameter = mainKey2.HasValue ?
                new ObjectParameter("mainKey2", mainKey2) :
                new ObjectParameter("mainKey2", typeof(int));
    
            var subKey2Parameter = subKey2.HasValue ?
                new ObjectParameter("subKey2", subKey2) :
                new ObjectParameter("subKey2", typeof(int));
    
            var count2Parameter = count2.HasValue ?
                new ObjectParameter("count2", count2) :
                new ObjectParameter("count2", typeof(long));
    
            var beforeCount2Parameter = beforeCount2.HasValue ?
                new ObjectParameter("beforeCount2", beforeCount2) :
                new ObjectParameter("beforeCount2", typeof(long));
    
            var afterCount2Parameter = afterCount2.HasValue ?
                new ObjectParameter("afterCount2", afterCount2) :
                new ObjectParameter("afterCount2", typeof(long));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));
    
            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));
    
            var param5Parameter = param5.HasValue ?
                new ObjectParameter("param5", param5) :
                new ObjectParameter("param5", typeof(long));
    
            var param6Parameter = param6.HasValue ?
                new ObjectParameter("param6", param6) :
                new ObjectParameter("param6", typeof(long));
    
            var param7Parameter = param7.HasValue ?
                new ObjectParameter("param7", param7) :
                new ObjectParameter("param7", typeof(long));
    
            var param8Parameter = param8.HasValue ?
                new ObjectParameter("param8", param8) :
                new ObjectParameter("param8", typeof(long));
    
            var param9Parameter = param9.HasValue ?
                new ObjectParameter("param9", param9) :
                new ObjectParameter("param9", typeof(long));
    
            var param10Parameter = param10.HasValue ?
                new ObjectParameter("param10", param10) :
                new ObjectParameter("param10", typeof(long));
    
            var param11Parameter = param11.HasValue ?
                new ObjectParameter("param11", param11) :
                new ObjectParameter("param11", typeof(long));
    
            var param12Parameter = param12.HasValue ?
                new ObjectParameter("param12", param12) :
                new ObjectParameter("param12", typeof(long));
    
            var textParam1Parameter = textParam1 != null ?
                new ObjectParameter("textParam1", textParam1) :
                new ObjectParameter("textParam1", typeof(string));
    
            var textParam2Parameter = textParam2 != null ?
                new ObjectParameter("textParam2", textParam2) :
                new ObjectParameter("textParam2", typeof(string));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogWorldMarketForOperation", operationLogTypeParameter, registerDateParameter, nationCodeParameter, serverNoParameter, userNoParameter, keyType1Parameter, mainKey1Parameter, subKey1Parameter, count1Parameter, beforeCount1Parameter, afterCount1Parameter, keyType2Parameter, mainKey2Parameter, subKey2Parameter, count2Parameter, beforeCount2Parameter, afterCount2Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, param5Parameter, param6Parameter, param7Parameter, param8Parameter, param9Parameter, param10Parameter, param11Parameter, param12Parameter, textParam1Parameter, textParam2Parameter, reasonParameter, symNo, rv);
        }
    }
}
