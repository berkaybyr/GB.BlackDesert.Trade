//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GB.BlackDesert.Trade.Web.Lib.Sql
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class SA_BETA_GAMEDB_0002 : DbContext
    {
        public SA_BETA_GAMEDB_0002()
            : base("name=SA_BETA_GAMEDB_0002")
        {
        }
        public SA_BETA_GAMEDB_0002(string name)
                : base("name=SA_BETA_GAMEDB_0002")
        {
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }


        public virtual int uspCheckPayloadForRegisterItem(Nullable<int> serviceType, Nullable<int> worldNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> itemKey, Nullable<int> enchantLevel, Nullable<long> itemCount, Nullable<bool> isSealed, Nullable<long> payload, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter symNo, ObjectParameter rv)
        {
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("serviceType", serviceType) :
                new ObjectParameter("serviceType", typeof(int));

            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));

            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));

            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));

            var enchantLevelParameter = enchantLevel.HasValue ?
                new ObjectParameter("enchantLevel", enchantLevel) :
                new ObjectParameter("enchantLevel", typeof(int));

            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("itemCount", itemCount) :
                new ObjectParameter("itemCount", typeof(long));

            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));

            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));

            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));

            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));

            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));

            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));

            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckPayloadForRegisterItem", serviceTypeParameter, worldNoParameter, userNoParameter, keyTypeParameter, itemKeyParameter, enchantLevelParameter, itemCountParameter, isSealedParameter, payloadParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, symNo, rv);
        }

        public virtual int uspClearNoticeItemList(ObjectParameter symNo, ObjectParameter rv)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClearNoticeItemList", symNo, rv);
        }

        public virtual int uspCompletePayloadForRegisterItem(Nullable<int> serviceType, Nullable<int> worldNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> itemKey, Nullable<int> enchantLevel, Nullable<long> itemCount, Nullable<bool> isSealed, Nullable<long> payload, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter symNo, ObjectParameter rv)
        {
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("serviceType", serviceType) :
                new ObjectParameter("serviceType", typeof(int));

            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));

            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));

            var itemKeyParameter = itemKey.HasValue ?
                new ObjectParameter("itemKey", itemKey) :
                new ObjectParameter("itemKey", typeof(int));

            var enchantLevelParameter = enchantLevel.HasValue ?
                new ObjectParameter("enchantLevel", enchantLevel) :
                new ObjectParameter("enchantLevel", typeof(int));

            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("itemCount", itemCount) :
                new ObjectParameter("itemCount", typeof(long));

            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));

            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));

            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));

            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));

            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));

            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));

            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCompletePayloadForRegisterItem", serviceTypeParameter, worldNoParameter, userNoParameter, keyTypeParameter, itemKeyParameter, enchantLevelParameter, itemCountParameter, isSealedParameter, payloadParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, symNo, rv);
        }

        public virtual int uspCreateForWithdrawToWorldMarket(Nullable<long> payload, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> count, Nullable<short> state, ObjectParameter symNo, ObjectParameter rv)
        {
            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));

            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));

            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));

            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));

            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));

            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));

            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));

            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));

            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));

            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));

            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));

            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));

            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));

            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(short));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateForWithdrawToWorldMarket", payloadParameter, nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, countParameter, stateParameter, symNo, rv);
        }

        public virtual ObjectResult<uspFamilySKillListFromWorldMarket_Result> uspFamilySKillListFromWorldMarket(Nullable<long> userNo, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFamilySKillListFromWorldMarket_Result>(
                "uspFamilySKillListFromWorldMarket",
                userNoParameter,
                symNo,
                rv);
        }
        public virtual ObjectResult<Nullable<int>> uspUpdateCurrentPrice(int? mainKey, int? subKey, long? pricePerOne, ObjectParameter rv, ObjectParameter symNo)
        {
            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter(nameof(mainKey), (object)mainKey) :
                new ObjectParameter(nameof(mainKey), typeof(int));

            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter(nameof(subKey), (object)subKey) :
                new ObjectParameter(nameof(subKey), typeof(int));

            var pricePerOneParameter = pricePerOne.HasValue ?
                new ObjectParameter(nameof(pricePerOne), (object)pricePerOne) :
                new ObjectParameter(nameof(pricePerOne), typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>(nameof(uspUpdateCurrentPrice), mainKeyParameter, subKeyParameter, pricePerOneParameter, rv, symNo);
        }



        public virtual int uspGetChargeBuffExpiration(Nullable<long> userNo, Nullable<byte> type, ObjectParameter packageExpiration, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(byte));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetChargeBuffExpiration", userNoParameter, typeParameter, packageExpiration, symNo, rv);
        }

        public virtual int uspGetFamilyPointForWorldTradeMarket(Nullable<long> userNo, ObjectParameter levelPoint, ObjectParameter lifeLevelPoint, ObjectParameter etcPoint, ObjectParameter rv, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetFamilyPointForWorldTradeMarket", userNoParameter, levelPoint, lifeLevelPoint, etcPoint, rv, symNo);
        }

        public virtual int uspGetPremiumPackageExpiration(Nullable<long> userNo, ObjectParameter packageExpiration, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetPremiumPackageExpiration", userNoParameter, packageExpiration, symNo, rv);
        }

        public virtual int uspGetTradeMaidCount(Nullable<long> userNo, ObjectParameter maidCount, ObjectParameter rv, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetTradeMaidCount", userNoParameter, maidCount, rv, symNo);
        }

        public virtual int uspGetTradeRingBuff(Nullable<long> userNo, ObjectParameter ringBuffMaxCount, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetTradeRingBuff", userNoParameter, ringBuffMaxCount, symNo, rv);
        }

        public virtual int uspInsertToNoticeItem(Nullable<long> registtimeStamp, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<long> price, Nullable<long> changedValue, Nullable<short> noticeType, ObjectParameter rv, ObjectParameter symNo)
        {
            var registtimeStampParameter = registtimeStamp.HasValue ?
                new ObjectParameter("registtimeStamp", registtimeStamp) :
                new ObjectParameter("registtimeStamp", typeof(long));

            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));

            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));

            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));

            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));

            var changedValueParameter = changedValue.HasValue ?
                new ObjectParameter("changedValue", changedValue) :
                new ObjectParameter("changedValue", typeof(long));

            var noticeTypeParameter = noticeType.HasValue ?
                new ObjectParameter("noticeType", noticeType) :
                new ObjectParameter("noticeType", typeof(short));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertToNoticeItem", registtimeStampParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, priceParameter, changedValueParameter, noticeTypeParameter, rv, symNo);
        }

        public virtual ObjectResult<uspListFailPayload_Result> uspListFailPayload(Nullable<int> serviceType, Nullable<int> worldNo, Nullable<long> userNo, ObjectParameter rv, ObjectParameter symNo)
        {
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("serviceType", serviceType) :
                new ObjectParameter("serviceType", typeof(int));

            var worldNoParameter = worldNo.HasValue ?
                new ObjectParameter("worldNo", worldNo) :
                new ObjectParameter("worldNo", typeof(int));

            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspListFailPayload_Result>("uspListFailPayload", serviceTypeParameter, worldNoParameter, userNoParameter, rv, symNo);
        }

        public virtual int uspRemoveForDepositToWorldMarket(Nullable<long> payload, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> userNo, Nullable<int> keyType, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, Nullable<long> count, Nullable<short> state, ObjectParameter symNo, ObjectParameter rv)
        {
            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));

            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));

            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));

            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var keyTypeParameter = keyType.HasValue ?
                new ObjectParameter("keyType", keyType) :
                new ObjectParameter("keyType", typeof(int));

            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));

            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));

            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));

            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));

            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));

            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));

            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));

            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));

            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));

            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(short));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRemoveForDepositToWorldMarket", payloadParameter, nationCodeParameter, serverNoParameter, userNoParameter, keyTypeParameter, mainKeyParameter, subKeyParameter, isSealedParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, countParameter, stateParameter, symNo, rv);
        }

        public virtual int uspUpdateForWithdrawToWorldMarket(Nullable<long> payload, ObjectParameter symNo, ObjectParameter rv)
        {
            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateForWithdrawToWorldMarket", payloadParameter, symNo, rv);
        }

        public virtual int uspUpdatePackageBuffByWeb(Nullable<long> userNo, Nullable<short> serviceType, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("serviceType", serviceType) :
                new ObjectParameter("serviceType", typeof(short));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePackageBuffByWeb", userNoParameter, serviceTypeParameter, symNo, rv);
        }

        public virtual int uspUsingTicket(Nullable<long> userNo, Nullable<byte> ticketType, string ticketNo, ObjectParameter rv, ObjectParameter symNo)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var ticketTypeParameter = ticketType.HasValue ?
                new ObjectParameter("ticketType", ticketType) :
                new ObjectParameter("ticketType", typeof(byte));

            var ticketNoParameter = ticketNo != null ?
                new ObjectParameter("ticketNo", ticketNo) :
                new ObjectParameter("ticketNo", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUsingTicket", userNoParameter, ticketTypeParameter, ticketNoParameter, rv, symNo);
        }

        public virtual int uspWithdrawPayloadDestroy(Nullable<long> userNo, Nullable<int> nationCode, Nullable<int> serverNo, Nullable<long> payload, Nullable<int> mainKey, Nullable<int> subKey, Nullable<bool> isSealed, Nullable<long> count, Nullable<long> param0, Nullable<long> param1, Nullable<long> param2, Nullable<long> param3, Nullable<long> param4, ObjectParameter symNo, ObjectParameter rv)
        {
            var userNoParameter = userNo.HasValue ?
                new ObjectParameter("userNo", userNo) :
                new ObjectParameter("userNo", typeof(long));

            var nationCodeParameter = nationCode.HasValue ?
                new ObjectParameter("nationCode", nationCode) :
                new ObjectParameter("nationCode", typeof(int));

            var serverNoParameter = serverNo.HasValue ?
                new ObjectParameter("serverNo", serverNo) :
                new ObjectParameter("serverNo", typeof(int));

            var payloadParameter = payload.HasValue ?
                new ObjectParameter("payload", payload) :
                new ObjectParameter("payload", typeof(long));

            var mainKeyParameter = mainKey.HasValue ?
                new ObjectParameter("mainKey", mainKey) :
                new ObjectParameter("mainKey", typeof(int));

            var subKeyParameter = subKey.HasValue ?
                new ObjectParameter("subKey", subKey) :
                new ObjectParameter("subKey", typeof(int));

            var isSealedParameter = isSealed.HasValue ?
                new ObjectParameter("isSealed", isSealed) :
                new ObjectParameter("isSealed", typeof(bool));

            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));

            var param0Parameter = param0.HasValue ?
                new ObjectParameter("param0", param0) :
                new ObjectParameter("param0", typeof(long));

            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(long));

            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(long));

            var param3Parameter = param3.HasValue ?
                new ObjectParameter("param3", param3) :
                new ObjectParameter("param3", typeof(long));

            var param4Parameter = param4.HasValue ?
                new ObjectParameter("param4", param4) :
                new ObjectParameter("param4", typeof(long));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWithdrawPayloadDestroy", userNoParameter, nationCodeParameter, serverNoParameter, payloadParameter, mainKeyParameter, subKeyParameter, isSealedParameter, countParameter, param0Parameter, param1Parameter, param2Parameter, param3Parameter, param4Parameter, symNo, rv);
        }
    }
}
